[["index.html", "CASA0005 Geographic Information Systems and Science Welcome Acknowledgement", " CASA0005 Geographic Information Systems and Science Andy MacLachlan1 and Adam Dennett2 2022-06-20 Welcome Hello and a warm welcome to the CASA0005 Geographic Information Systems and Science online pratical handbook. This website is hosted on GitHub and holds all the practical instructions and data. Data used within the practicals is available online, however occasionally websites can undergo maintenance or be inaccessible due to political factors such as government shutdowns. Accessing this data is explained in the section hello GIS. Acknowledgement Thanks to the following people who have either contributed directly or provided code in repositories that have helped me style this book: STAT 545 rstudio4edu Hadley Wickham Alison Presmanes Hill Desirée De Leon Yihui Xie Robin Lovelace Twitter for R programmers Matt Ng StatQuest with Josh Starmer Julia Silge Jenny Bryan Garrick Aden‑Buie The R package and analysis artwork used within this book has been produced by allison_horst, whilst artwork used in information boxes has been produced by Desirée De Leon. You can find Allison’s images on the stats illustration GitHub repository and Desirée’s on the rstudio4edu GitHub repository. I’ve certainly learnt a lot from their open code repositories! The Bartlett Centre for Advanced Spatial Analysis, https://twitter.com/andymaclachlan↩︎ The Bartlett Centre for Advanced Spatial Analysis, https://twitter.com/adam_dennett↩︎ "],["hello-gis.html", "Hello GIS Intended course learning outcomes How to use this book Getting started How to download data and files from GitHub Self guided learning Interactive lectures More help Noticed a mistake? Assignment resources Reading list", " Hello GIS Spatial analysis can yield fascinating insights into geographical relationships. However, at times it can be difficult to work with. You will get lots of error messages and have software crash. The academic staff are here to help you work through these practicals but we do not know everything. It’s a good idea to become familar with online sources of help, such as: Stack Exchange RStudio community QGIS documemtation R documentation ArcGIS help pages Want to see what you can do with spatial analysis…check out this ‘What’s Next’ video produced for the ESRI conference… Intended course learning outcomes After having taking this module, you should be able to: Develop a working knowledge of QGIS and R to support the application of GI Science techniques Visualise geographic information through producing appropriate maps to high cartographic standards Carry out spatial data management tasks (joining attribute to geometry data, cleaning data, converting between file formats and spatial reference systems) Interpret data and apply relevant spatial analyses (e.g. auto correlation/hot spot analysis, areal interpolation, point in polygon/buffer analysis, spatial statistical analysis) to answer a variety of spatial problems Explain and evaluate common issues with geographic data such as representation and uncertainty Apply and critique (spatial) statistical analysis techniques to infer relationships between spatial phenomena Experience the diversity of the global spatial data landscape and evaluate the relative drawbacks and merits of different spatial datasets There is a lot of information within this practical book and we do not expect you to read everything we link to. You should attend each lecture, go through every practical and do some associated reading. This is a 15 credit module, equivalent to 150 hours of study (including the taught sessions). Outside of our lectures and practical sessions (3 hours a week) you should be spending an extra 12 hours a week on this module. How to use this book To get the most out of this book spend a few minutes learning how to control it, in the top right of this webpage you will see this tools bar: From left to right these buttons will let you: control the side bar search the entire book for a specific word change the text size, font, colour propose an edit if you see a mistake that I can review view the webpage in the ‘raw’ RMarkdown format, we cover RMarkdown in the course information about shortcuts for this book and most others like it In addition the icon in the top right of the page takes you to the GitHub repository for this book, we cover GitHub in the course, but it’s basically where the online files for the book are stored. Getting started One of the issues with GIS is that many of the files we will be working with are quite large. Fortunately in recent years UCL has seriously beefed up the storage available for students. You now get 100GB of free storage, which should be plenty for the work you will be doing this year! The Bartlett faculty has several gigabytes of storage space available on their central servers, so before we get started, we will connect to our N drive to carry out all of our practical work over the coming weeks. The data we use in this practical book is representative of what you will find when conducting independent analysis. Some books and website will give you perfectly ‘clean’ and ‘ready to use’ data, we have not done this on purpose as it’s very important to master data wrangling (also called data manipulation). In the ‘real world’ data is messy and it’s vital you know how to deal with it. Take this quote from the New York Times for example… “Data scientists, according to interviews and expert estimates, spend from 50 percent to 80 percent of their time mired in this more mundane labor of collecting and preparing unruly digital data, before it can be explored for useful nuggets.” How to download data and files from GitHub The majority of data required for the workshops is found online and we detail how to download this within the workshops. On occasion you may need to get some data from my GitHub, the workshops will instruct you to do this where needed. To do so you have a few options. Option 1 will let you download just a spceific folder whilst option 2 will download everything i have used to make the workshops. Option 1 Use DownGit Go to: https://minhaskamal.github.io/DownGit/#/home Head over to the GitHub repository: https://github.com/andrewmaclachlan/CASA0005repo Select a folder you wish to download — here i’ll use practical data as the example, click into the folder (prac7_data) and copy the url: https://github.com/andrewmaclachlan/CASA0005repo/tree/master/prac7_data Paste it into DownGit and click Download, once downloaded then unzip the folder. Option 2 Go to the online repository page here: https://github.com/andrewmaclachlan/CASA0005repo Click Clone or download, the download as ZIP. This will download the everything i have used to make this website including all the data for the practicals Self guided learning The lectures and practicals of this course only form a part of the learning process. You are expected to undertake wider reading and explore new methods and approaches. We have provided guidance on useful resources throughout the course to use as a starting point but you are encouraged to go beyond our recommedations and fully engage with applied GIS research, methods and visualisation techniques. If you find a practical particularly easy or straightforward then please move on to the next one. Practicals that look at analytical relationships also have extension activities for you to try. Interactive lectures During the lectures we will be using an interative polling and Q&amp;A application called vevox. It’s very simple to use, you can either: Download the app on iOS or Android: http://get.vevox.app Use the web app: https://vevox.app/ The meeting ID we will use is: 186-395-009 More help If you need specific assistance with this course please: Check the Moodle assessment tab for queries relating to assignments / deadlines. There is also an expected assignment timeline and frequently asked questions section within the assessment outline document. Speak to a member of the teaching team in the computer lab sessions Ask a question at the end of a lecture (time permitting) Ask a question on slack under the GIS channel— you should have recevied an invite email from Steve Gray otherwise use this link. The teaching team will monitor this — use the #gis channel for this course. Due to the size of the class we will only reply to messages on slack so all students can see the discussion. If you have a personal matter in relation to completing the course then please speak to or email Andy or Adam. If you are struggling to use R don’t worry…here is some advice from a tweet and interview with Hadley Wickham, chief scientist at RStudio… You're doing it right if you get frustrated: if you're not frustrated, you're (probably) not stretching yourself mentally — Hadley Wickham ((hadleywickham?)) 11. Februar 2015 It’s easy when you start out programming to get really frustrated and think, “Oh it’s me, I’m really stupid,” or, “I’m not made out to program.” But, that is absolutely not the case. Everyone gets frustrated. I still get frustrated occasionally when writing R code. It’s just a natural part of programming. So, it happens to everyone and gets less and less over time. Don’t blame yourself. Just take a break, do something fun, and then come back and try again later. You can also go through other free resources including: Free RStudio Education resources Codeacademy YaRrr! The Pirate’s Guide to R At the end of every practical there is a link anonymous Google feeback form, let us know if something is unclear and we will go over it in a future session. If after pursuing all these avenues you still need help you can book into our office hours. These meetings are to discuss a geographical concept in relation to the material/assessment or for any personal matters relevant to the completion of the module. These meetings are not to be used for specific technical issues. Problems of this nature should be addressed in the practical sessions. Andy Adam If you give us minimal information in this form (e.g. one word) we will cancel the meeting. Noticed a mistake? No one is perfect, if you notice a mistake let us know through the GitHub issues tab Don’t worry if you are unsure about what GitHub is we cover it in the course. Assignment resources Want some tips for resources on your assignment?…. head over to the Assignment resources pages Reading list We link to books and resources throughout each practical and in the Assignment resources pages, but a full reading list for the course is provided on the UCL library reading list page for the course, there is also a link to it over on Moodle. We’ve tried to mostly recommend open source and free books, any others are available from the library. "],["software-installation.html", "Software installation QGIS R ArcGIS", " Software installation This course primarily uses the R data science programming language and we strongly advise you complete the assignment using it. We briefly touch upon QGIS to give you a basic foundation in the range of spatial software available, please follow the instructions below before the first practical session to install the software on your local computer if you are planning to use it throughout the course. QGIS QGIS is an open-source garphic user interface GIS with many community developed add on packages that (or plugins) that provide additional functionality to the software. To get QGIS on your personal machine go to: https://qgis.org/en/site/forusers/download.html I install the OSGeo4W version. The nature of open-source means that several programs will rely on each other for features. OSGeo4W tracks all the shared requirements and does not install any duplicates. R R is both a programming language and software environment, originally designed for statistical computing and graphics. R’s great strength is that it is open-source, can be used on any computer operating system and free for anyone to use and contribute to. Because of this, it is rapidly becoming the statistical language of choice for many academics and has a huge user community with people constantly contributing new packages to carry out all manner of statistical, graphical and importantly for us, geographical tasks. Setup 1 Search for and open RStudio. You can install R Studio on your own machine from: https://www.rstudio.com/products/rstudio/download/#download R studio requires R which you can download from: https://cran.rstudio.com/ RStudio is a free and open-source integrated development environment for R — it makes R much easier to use. If you are using a Mac and run into issues, firstly follow the instructions below then check out the Mac R issues section if the problem persists. Setup 2 UCL students (and staff) can now also make use of R Studio Server. It’s RStudio on a webpage, so no installation is required. Access information will be provided on Moodle and in the lectures. ArcGIS As ArcGIS is not open soure and from my experience analysis within it is largely not reproducible and therefore it is not included within this practical book. If you are interested in it please consult previous iterations of this course. You will find tutorials on: Joining data, Map Making and Spatial Patterns. However, the analysis for your coursework must be done in either R and/or QGIS. "],["external-usage.html", "External usage How to adopt this course Issues / contributions License Version Packages", " External usage How to adopt this course All the required data to run this course or individual practicals is provided in the GitHub repository except for the raw earth observation data used in Advanced raster analysis due to its size. Instructions are provided within the practical to either download the dataset from the USGS website or download it from a shared GoogleDrive folder. There are two main options to adopt this course: Adopt the course in its entirety by forking the repository on GitHub and Pulling to your local machine or simply download a .zip file containing the entire course. Adopt a single practical by downloading the .rmd file and associated data. Instructions can be found in the section How to download data and files from GitHub Issues / contributions To raise an issue simply log it on the GitHub issues tab for the repository. To propose an edit click on the edit symbol in the top tool bar (see How to use this book) and submit it for review. If you wish to contribute material or data then please contact the course convenor Andy MacLachlan (details below). License If you use this material for teaching, research or anything else please let me (Andy) know via Twitter or email — a [dot] maclachlan [at] ucl [dot] ac [dot] uk). This practical book is licensed under a Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0) License. You are free to: Share — copy and redistribute the material in any medium or format Adapt — remix, transform, and build upon the material for any purpose, even commercially. However, you give appropriate credit, provide a link to the license, and indicate if changes were made. If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original. But, you do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation. The code within this pracical book is available under the MIT license; so it is free to use (for any purpose) as long as you cite the source. Version This is version 2.0 of the practical book Previous versions can be found at the following links. 2019-2020 academic year: https://andrewmaclachlan.github.io/CASA0005repo_20192020/ Packages This bookdown document was built with: ## Finding R package dependencies ... Done! ## setting value ## version R version 4.2.0 Patched (2022-06-14 r82486 ucrt) ## os Windows 10 x64 (build 19044) ## system x86_64, mingw32 ## ui RTerm ## language (EN) ## collate English_United Kingdom.utf8 ## ctype English_United Kingdom.utf8 ## tz Europe/London ## date 2022-06-20 ## pandoc 2.17.1.1 @ C:/Program Files/RStudio/bin/quarto/bin/ (via rmarkdown) And makes use of the following packages throughout. Thanks to STAT 545 for this code. "],["geographic-information.html", "Chapter 1 Geographic Information 1.1 Learning outcomes 1.2 Homework 1.3 Recommended listening  1.4 The Basics of Geographic Information 1.5 General data flow 1.6 Data 1.7 Data sources and task 1.8 Summary 1.9 Feedback 1.10 Mac R issues", " Chapter 1 Geographic Information 1.1 Learning outcomes By the end of this practical you should be able to: Describe and explain GIS data formats and databases Source and pre-process spatial data Load and undertaken some basic manipulation of spatial data in QGIS and R Evaluate the (dis)advantages of each GIS you have used 1.2 Homework Outside of our schedulded sessions you should be doing around 12 hours of extra study per week. Feel free to follow your own GIS interests, but good places to start include the following: Assignment This week you should undertake wider data exploration and reading to find a topic you might be interested in progressing with. Start with a data search first to avoid proposing a research area then forcing potentially unsuitable data to fit it. Reading Each week i’ll provide a core chapter to support the skills taught here. However, you are free to read whatever interests you and Adam and I strongly encourage this, so please don’t be constrained to this recommendation. Consult the reading list, practical and lecture each week for more ideas. This week: Chapter 2 “Geographic data in R” from Geocomputation with R by Lovelace, Nowosad and Muenchow (2020). Opening practice: supporting reproducibility and critical spatial data science by Brunsdon and Comber (2020) Watching What is Spatial Data Science from some of our friends at CARTO 1.3 Recommended listening  Some of these practicals are long, take regular breaks and have a listen to some of our fav tunes each week. Andy. Week 1. No other choice than Vampire Weekend. The band formed during college (University in the USA) and produced their first album of their own whilst working full time jobs! Incredible. The lead vocalist and guitarist Ezra Koenig was a school teacher in Brooklyn, New York. I’ve seen them a few times at Glastonbuty and in London during which they gave the people what they wanted and took requests from their entire catalogue, really amazing musicians. Note some of the guest appearances in this album as they also might make an apperance later in the term! Adam OK, it’s week 1, so I’m going in HARD. This week it’s the raver’s raver, the DJ’s DJ. This man is a style icon and so drum &amp; bass it hurts - it’s Voltage! Here he is with his new album, Balance Over Symmetry. This will surprise a lot of people as it’s an eclectic mix of DnB bangers through to some Burial-inspired minimal dubstep. Follow him on Instagram and get your ears around his brilliant. 1.4 The Basics of Geographic Information Geographic data, geospatial data or geographic information is data that identifies the location of features on Earth. There are two main types of data which are used in GIS applications to represent the real world. Vectors that are composed of points, lines and polygons and rasters that are grids of cells with individual values… In the above example the features in the real world (e.g. lake, forest, marsh and grassland) have been represented by points, lines and polygons (vector) or discrete grid cells (raster) of a certain size (e.g. 1 x 1m) specifying land cover type. 1.4.1 Data types in statistics Before we go any further let’s just quick go over the different types of data you might encounter Continuous data can be measured on some sort of scale and can have any value on it such as height and weight. Discrete data have finite values. It can be numeric such as number of shoes or categorial such as positive or negative. Foot length would be continuous data but shoe size would be discrete data. Nominal data has labels without any quantitative value such as hair colour or type of animal. Ordinal data has an order or scale, for example if you have ever seen the chilli rating system on food labels or filled a happiness survey with a range between 1 and 10 — that’s ordinal. Here the order matters, but not the difference between them. Binary data is that that can have only two possible outcomes, yes and no or shark and not shark. 1.4.2 Important GIS data formats There are a number of commonly used geographic data formats that store vector and raster data that you will come across during this course and it’s important to understand what they are, how they represent data and how you can use them. 1.4.2.1 Shapefiles Perhaps the most commonly used GIS data format is the shapefile. Shapefiles were developed by ESRI, one of the first and now certainly the largest commercial GIS company in the world. Despite being developed by a commercial company, they are mostly an open format and can be used (read and written) by a host of GIS Software applications. A shapefile is actually a collection of files —- at least three of which are needed for the shapefile to be displayed by GIS software. They are: .shp - the file which contains the feature geometry .shx - an index file which stores the position of the feature IDs in the .shp file .dbf - the file that stores all of the attribute information associated with the coordinates – this might be the name of the shape or some other information associated with the feature .prj - the file which contains all of the coordinate system information (the location of the shape on Earth’s surface). Data can be displayed without a projection, but the .prj file allows software to display the data correctly where data with different projections might be being used On Twitter and want to see the love for shapefiles….have a look at the shapefile account 1.4.2.2 GeoJSON GeoJSON Geospatial Data Interchange format for JavaScript Object Notation is becoming an increasingly popular spatial data format, particularly for web-based mapping as it is based on JavaScript Object Notation. Unlike a shapefile in a GeoJSON, the attributes, boundaries and projection information are all contained in the same file. 1.4.2.3 Shapefile and GeoJSON We’re now going to explore a shapefile (.shp ) and GeoJSON (.geojson) in action. Go to: http://geojson.io/#map=16/51.5247/-0.1339 Using the drawing tools to the right of the map window, create 3 objects: a point, line and a polygon as I have done above. Click on your polygon and colour it red and colour your point green Using the ‘Save’ option at the top of the map, save two copies of your new data – one in .geojson format and one in .shp format Open your two newly saved files in a text editor such as notepad or notepad++. For the shapefile you might have to unzip the folder then open each file individually. What do you notice about the similarities or differences between the two ways that the data are encoded? 1.4.2.4 Raster data Most raster data is now provided in GeoTIFF (.tiff) format, which stands for Geostarionary Earth Orbit Tagged Image File. The GeoTIFF data format was created by NASA and is a standard public domain format. All necesary information to establish the location of the data on Earth’s surface is embedded into the image. This includes: map projection, coordinate system, ellipsoid and datum type. 1.4.2.5 Other data formats Aforementioned data types and formats are likely to be the ones you predominately encounter. However there are several more used within spatial analysis. These include: Vector GML (Geography Markup Language —- gave birth to Keyhold Markup Language (KML)) Raster Band SeQuential (BSQ) - technically a method for encoding data but commonly referred to as BSQ. Hierarchical Data Format (HDF) Arc Grid There are normally valid reasons for storing data in one of these other formats. For example, BSQ are raster data with a separate text header file (.hdr) providing geographic spatial reference information. Earth observation data often monitors the electromagnetic spectrum in bands. Humans see in the visible range of the spectrum and our vision is composed of red, green and blue wavelengths. If we wanted to analyse just the red wavelength the BSQ format would let us read in only that data. In comparison a GeoTIFF might come with all the data ‘packaged’ in one file and when doing analysis over thousands of images would significantly slow things down. That said you can now often find GeoTIFFs separated in a similar format to BSQ and it’s fairly straightforward to convert between raster formats. 1.4.2.6 Geodatabase A geodatabase is a collection of geographic data held within a database. Geodatabases were developed by ESRI to overcome some of the limitations of shapefiles. They come in two main types: Personal (up to 1 TB) and File (limited to 250 - 500 MB), with Personal Geodatabases storing everything in a Microsoft Access database (.mdb) file and File Geodatabases offering more flexibility, storing everything as a series of folders in a file system. In the example below we can see that the FCC_Geodatabase (left hand pane) holds multiple points, lines, polygons, tables and raster layers in the contents tab. 1.4.2.7 GeoPackage A GeoPackage is an open, standards-based, platform-independent, portable, self-describing, compact format for transferring geospatial data. It stores spatial data layers (vector and raster) as a single file, and is based upon an SQLite database, a widely used relational database management system, permitting code based, reproducible and transparent workflows. As it stores data in a single file it is very easy to share, copy or move. 1.4.2.8 SpatiaLite SpatialLite is an open-source library that extends SQLite core. Support is fairly limited and most software that supports SpatiaLite also supports GeoPackage, as they both build upon SQLite. It doesn’t have any clear advantage over GeoPackage, however it is unable to support raster data. 1.4.2.9 PostGIS PostGIS is an opensource database extender for PostrgeSQL. Essentially PostgreSQL is a database and PostGIS is an add on which permits spatial functions. The advantages of using PostGIS over a GeoPackage are that it allows users to access the data at the same time, can handle large data more efficiently and reduces processing time. In this example calculating the number of bars per neighbourhood in Leon, Mexico the processing time reduced from 1.443 seconds (SQLite) to 0.08 seconds in PostGIS. However, data stored in PostGIS is much harder to share, move or copy. 1.4.2.10 What will I use The variety of data formats can see a bit overwhelming. I still have to check how to load some of these data formats that I don’t use frequently. But don’t worry, most of the time you’ll be using shapefiles, GeoPackages or raster data. 1.5 General data flow As Grolemund and Wickham state in R for Data Science… “Data science is a huge field, and there’s no way you can master it by reading a single book.” However, a nice place to start is looking at the typical workflow of a data science (or GIS) project which you will see throuhgout these practicals, which is summarised nicely in this diagram produced by Dr. Julia Lowndes adpted from Grolemund and Wickham. To begin you have to import your data (not necessarily environmental) into R or someother kind of GIS to acatually be able to do any kind of analysis on it. Once imported you might need to tidy the data. This really depends on what kind of data it is and we cover this later on in the course. However, putting all of your data into a consistent structure will be very beneficial when you have to do analysis on it — as you can treat it all in the same way. Grolemund and Wickham state that data is tidy when “each column is a variable, and each row is an observation”, we cover this more in next week in the Tidying data section. When you have (or haven’t) tidied data you then will most likely want to transform it. Grolemund and Wickham define this as “narrowing in on observations of interest (like all people in one city, or all data from the last year), creating new variables that are functions of existing variables (like computing speed from distance and time), and calculating a set of summary statistics (like counts or means)”. However, from a GIS point of view I would also include putting all of your data into a similar projection, covered next week in Changing projections and any other basic process you might do before the core analysis. Arguably these processes could include things such as: clipping (cookie cutting your study area), buffering (making areas within a distance of a point) and intersecting (where two datasets overlap). Tidying and transfrom = data wrangling. Remember from the introduction this could be 50-80% of a data science job! After you have transformed the data the next best thing to do is visualise it — even with some basic summary statistics. This simple step will often let you look at your data in a different way and select more appropraite analysis. Next up is modelling. Personally within GIS i’d say a better term is processing as the very data itself is usually a computer model of reality. The modelling or processing section is where you conduct the core analysis (more than the basic analysis already mentioned) and try to provide an answer to your research question. Fianlly you have to communicate your study and outputs, it doesn’t matter how good your data wrangling, modelling or processing is, if your intended audience can’t interpret it, well, it’s pretty much useless. In a few weeks come back and revisit this data flow section to see how what you have learnt fits the framework presented. 1.6 Data The volume of geographic information which is freely available for use in the UK is increasing exponentially and spatially referenced data can often be found in many different places. In this practical we’re going to use data from the London data store — a free and open data-sharing portal provided by the Greater London Authority (GLA), also known as City Hall that is the devolved regional governance body of London. We are going to get spatial data of the London boroughs and join flytipping (the illegal deposit of waste, commonly on road verges) data that is provided as a .csv file. .csv stands for comma-separated values (CSV) — it uses a comma to separate each value. At the end of this document I’ll also run through some common sources of data that will stand you in good stead (be advantageous) for the rest of the course. 1.6.1 File paths In your N drive: create a new folder called GIS and within this a sub folder called wk1. It is up to you how you organise your files. Make sure you change the file paths where appropriate to your own. 1.6.2 Data download Firstly we need to get a spatial outline of the London boroughs. The geographic boundaries that are used in the UK are a complex, often inter-related, but ever changing mass of areas. For anyone new to the UK (or indeed not a trained quantitative geographer), it can be quite a daunting task to attempt to understand all of the boundaries that are in use. Fortunately the Office for National Statistics (ONS) has an online beginners guide to UK geography. If you need more information on the vast array of different UK geographies, go and explore these resources: A Beginners Guide to UK Geography (2019) v1.0 https://geoportal.statistics.gov.uk/datasets/9c04ff58854040d09a5a7ce146ab59b4 Let’s download some data.. Spatial Data To get the data go to the London data store Search for Statistical GIS Boundary Files for London Download the statistical-gis-boundaries-london.zip Unzip the data and save it to your wk1 folder. CSV data On the same website search for fly-tipping incidents Download the .csv file 1.6.3 Data pre-processing Question Open the .csv in Excel, what do you notice about how the data is stored? Answer The year is a column and for each area the values are repeated for different years. In our analysis it is easier to have the different years as a column and populated for each area. So, we want to go from this… To this… Scroll to the end of the .csv and look at the data in the final rows. The last year should be 2017-2018. If you have years such as 2018-2020 then delete these rows. As we are going to use this dataset in QGIS and R I’ve done it in Excel using a pivot table. In future we’ll use R to automate tasks like this. Go to Insert &gt; PivotTable Select the original table and create a PivotTable in a new worksheet The PivotTable Field box will appear, experiment with the different fields in each of the areas I’ve used the following: Note how I’ve altered the total_action_taken to the sum of… as the original was displaying incorrectly, to do so: Click on drop down button for total_action_taken &gt; Value Field Settings &gt; select Sum It’s important to think about what data we actually need in the next step and it’s good practice to avoid data redundancy where possible. Spoiler The spatial data we have downloaded already contains borough name, so we don’t need it twice. However, we do need a field to link the two datasets on. You could use borough name, but when using text fields sometimes input variations can affect joins. For example, if you had the University of Manchester in one dataset and Manchester University in another the join would fail. Consequently it’s usually best to join datasets on a code field. Now save the Excel sheet that contains the pivot table as a new .csv. Make sure that the first row of data holds the column titles. Remove all empty rows. When saving the file also avoid any special characters (e.g. -) and spaces, use an underscore instead of spaces. Warning Spatial software does not like file names with spaces or special characters. Now it’s time to load, inspect and do some basic manipulation of this data. As mentioned in the lecture there are several GIS software ‘types’, here we will repeat the same process across QGIS and R. 1.6.4 QGIS 1.6.4.1 Load data Search for and open QGIS Click on the open data source manager. Just above the word browser in the top left of the screen Navigate to the London_Borough_Excluding_MHW.shp and add it, you then have to close the data source manager. You can right click on the layer to view the attribute table, however the .csv file must be loaded nto QGIS in order to join it to a shapefile. Open the data source manager and select Delimited Text Navigate to our .csv file and provide a suitable layer name Under Record and Fields Options make sure the number of header lines to discard is 0 and the First record has field names box is selected (this is assuming you left a title for each column in your .csv) Under Geometry Definition select No geometry (attribute table only) Does the sample data seem right? If so, click add then close Note Your .csv might have a extra header present (a row before Row Labels). You can either: (a) close this and go and delete this in the .csv now and reload it or (b) change the number of header lines to discard to 1 in the Record and Fields Options in the screenshot above. 1.6.4.2 Join data Right click on the London boroughs layer &gt; Properties &gt; Joins Click the plus button at the bottom of the box Complete the dialogue box 1.6.4.3 Export data Now let’s export to a GeoPackage. Right click on the London boroughs layer &gt; Export &gt; Save Feature As Select the GeoPackage format and complete the File name (the saved file name for the GeoPackage) and the Layer name (the name for this layer within the GeoPackage). Recall that a GeoPackage can store many data layers as a single file The new layer will be added to the map, so you can remove the old one (Right click on the layer &gt; Remove Layer). Make sure you remove the right one! We’ve now made a GeoPackage that we can connect our map project to. Under Browser, Right click on GeoPackage &gt; New Connection &gt; Navigate to your GeoPackage Click the down arrow left to GeoPackage and you should see the one you just navigated to. Click the down arrow on the database and you can see your layer. Now we are going to import our .csv into our GeoPackage. To do so go: Database &gt; DB Manager Select your GeoPackage in the left hand pane Import layer/file then select the .csv. Click Ok. Again, remember that the .csv in the Layers tab (bottom left) is the original. Remove it, then from the GeoPackage just click, hold and drag the .csv into the layer pane. Now let’s make a quick thematic map… Right click on your London boroughs layer &gt; Properties &gt; Symbology Select categorised and choose a data column and color ramp &gt; click Classify You could also select graduated, however our joined data fields are in the wrong data type. If you wish to change them follow this guide Save your QGIS project You should have produced something like this: We haven’t talked about the Coordiante Reference System (CRS) (or Spatial Reference System (SRS)) of our map document A coordinate reference system is a series of parameters that define the coordinate system. Within GIS we use geographic or projected coordinate systems. The former uses a three-dimensional spherical surface to define locations of Earth, whereas the latter is defined on a flat, two-dimensional surface giving it constant lengths, angles and areas. We cover this in much more detail later on in subsequent weeks. QGIS defaults to the Coordinate Reference System (CRS) WGS 84, or known by its European Petroleum Survey Group (EPSG) code 4326. However, when you add your first layer it will default the CRS of the layer. We’ll go into the background of EPSG next time. You can change the CRS by going Project &gt; Properties and selecting CRS in the left hand pane. You can also access the project CRS by just clicking on the EPSG code in the bottom right of your QGIS window, in the screenshot above click EPSG:27700. Note As we are going to open the same files in difference GIS systems it is important to close the software before moving on. If you don’t then files can be locked and unreadable as they are still considered to be in use. 1.6.5 R 1.6.5.1 Introduction R is both a programming language and software environment, originally designed for statistical computing and graphics. R’s great strength is that it is open-source, can be used on any computer operating system and free for anyone to use and contribute to. Because of this, it is rapidly becoming the statistical language of choice for many academics and has a huge user community with people constantly contributing new packages to carry out all manner of statistical, graphical and importantly for us, geographical tasks. The purpose of this practical is just to demonstrate data loading and manipulation in different software. The next practical will provide much more detail on R, so don’t worry about that. In RStudio go: File &gt; New File &gt; R Script You should be able to see these quadrants (without the code): Below are bits of code, to start we will work using the console. So just copy the bits of code into the console window, changing the file names to where your data is stored. Then at the end of this section I’ll show you how to make a script. R works on packages that are collections of functions and data. Packages are bits of code that extend R beyond the basic statistical functionality it was originally designed for. For spatial data, they enable R to process spatial data formats, carry out analysis tasks and create some of the maps that follow. Most pacakges are easily recognisable through a hexagon (hex) logo, or sticker. Mitchell O’Hara-Wild has even produced some code to make your own! Bascially, without packages, R would be very limited. With packages, you can do virtually anything! One of the issues you will come across is that packages are being continually developed and updated and unless you keep your version of R updated and your packages updated, there may be some functions and options not available to you. This can be a problem, particularly with University installations which (at best) may only get updated once a year. Therefore, apologies in advance if things don’t work as intended, but there is often a work around. For this practical we will need the ones listed in the code chunk below. Whilst we’ve installed them (with the code below), we haven’t yet loaded them. It’s best practice to do all this at the start of your code, however, for demonstration purposes I’ll load each one as we need it. install.packages(c(&quot;sf&quot;, &quot;tmap&quot;, &quot;tmaptools&quot;, &quot;RSQLite&quot;, &quot;tidyverse&quot;), repos = &quot;https://www.stats.bris.ac.uk/R/&quot;) We can also install and load packages through RStudio. If you can see the package listed in the package tab it is installed and a tick means it is loaded. Packages we’ve installed with our code: sf: simple features, standard way to encode spatial vector data tmap: layer-based and easy approach to make thematic maps tmaptools: set of tools for reading and processing spatial data RSQLite: embeds the SQLite database engine in R Here, repos stands for repository where we will download the packages from. Once you have set it, you shouldn’t need to specify it again. Whilst we’ve installed the packages we haven’t loaded them…this is done through using library() function. Thanks to Dianne Cook for this image… If you are using a Mac you might also need rgdal… this is because a lot of packages are dependent on it and it might not properly install… install.packages(&quot;rgdal&quot;) Then load rgdal… library(rgdal) If you still have issues the check out the Mac R issues section 1.6.5.2 Load data Load the sf package so we can read our shapefile in — remember to change to filepath to your shapefile. For this first practical we’ll just leave the data where it is, next week we’ll show you how to use projects to make calling data much easier. Note by default in R, the file path should be defined with / but on a windows file system it is defined with \\. Using \\\\ instead allows R to read the path correctly – alternatively, just use / library(sf) # change this to your file path!!! shape &lt;- st_read(&quot;C:/Users/Andy/OneDrive - University College London/Teaching/CASA0005/2020_2021/CASA0005repo/Prac1_data/statistical-gis-boundaries-london/ESRI/London_Borough_Excluding_MHW.shp&quot;) ## Reading layer `London_Borough_Excluding_MHW&#39; from data source ## `C:\\Users\\Andy\\OneDrive - University College London\\Teaching\\CASA0005\\2020_2021\\CASA0005repo\\prac1_data\\statistical-gis-boundaries-london\\ESRI\\London_Borough_Excluding_MHW.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 33 features and 7 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 503568.2 ymin: 155850.8 xmax: 561957.5 ymax: 200933.9 ## Projected CRS: OSGB 1936 / British National Grid Note If you are working on the UCL RStudio Server and have a shapefile (along with all the other relevant files required) you will just need to use… shape &lt;- st_read(&quot;London_Borough_Excluding_MHW.shp&quot;) As RStudio cloud knows you have setup a project and to look for files within it…we cover this very soon for RStudio desktop. To get a summary of the data held within the shapefile data (attribute table) enter the following: summary(shape) ## NAME GSS_CODE HECTARES NONLD_AREA ## Length:33 Length:33 Min. : 314.9 Min. : 0.00 ## Class :character Class :character 1st Qu.: 2724.9 1st Qu.: 0.00 ## Mode :character Mode :character Median : 3857.8 Median : 2.30 ## Mean : 4832.4 Mean : 64.22 ## 3rd Qu.: 5658.5 3rd Qu.: 95.60 ## Max. :15013.5 Max. :370.62 ## ONS_INNER SUB_2009 SUB_2006 geometry ## Length:33 Length:33 Length:33 MULTIPOLYGON :33 ## Class :character Class :character Class :character epsg:NA : 0 ## Mode :character Mode :character Mode :character +proj=tmer...: 0 ## ## ## To have a quick look what the shapefile looks like enter the following: plot(shape) That plots everything in the shapefile (all the attitbues) if you just wanted the geometry (outline of the shape) you could use… library(sf) ## Linking to GEOS 3.9.1, GDAL 3.3.2, PROJ 7.2.1; sf_use_s2() is TRUE shape %&gt;% st_geometry() %&gt;% plot() From what we did in QGIS this should look familiar. We now need to load our .csv file: library(tidyverse) #this needs to be your file path again mycsv &lt;- read_csv(&quot;C:/Users/Andy/OneDrive - University College London/Teaching/CASA0005/2020_2021/CASA0005repo/Prac1_data/fly_tipping_borough_edit.csv&quot;) ## Rows: 34 Columns: 9 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (1): Row Labels ## dbl (8): 2011_12, 2012_13, 2013_14, 2014_15, 2015_16, 2016_17, 2017_18, Gran... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. When you load tidyverse you might get a list of conflicts, this basically means that several packages have functions named the same thing. For example there is a function named filter() in the packages dplyr and stats. If you wanted to use the dplyr version you would use dplyr::filter() or for the stats version it would be stats::filter()… Note Your .csv might have a extra header present (a row before Row Labels). You can either: (a) stop and go and delete this in the .csv now and reload it or (b) change the code to… mycsv &lt;- read_csv(\"Prac1_data/fly_tipping_borough_edit.csv\", skip = 1) To view the data just input: mycsv ## # A tibble: 34 × 9 ## `Row Labels` `2011_12` `2012_13` `2013_14` `2014_15` `2015_16` `2016_17` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 E09000001 563 1492 433 347 587 1944 ## 2 E09000002 2687 2122 1399 3100 2672 1130 ## 3 E09000003 2356 1828 890 219 615 130 ## 4 E09000004 505 627 732 399 262 439 ## 5 E09000005 6713 2232 3189 3926 3980 4366 ## 6 E09000006 306 479 653 462 326 228 ## 7 E09000007 5541 5962 8281 4837 4719 4656 ## 8 E09000008 31 108 460 712 1707 637 ## 9 E09000009 6727 5679 6543 5521 6067 12688 ## 10 E09000010 7262 3595 3269 4937 5292 10894 ## # … with 24 more rows, and 2 more variables: `2017_18` &lt;dbl&gt;, Grand_Total &lt;dbl&gt; 1.6.5.3 Join data In R we’ve given our London boroughs shapefile the name shape and our flytipping .csv the name mycsv. If you look in the Environment quadrant you should see them both listed. Join the .csv to the shapefile. Here, replace Row Labels with whatever your GSS_CODE is called in the .csv: shape &lt;- shape%&gt;% merge(., mycsv, by.x=&quot;GSS_CODE&quot;, by.y=&quot;Row Labels&quot;) Let’s break this down a bit. We just created a tibble of mycsv (this is a new form of a dataframe) where each column has a variable and each row contains a set of values — so basically a normal table. We did this simply by using read_csv() to read the data in. We then matched our csv to our shape based on the GSS_CODE values in both. Check the merge was successful, this is just going to show the top 10 rows: shape%&gt;% head(., n=10) ## Simple feature collection with 10 features and 15 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 509702.4 ymin: 155850.8 xmax: 554089.2 ymax: 200933.9 ## Projected CRS: OSGB 1936 / British National Grid ## GSS_CODE NAME HECTARES NONLD_AREA ONS_INNER SUB_2009 ## 1 E09000001 City of London 314.942 24.546 T &lt;NA&gt; ## 2 E09000002 Barking and Dagenham 3779.934 169.150 F &lt;NA&gt; ## 3 E09000003 Barnet 8674.837 0.000 F &lt;NA&gt; ## 4 E09000004 Bexley 6428.649 370.619 F &lt;NA&gt; ## 5 E09000005 Brent 4323.270 0.000 F &lt;NA&gt; ## 6 E09000006 Bromley 15013.487 0.000 F &lt;NA&gt; ## 7 E09000007 Camden 2178.932 0.000 T &lt;NA&gt; ## 8 E09000008 Croydon 8649.441 0.000 F &lt;NA&gt; ## 9 E09000009 Ealing 5554.428 0.000 F &lt;NA&gt; ## 10 E09000010 Enfield 8220.025 0.000 F &lt;NA&gt; ## SUB_2006 2011_12 2012_13 2013_14 2014_15 2015_16 2016_17 2017_18 Grand_Total ## 1 &lt;NA&gt; 563 1492 433 347 587 1944 2579 7945 ## 2 &lt;NA&gt; 2687 2122 1399 3100 2672 1130 1066 14176 ## 3 &lt;NA&gt; 2356 1828 890 219 615 130 503 6541 ## 4 &lt;NA&gt; 505 627 732 399 262 439 327 3291 ## 5 &lt;NA&gt; 6713 2232 3189 3926 3980 4366 7483 31889 ## 6 &lt;NA&gt; 306 479 653 462 326 228 258 2712 ## 7 &lt;NA&gt; 5541 5962 8281 4837 4719 4656 12671 46667 ## 8 &lt;NA&gt; 31 108 460 712 1707 637 2684 6339 ## 9 &lt;NA&gt; 6727 5679 6543 5521 6067 12688 5471 48696 ## 10 &lt;NA&gt; 7262 3595 3269 4937 5292 10894 5855 41104 ## geometry ## 1 MULTIPOLYGON (((531145.1 18... ## 2 MULTIPOLYGON (((543905.4 18... ## 3 MULTIPOLYGON (((524579.9 19... ## 4 MULTIPOLYGON (((547226.2 18... ## 5 MULTIPOLYGON (((525201 1825... ## 6 MULTIPOLYGON (((540373.6 15... ## 7 MULTIPOLYGON (((528840.2 18... ## 8 MULTIPOLYGON (((535009.2 15... ## 9 MULTIPOLYGON (((510253.5 18... ## 10 MULTIPOLYGON (((531023.5 20... Now, let’s make a quick thematic map (or a qtm) using the package tmap. I’ve made mine for flytipping between 2011 and 2012 (column 2011_12). But check what your coloumn name is from the adove code head(shape, n=10) it might be slightly different like 2011-2012 or x2011_2012…. library(tmap) tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting # change the fill to your column name if different shape %&gt;% qtm(.,fill = &quot;2011_12&quot;) 1.6.6 Export data Finally write shape to a new GeoPackage (.gpkg) giving it the layer name of your choice: shape %&gt;% st_write(.,&quot;C:/Users/Andy/OneDrive - University College London/Teaching/CASA0005/2020_2021/CASA0005repo/Prac1_data/Rwk1.gpkg&quot;, &quot;london_boroughs_fly_tipping&quot;, delete_layer=TRUE) ## Deleting layer `london_boroughs_fly_tipping&#39; using driver `GPKG&#39; ## Writing layer `london_boroughs_fly_tipping&#39; to data source ## `C:/Users/Andy/OneDrive - University College London/Teaching/CASA0005/2020_2021/CASA0005repo/Prac1_data/Rwk1.gpkg&#39; using driver `GPKG&#39; ## Writing 33 features with 15 fields and geometry type Multi Polygon. So here, we are saying the shape is the object we want to save, then to the GeoPackage file path, with the layer name of london_boroughs_fly_tipping. I’ve set delete_layer to true so I could overwrite mine when I developed this practical. Changing it to false would generate an error message if you ever tried to re-run the code. Let’s also add the .csv as we did in QGIS. This is a bit more complicated as we have to use the SQLite database package. Firstly, connect to the .gpkg we just made: library(readr) library(RSQLite) con &lt;- dbConnect(RSQLite::SQLite(),dbname=&quot;C:/Users/Andy/OneDrive - University College London/Teaching/CASA0005/2020_2021/CASA0005repo/Prac1_data/Rwk1.gpkg&quot;) Now examine what is in the .gpkg…you can see that i’ve already got my original_csv stored within the .gpkg as when i developed this practical i made sure it was working! con %&gt;% dbListTables() ## [1] &quot;gpkg_contents&quot; ## [2] &quot;gpkg_extensions&quot; ## [3] &quot;gpkg_geometry_columns&quot; ## [4] &quot;gpkg_metadata&quot; ## [5] &quot;gpkg_metadata_reference&quot; ## [6] &quot;gpkg_ogr_contents&quot; ## [7] &quot;gpkg_spatial_ref_sys&quot; ## [8] &quot;gpkg_tile_matrix&quot; ## [9] &quot;gpkg_tile_matrix_set&quot; ## [10] &quot;london_boroughs_fly_tipping&quot; ## [11] &quot;original_csv&quot; ## [12] &quot;rtree_london_boroughs_fly_tipping_geom&quot; ## [13] &quot;rtree_london_boroughs_fly_tipping_geom_node&quot; ## [14] &quot;rtree_london_boroughs_fly_tipping_geom_parent&quot; ## [15] &quot;rtree_london_boroughs_fly_tipping_geom_rowid&quot; ## [16] &quot;sqlite_sequence&quot; Add your .csv and disconnect from the .gpkg: con %&gt;% dbWriteTable(., &quot;original_csv&quot;, mycsv, overwrite=TRUE) con %&gt;% dbDisconnect() Here overwrite let’s you well..overwrite the exisiting file…if this wasn’t specified as true you would get an error saying the file already existed if you tried to run this code again. 1.6.6.1 Making a script To convert this bit of analysis into a script that we could save and run again in future, I would write the following in the script quadrant: library(sf) library(tmap) library(tmaptools) library(RSQLite) library(tidyverse) #read in the shapefile shape &lt;- st_read( &quot;C:/Users/Andy/OneDrive - University College London/Teaching/CASA0005/2020_2021/CASA0005repo/Prac1_data/statistical-gis-boundaries-london/ESRI/London_Borough_Excluding_MHW.shp&quot;) # read in the csv mycsv &lt;- read_csv(&quot;C:/Users/Andy/OneDrive - University College London/Teaching/CASA0005/2020_2021/CASA0005repo/Prac1_data/fly_tipping_borough_edit.csv&quot;) # merge csv and shapefile shape &lt;- shape%&gt;% merge(., mycsv, by.x=&quot;GSS_CODE&quot;, by.y=&quot;Row Labels&quot;) # set tmap to plot tmap_mode(&quot;plot&quot;) # have a look at the map qtm(shape, fill = &quot;2011_12&quot;) # write to a .gpkg shape %&gt;% st_write(.,&quot;C:/Users/Andy/OneDrive - University College London/Teaching/CASA0005/2020_2021/CASA0005repo/Prac1_data/Rwk1.gpkg&quot;, &quot;london_boroughs_fly_tipping&quot;, delete_layer=TRUE) # connect to the .gpkg con &lt;- dbConnect(SQLite(),dbname=&quot;C:/Users/Andy/OneDrive - University College London/Teaching/CASA0005/2020_2021/CASA0005repo/Prac1_data/Rwk1.gpkg&quot;) # list what is in it con %&gt;% dbListTables() # add the original .csv con %&gt;% dbWriteTable(., &quot;original_csv&quot;, mycsv, overwrite=TRUE) # disconnect from it con %&gt;% dbDisconnect() You can then save your script through File &gt; Save As. If you are on a Mac you might also need to load rgdal…just add the following at the top of the script. library(rgdal) 1.6.7 What will I use Well… it depends. If you wanted to quickly open a dataset to explore its contents then I’d use QGIS. However, if you had 100 raster images that you wanted to clip to your study area, I’d automate it in R. There are also specific packages developed for each type of software that might dictate what you use, for example I recently made use of the Urban Multi-scale Environmental Predictor (UMEP) plugin in QGIS. That said, as I needed to match different hourly meteorological variables over a three year period I automated the first part of the analysis in R and loaded a .csv into QGIS. Recent advancments have also closed the gap somewhat between Graphic User Interface (GUI) GIS software (such as QGIS) and programming languages (such as R) with ‘bridges’ that allow you to control GUI software through code. To learn more about these bridges read Lovelace et al. (2019) chapter 9. 1.7 Data sources and task Below I’ve listed a few good data sources. Explore these and any others you can find and get an interesting dataset (e.g. in this practical our flytipping .csv) that you could join to some spatial data (e.g. in this practical the London boroughs .shp). This could be for any location in the world. 1.7.1 UK Data Service The UK Data Service geography service (https://census.edina.ac.uk/) has a library of hundreds of current and former boundary datasets for which attribute data are produced in the UK. 1.7.2 ONS The Office for National Statistics (ONS) are the national statistical agency for England and Wales and have recently started to provide access to boundary data for the statistics they produce for various geographic areas. Many of the boundaries on the ONS Geoportal are also available from the Edina Census Geography website in a more flexible fashion, however the ONS website provides very quick access to bulk-downloads — something which can be very useful when reading data directly from the web using computer software. From the ONS website you can also extract the URL at which the data is stored to use directly within your future code… 1.7.3 nomis Nomis is provided by the ONS giving free access to UK labour market statistics. You can also bulk download census data from the site too! 1.7.4 OS The Ordnance Survey (OS) are the national mapping agency for the UK. A few years ago, they opened up a number of their data products for public use including greenspace, OS Open Map and OS Terrain. For the full range see: https://www.ordnancesurvey.co.uk/business-and-government/products/finder.html?Licensed%20for=OpenData%20(Free)&amp;withdrawn=on 1.7.5 Edina Digimap Before the Ordnance Survey opened up much of its data for public use, academics and students in the UK could access OS data using the Edina Digimap Service —- this service is still available today and provides access to a number of products in addition to those available from OS Open Data. Perhaps the most exciting of the additional OS data products available from Digimap is OS MasterMap. MasterMap is a framework for all OS data and contains layers of data that include details of real world objects such as buildings, roads, paths, rivers, physical structures and land parcels, as well as the complete UK transport network. Whilst we still are required to go through Edina OS have recently announced plans to make this dataset free in the near future under the new Geospatial Commission. 1.7.6 OSM Open Street Map (OSM) is a fantastic resource —- as the name suggests, all data contained in Open Street Map are open and free for anyone to use. Much like Wikipedia, anyone can contribute content to OSM and this brings with it its own benefits (frequent updates, very large user-base) and problems (data quality and patch coverage). OSM is a very good example of Volunteered Geographic Information (VGI). It’s possible to download OSM data straight from the website, although the interface can be a little unreliable (it works better for small areas). There are, however, a number of websites that allow OSM data to be downloaded more easily and are directly linked to from the ‘Export’ option in OSM. Geofabrik (https://www.geofabrik.de/data/download.html) allows you to download frequently updated Shapefiles for various global subdivisions. 1.7.7 DEFRA The Department for Environment and Rural Affairs (DEFRA) have recently created the Data Services Platform to openly distribute environmental data. See: https://environment.data.gov.uk/ 1.7.8 Data lists Another good place to start searching for data are data lists. They simply provide a comprehensive overview of all available data conveniently categorised by discipline and country. I normally use this one: https://freegisdata.rtwilson.com/ 1.8 Summary Within this practical we have explored the different types, formats and software used to store, analyse and manipulate spatial data. In reflecting upon this practical you should consider the (dis)advantages of each, where and when they might be appropriate and the overall practicality. Next week we will delve further into R and RStudio. 1.9 Feedback Was anything that we explained unclear this week or was something really clear…let us know using the feedback form. It’s anonymous and we’ll use the responses to clear any issues up in the future / adapt the material. 1.10 Mac R issues If you have a Mac and run into issues using R, try this… It seems that a lot of the packages are dependent on rgdal, which might not properly install… Order of operations Install java JDK (to respond to error Unable to find any JVMs matching version “(null)”, which occurred when we tried to load OpenStreetMap package in RStudio) Download and install the appropriate .dmg from Java SE Development Kit 11.0.1 Run sudo R CMD javareconf in Terminal as described in this tutorial(though don’t follow this tutorial exactly, just up to that terminal command). (Maybe) restart your computer (not really sure when this is necessary). Install GDAL GDAL, the Geospatial Data Abstraction Library, appears to be a massively important package / library / whatever that a lot of the spatial tools we use depends on. This is where things might be sticky — we already installed GDAL for QGIS, but obviously RStudio can’t find that install … dunno how to update the pointers, but we found that installing GDAL (again?) solved it. We HOPE that this didn’t ruin or break any other software we’ve installed, only time will tell :grimacing: To install GDAL on a mac, first (if you haven’t) install homebrew, the mac package manager This can be done by executing /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" in Terminal, inputting password etc. Now we’re ready to brew install gdal (also in Terminal), which will run through and install a massive list of dependencies etc. Set up RStudio Restart RStudio (if the following doesn’t work on first go…) Run through all the install.packages() commands one by one in RStudio and check to make sure that they install. Check if rgdal package is working. Check the other packages OpenStreetMap, tmap, etc. "],["introduction-to-r.html", "Chapter 2 Introduction to R 2.1 Learning outcomes 2.2 Homework 2.3 Recommended listening  2.4 Introduction 2.5 Reading data into R 2.6 Tidying data 2.7 Feedback", " Chapter 2 Introduction to R 2.1 Learning outcomes By the end of this practical you should be able to: Execute basic processing in R Examine, clean and manipulate comma seperate value (.csv) data Examine, clean and manipulate and plot spatial (.shp) data Produce interactive maps Evaluate the benefits of different data manipulation and mapping techniques 2.2 Homework Outside of our schedulded sessions you should be doing around 12 hours of extra study per week. Feel free to follow your own GIS interests, but good places to start include the following: Assignment This week you need to assess the validity of your topic in terms of data suitability, then sketch out an introduction and literature review including academic and policy documents (or any reputable source). Reading This week: Chapter 2 “Geographic data in R” from Geocomputation with R by Lovelace, Nowosad and Muenchow (2020). How to Write a Paper for Publication by Rosenfeldt et al. (2000). Watching The series of short (2min) videos produced by RStudio on programming basics Hadley Wickham’s Keynote from the European Molecular Biology Laboratory (EMBL). This will be the same for a few weeks. Remember this is just a starting point, explore the reading list, practical and lecture for more ideas. 2.3 Recommended listening  Some of these practicals are long, take regular breaks and have a listen to some of our fav tunes each week. Andy. Dermot Kennedy, might give you the chills with his pure voice. I saw him live last year at All Points East in London. Orginally was well known from the Spotify Discover Weekly where he used to self publish songs. Adam. Change of genre this week, but this will still melt your brains! I first saw this band in Cambridge in about 2004 when we were both still young! 16 years later, they’re now a massive platinum-selling Rock juggernaut with their latest singles bothering the playlists of the world’s most popular radio stations and their live-shows conquering the biggest festivals. Mon the Biff. It is of course Biffy Clyro! Here’s their latest album - A Celebration of Endings - 2.4 Introduction This practical is LONG but it will take you from not knowing much about R to making freaking cool interactive maps in one practical. As you can imagine, this will be a steep learning curve. I will give you all the code you need, it’s your job to read through the text very carefully and try to understand what bits of code are doing as you go. There will be bits of code you don’t fully understand. Don’t worry, the key is to revisit later and try to work out what is going on then. Learning R is a long and iterative process and this is just the start… If you want to learn more about R and indeed download the latest version for your own use, then visit the R project pages The Wikipedia page for those who want to know a little of the history of R can be found here There is an almost endless supply of good R tutorials on the web. If you get stuck or want to learn even more R (and why would you not want to?!), I’d recommend trying some of the following R Tutorial websites: http://www.statmethods.net/index.html http://www.r-tutor.com/ http://www.cyclismo.org/tutorial/R/index.html http://www.cookbook-r.com/ If you want to really be up to date with the state of the art in R, then bookdown is a fantastic resource. It features free books by some of the pre-eminent names in the R scene — I would urge you to go and take a look. 2.4.1 Online forums are your friend!! With almost every problem you encounter with R, someone else will have had the same problem before you and posted it on a forum –– someone will then post a solution below. My usual route is to Google the problem and I’ll then be directed to a post, usually on Stack Overflow, Stack Exchange or Cross Validated. When doing so try to think about the minimal working (or not working) example (MWE), by this i mean remove anything very specific to your problem. I’ve rarely not found a solution to a problem this way. 2.4.2 Health warning Beware of posting questions on these forums yourself – contributors to these forums (especially the R ones!), whilst almost always extremely knowledgeable about R, have a bit of a reputation for being insert familiar pejorative term for less-than-polite-human-being here! As you might expect, people who have enough time to become total experts in R, have little time to work on their social skills!! Fortunately though, some other poor chump has usually taken that hit for you and you can still find a useful answer to your problem. If you are specifically more interested in the spatial side of R, then Alex Singleton and Chris Brunsdon at the Universities of Liverpool and Maynooth also have a number of very useful R Spatial Tutorials – http://rpubs.com/alexsingleton/ &amp; http://rpubs.com/chrisbrunsdon/ Robin Lovelace in Leeds is also frequently at the bleeding edge of developments in R spatial stuff, so keep an eye on his website. Robin has also made a book on GeoComputation in R, which you should definitely read! — https://geocompr.robinlovelace.net/ These websites are also very very good: https://pakillo.github.io/R-GIS-tutorial/ and http://www.maths.lancs.ac.uk/~rowlings/Teaching/UseR2012/cheatsheet.html 2.4.3 R and RStudio When you download and install R, you get the R Graphical User Interface (GUI) as standard (below). This is fine and some purists prefer using the clean, unfussy command-line original, but it has some limitations such as no graphical way to view data tables or keep track of what is in your working directory (there are a number of others too). Fortunately there are a number of software environments that have been developed for R to make it a little more user-friendly; the best of these by a long way is RStudio. RStudio can be downloaded for free from https://www.rstudio.com/. We covered the RStudio layout last week. 2.4.4 Getting started If you are some kind of masochist, you are welcome to use the bundled R GUI for all of your work. If pain is not your thing, then for this practical (and future practicals) I will assume that you are using RStudio. From the start menu on your computer, find and run RStudio Once RStudio has opened, the first thing we will do is create a new project – projects enable you to organise your work effectively and store all of the files you create and work with for a particular task. To create a new project (and this will vary a little depending on the version of RStudio you are using) select File &gt; New Project Select Start a project in a brand new working directory and create a new project in a directory of a new ‘wk2’ directory on your N: drive: My file directory (the second box here) will be different to yours as this is my teaching resources folder. Keep yours simple N:/GIS/wk2. Setting up a project is extremely useful as it lets you easily access your data and files…for example….the flytipping .csv we used last week is stored at the file path mycsv &lt;- read_csv(&quot;C:/Users/Andy/OneDrive - University College London/Teaching/CASA0005/2020_2021/CASA0005repo/Prac1_data/fly_tipping_borough_edit.csv&quot;&quot;) However as i’ve set my R project up in the CASA0005repo folder with different data folders for each week i can just use: mycsv &lt;- read_csv(&quot;Prac1_data/fly_tipping_borough_edit.csv&quot;) If i had the .csv file in the same folder as my project i could just use mycsv &lt;- read_csv(&quot;fly_tipping_borough_edit.csv&quot;) You can run this in the Console area now or within a script which we will now go over… I’d strongly recommend you think about how you will store data within your project. Is it sensible to just dump all your data into the project folder or perahps create a new folder (either in R) or how you would normally do so in Windows / OS X and keep your raw data in that folder…like i have done…Here you can see that i’m in my project folder (red box on the right) and i’ve made new folders for all my data (each practical here) and images that are shown throuhgout….nice and organised! 2.4.5 Basics R has a very steep learning curve, but hopefully it won’t take long to get your head around the basics. For example, at its most simple R can be used as a calculator. In the console window (bottom left), just type the following and press enter: 1+5 ## [1] 6 or 4*5^2 ## [1] 100 As you can see R performs these calculations instantly and prints the results in the console. This is useful for quick calculations but less useful for writing scripts requiring multiple operations or saving these for future use. To save your scripts, you should create a new R Script file. Do this now: Select File &gt; New File &gt; R Script. The R Script should open up on the top-left of your GUI. From now on type everything in this R script file and save it 2.4.6 Scripts and some basic commands Usually one of the first things to do when starting a new R Script is to check that you are in the correct working directory. This is important especially if you are working on multiple projects in different locations. To do this type the following into your new empty R Script: getwd() ## [1] &quot;C:/Users/Andy/OneDrive - University College London/Teaching/CASA0005/2020_2021/CASA0005repo&quot; To run this line, hold Ctrl (Cmd on a Mac) and press the Return(↲) key (if you are in the standard R installation, you would run your script with Ctrl R). You should now see your current working directory appear in the console. Because of the new project we have already set up, this working directory should be correct, but if for any reason we wanted to change the working directory, we would use the setwd() function. For example, we wanted to change our directory to the documents folder on the C drive, we could run (don’t do this now): setwd(&quot;C:/Documents&quot;) When we are sure we are working in the correct working directory, we can save our script by clicking on the save icon on the script tab. Save your script as something like “wk2_part1” and you will see it appear in your files window on the right hand side. As you build up a document of R code, you should get into the habit of saving your script periodically in case of an unexpected software crash. We can now begin to write a script without the need to run each line every time we press enter. In the script editor type: A &lt;- 1 B &lt;- 2 C &lt;- A+B C ## [1] 3 Select (highlight) the three lines and run all three lines with Ctrl Return(↲). You will notice the lines appear in the console (the other window). If you type C and press enter in the console (C and then ctrl return in the script window) you should have the number 3 appear. From now on I recommend you type all the commands below in the script first and then run them. Copying and pasting from this document won’t necessarily work. You will also notice that in RStudio, values A, B and C will appear in your workspace window (top right). These variables are stored in memory for future use. Try giving A and B different values and see what happens. What about if you use lower case letters? You have just demonstrated one of the powerful aspects of R, which is that it is an object oriented programming language. A, B and C are all objects that have been assigned a value with the &lt;- symbol (you can also use the = sign, but it operates slightly differently to &lt;- in R, plus the arrow assignment has become standard over the years. Use alt - to type it automatically). This principle underlies the whole language and enables users to create ever more complex objects as they progress through their analysis. If you type: ls() ## [1] &quot;A&quot; &quot;all_pkgs&quot; &quot;B&quot; &quot;C&quot; &quot;con&quot; &quot;mycsv&quot; &quot;session&quot; ## [8] &quot;shape&quot; R will produce a list of objects that are currently active. rm(A) will remove the object A from the workspace (do ls() again to check this or look in your workspace window). 2.4.7 Functions Both rm() and ls() are known as functions. Functions are the other fundamental aspect to the R language. Functions can be thought of as single or multiple calculations that you apply to objects. They generally take the form of…(don’t run these) function(object, argument1, argument2, argument3) Where the object is some form of data and the arguments parameterise what the function will do. You could save the ouput to a new object using something like… X&lt;-function(data, argument1, argument2, argument3) You can write your own functions to carry out tasks (and we’ll come onto that in subsequent practical sessions), but normally you will just used one of the virtually infinite number of functions that other people have already written for us. 2.4.8 Basic plotting One common function is the plot() function for displaying data as a graphical output. Add these lines to your script and run them as before and you can see some plot() outputs: #create some datasets, first a vector of 1-100 and 101-200 Data1 &lt;- c(1:100) Data2 &lt;- c(101:200) #Plot the data plot(Data1, Data2, col=&quot;red&quot;) #just for fun, create some more, this time some normally distributed #vectors of 100 numbers Data3 &lt;- rnorm(100, mean = 53, sd=34) Data4 &lt;- rnorm(100, mean = 64, sd=14) #plot plot(Data3, Data4, col=&quot;blue&quot;) In the code above, you will have noticed the # symbol. This signifies that whatever comes after it on that line is a comment. Comments are ignored by the R console and they allow you to annotate your code so that you know what it is doing. It is good programming practice to comment your code extensively so that you can keep track of what your scripts are for. Warning Heed our advice now and comment your code it will save you time in the future! 2.4.9 Help The previous lines of code also demonstrated a number of functions: c() concatenates a string of numbers together into a vector. 1:100 means produce the integers between and including 1:100, the plot() function plots the two data objects and includes a parameter to change the colour of the points. To understand what a function does, you can consult the R Help system. Simply type a question mark and then the function name; for example: ?plot In RStudio you will see the help file appear in the Help window in the bottom right of the GUI. Here you can also search for the help files for other functions in the search bar. 2.4.10 Data structures Objects in R can exist as a number of different data structures. These include a matrix, an array, a vector, a data frame and a list. The main criteria for division of these structures is data type homogeneity. A vector, matrix and array must only contain data of the same type (e.g. numeric or text) A list or data frame can contain a mixture of data types (e.g. numeric and text). Further divisions are then made based on the number of dimesions (1D, 2D, 3D or more) each can have… For the purposes of this practical we will focus on data frames. These are the most flexible data format in R (although tibbles are now becoming popular as well — they are just more flexible versions of data frames, for example they can have a list as a column). Data frames can be conceptualised in a similar way to a spreadsheet with data held in rows and columns. They are the most commonly used object type in R and the most straightforward to create from the two vector objects we just created. df &lt;- data.frame(Data1, Data2) plot(df, col=&quot;green&quot;) If you have a very large data frame (thousands or millions of rows) it is useful to see only a selection of these. There are several ways of doing this: library(tidyverse) #show the first 10 and then last 10 rows of data in df... df %&gt;% head() df %&gt;% tail() You might have noticed the syntax (code) %&gt;%, this is called a pipe and is an operator is part from the magrittr package. magrittr is an entirely new way of thinking about R syntax that cleraly expresses a sequence of multiple operations. It is useful to think of the pipe operator as simply meaning “then”. Do this THEN do this THEN do that. You can also view elements of your data frame in RStudio by simply clicking on it in the top-right Environment window: 2.4.11 Elements of a data frame When programming you will frequently want to refer to different elements in a data frame or a vector/list. To select elements of a data frame, or subset it, you can refer specifically to ranges or elements of rows and columns. These are accessed using the single square bracket operator [], with the form: data.frame[row,column] Rows are always referenced first, before the comma, columns second, after the comma. Try the subsetting your df data frame with the following commands to see what is returned: df[1:10, 1] df[5:15,] df[c(2,3,6),2] df[,1] You will note that the column headings are the names of the original objects creating the data frame. We can change these using the rename() function from dplyr that is loaded as part of the tidyverse package, we will come to this next: library(dplyr) df &lt;- df %&gt;% dplyr::rename(column1 = Data1, column2=Data2) dplyr is a grammar of data manipulation, it has multiple verbs that allow you to change your data into a suitable format. These include select(), filter(), summarise(), which can also be applied to groups in datasets using group_by(). dplyr will be used throughout this course. In the majority of cases you provide some kind of data to dplyr followed by a %&gt;% then a verb (or other function), then another %&gt;% and more verbs of functions if needed. As in the code above you can also assign the output to an object with &lt;-. To select or refer to columns directly by name, we can either use dplyr again! df %&gt;% dplyr::select(column1) However, you should be aware of other methods for doing this, as not all spatial data is compatible with dplyr yet, such as raster data, which will be important for next week. So we can also use the $ operator, which takes the form data.frame$columnName, e.g. df$column1 or we can use the double square bracket operator [[]], and refer to our column by name using quotes e.g. df[[&quot;column1&quot;]] This again is useful if you have a lot of columns and you wish to efficiently extract one of them. 2.5 Reading data into R One of the most tedious things a spatial analyst / data scientist has to do is clean their data so it doesn’t cause problems for the software later. In the past, we would have needed to do this by hand — these days, we can use software to do much of this for us. I will now give you two options to arrive at a nice cleaned dataset. For this example we are going to use the London Datastore Catalogue. Go to the London Data store and get the Ward Profiles and Atlas and download the excel document for ward profiles. 2.5.1 Old skool cleaning Open the ward-profiles-excel-version.xls file in Excel, and save as LondonData.csv into your RProject folder, week 2. Open your new .csv file in Excel. There might be some non-numeric values inside numeric columns which will cause problems in your analysis. These need to be removed before proceeding any further. To remove these, you can use the replace function in Excel. In the home tab under ‘Editing’ open up the find and replace dialogue box and enter the following into the find box: #VALUE! n/a Leave the replace box empty each time and click Replace All to remove these from your file, before saving the file again. Once you have cleaned out all of the trixy characters from the file, to read it into R, we will use the read.csv() function: LondonDataOSK&lt;- read.csv(&quot;prac2_data/ward-profiles-excel-version.csv&quot;, header = TRUE, sep = &quot;,&quot;, encoding = &quot;latin1&quot;) Note, I’ve made an R project for all these practicals, which is why my file path starts with prac2_data/. If you save the .csv in the same folder as the .Rproj then you can just use: LondonDataOSK&lt;- read.csv(&quot;ward-profiles-excel-version.csv&quot;, sep=&quot;,&quot;) If you look at the read.csv() help file - ?read.csv - you will see that we can actually include many more parameters when reading in a .csv file. For example, we could read in the same file as follows: # by default in R, the file path should be defined with / #but on a windows file system it is defined with \\. #Using \\\\ instead allows R #to read the path correctly – alternatively, just use / LondonDataOSK&lt;- read.csv(&quot;prac2_data/ward-profiles-excel-version.csv&quot;, header = TRUE, sep = &quot;,&quot;, encoding = &quot;latin1&quot;) This would specify that the first row of the file contains header information; and the values in the file are separated with commas (not ; or : as can be the case sometimes). 2.5.2 Here However, this is also another more straightforward way to read in files that was devloped in 2017 to make it more intuitive to find and load files using the here package. You need to install and load it: install.packages(&quot;here&quot;) library(here) ## here() starts at C:/Users/Andy/OneDrive - University College London/Teaching/CASA0005/2020_2021/CASA0005repo Think of here() as a command that is just poitning to a file path, to find out where is pointing use… here::here() This is my working directory for this book project! Now i can use this to load my data that is in my practical 2 folder just like this…. LondonDataOSK&lt;- read.csv(here::here(&quot;prac2_data&quot;,&quot;ward-profiles-excel-version.csv&quot;), header = TRUE, sep = &quot;,&quot;, encoding = &quot;latin1&quot;) This just removes any need for ever using a / or \\\\ in your file path. As with everything in code, there is no right way, use what suits you. 2.5.3 New skool cleaning To clean our data as we read it in, we are going to use a package called readr which also comes bundled as part of the tidyverse package. The tidyverse is simply a collection of pacakges relevant for data science, containing almost everything you need to become a kick-ass data scientist. Now let’s use the readr package… that allows loads of data manipulation …for example… Here we will use it to just read in a .csv file (directly from the web this time — read.csv can do this too) and clean text characters out from the numeric columns before they cause problems: #wang the data in straight from the web using read_csv, #skipping over the &#39;n/a&#39; entries as you go... LondonData &lt;- read_csv(&quot;https://data.london.gov.uk/download/ward-profiles-and-atlas/772d2d64-e8c6-46cb-86f9-e52b4c7851bc/ward-profiles-excel-version.csv&quot;, locale = locale(encoding = &quot;latin1&quot;), na = &quot;n/a&quot;) Note the use of read_csv here as opposed to read.csv. They are very similar, but read_csv is just a bit better. Read this blog post for more information. Also, for those python fans out there —IT’S NOT THE SAME FUNCTION AS READ_CSV IN PYTHON What is locale = locale(encoding = \"latin1\")?…good question…it is basically the encoding of the data (how it is stored). There are a few different formats such as UTF-8 and latin1. In latin1 each character is 1 byte long, in UTF-8 a character can consist of more than 1 byte. To my knowledge the default in R is encoded as latin1, but readr (the package we are using to read in the .csv is UTF-8 so we have to specify it. 2.5.4 Examining your new data Your new data has been read in as a data frame / tibble (remember a tibble is just a data frame with a few extra bells and whistles). If you ever need to check what data type your new data set is, we can use the class() function: class(LondonData) ## [1] &quot;spec_tbl_df&quot; &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; # or, if you have your old skool data class(LondonDataOSK) We can also use the class() function (from base R) within another two functions summarise_all() (from dplyr) and pivot_longer() (from tidyr) to check that our data has been read in correctly and that, for example, numeric data haven’t been read in as text or other variables. Run the following line of code: Datatypelist &lt;- LondonData %&gt;% summarise_all(class) %&gt;% pivot_longer(everything(), names_to=&quot;All_variables&quot;, values_to=&quot;Variable_class&quot;) Datatypelist ## # A tibble: 67 × 2 ## All_variables Variable_class ## &lt;chr&gt; &lt;chr&gt; ## 1 Ward name character ## 2 Old code character ## 3 New code character ## 4 Population - 2015 numeric ## 5 Children aged 0-15 - 2015 numeric ## 6 Working-age (16-64) - 2015 numeric ## 7 Older people aged 65+ - 2015 numeric ## 8 % All Children aged 0-15 - 2015 numeric ## 9 % All Working-age (16-64) - 2015 numeric ## 10 % All Older people aged 65+ - 2015 numeric ## # … with 57 more rows We cover pivot_longer() later in this practical, but for now we’ve simply grouped all our variables into one LONG column adding another column that contains the class. You should see that all columns that should be numbers are read in as numeric. Try reading in LondonData again, but this time without excluding the ‘n/a’ values in the file, e.g. LondonData &lt;- read_csv(&quot;https://data.london.gov.uk/download/ward-profiles-and-atlas/772d2d64-e8c6-46cb-86f9-e52b4c7851bc/ward-profiles-excel-version.csv&quot;, locale = locale(encoding = &quot;latin1&quot;)) Now run the Datatypelist code again — you should see that some of the columns (those the n/a values in) have been read in as something other than numeric. This is why we need to exclude them. Isn’t readr great for helping us avoid reading in our numeric data as text! If you ever wish to quickly edit data, then use edit() LondonData &lt;- edit(LondonData) It is also possible to quickly and easily summarise the data or look at the column headers using summary(df) ## column1 column2 ## Min. : 1.00 Min. :101.0 ## 1st Qu.: 25.75 1st Qu.:125.8 ## Median : 50.50 Median :150.5 ## Mean : 50.50 Mean :150.5 ## 3rd Qu.: 75.25 3rd Qu.:175.2 ## Max. :100.00 Max. :200.0 LondonData%&gt;% colnames()%&gt;% # just look at the head, top5 head() ## [1] &quot;Ward name&quot; &quot;Old code&quot; ## [3] &quot;New code&quot; &quot;Population - 2015&quot; ## [5] &quot;Children aged 0-15 - 2015&quot; &quot;Working-age (16-64) - 2015&quot; 2.5.5 Data manipulation in R Now we have some data read into R, we need to select a small subset to work on. The first thing we will do is select just the London Boroughs to work with. If you recall, the Borough data is at the bottom of the file. 2.5.5.1 Selecting rows Your borough data will probably be found between rows 626 and 658. Therefore we will first create a subset by selecting these rows into a new data frame and then reducing that data frame to just four columns. There are a few ways of doing this: We could select just the rows we need by explicitly specifying the range of rows we need: LondonBoroughs&lt;-LondonData[626:658,] We can also do this with dplyr… with the slice() function, taking a “slice” out of the dataset… LondonBoroughs&lt;-LondonData%&gt;% slice(626:658) However, we can instead try a cool ‘data sciency’ way of pulling out the rows we want with the knowledge that the codes for London Boroughs start with E09 (the wards in the rest of the file start with E05). dplyr has a cool function called filter()that let’s you subset rows based on conditions… Here, we could filter based on a variable, for example extracting all the wards where female life expextancy is greather than 90. Femalelifeexp&lt;- LondonData %&gt;% filter(`Female life expectancy -2009-13`&gt;90) However, our New code column that holds Borough codes can’t be filtered like this as it’s in a character format…in cases like this we can use the function str_detect() from the stringr package in combination with filter() from dplyr. Both these packages are part of the tidyverse again! LondonBoroughs&lt;- LondonData %&gt;% filter(str_detect(`New code`, &quot;^E09&quot;)) Check it worked: LondonBoroughs$`Ward name` That’s also the same as: LondonBoroughs %&gt;% dplyr::select(`Ward name`) %&gt;% print() AWWMAHGAWD!!! Pretty cool hey? What that code is saying is stringr look for (detect!) the rows that have the ward code like E09, then filter these and store in the object LondonBoroughs The stringr package is really great and if you ever need to manipulate text type data then it’s the place to start. You will notice that you will have two rows at the top for the City of London. This is because it features twice in the data set. That’s fine, extract only unique rows with distinct(), again from dplyr: LondonBoroughs&lt;-LondonBoroughs %&gt;% distinct() 2.5.5.2 Selecting columns We can select columns if we know which index we want, starting from the first column that’s 1.. #select columns 1,19,20 and 21 LondonBoroughs_manualcols&lt;-LondonBoroughs[,c(1,19,20,21)] We can also replicate this with dplyr with select() #select columns 1,19,20 and 21 LondonBoroughs_dplyrcols&lt;-LondonBoroughs %&gt;% dplyr::select(c(1,19,20,21)) You will have noticed the use of square brackets above –– these are very useful in R. The c() function is also used here — this is the ‘combine’ function — another very useful function in R which allows arguments (in this case, column reference numbers) into a single value. However, we could also again use a more ‘data sciency way’…selecting the columns that contain certain words … LondonBoroughs_contains&lt;-LondonBoroughs %&gt;% dplyr::select(contains(&quot;expectancy&quot;), contains(&quot;obese - 2011/12 to 2013/14&quot;), contains(&quot;Ward name&quot;)) 2.5.5.3 Renaming columns You will notice that the column names are slightly misleading as we are now working with boroughs rather than wards. You probably will also be annoyed (like me!) that the column names are full of ... that just make eveything hard to read. So, let’s rename the wards column to boroughs (using rename() like we did earlier), then using the Janitor package tidy everything up… library(janitor) LondonBoroughs &lt;- LondonBoroughs %&gt;% dplyr::rename(Borough=`Ward name`)%&gt;% clean_names() By defualt Janitor removes all capitals and uses an underscore wherever there is a space, this would be the same as using setting the case argument to snake… If you wanted to now change it every word having a capital letter you would run…but don’t do this now. LondonBoroughs &lt;- LondonBoroughs %&gt;% #here the ., means all data clean_names(., case=&quot;big_camel&quot;) 2.5.5.4 More dplyr verbs What about determining both: the average of male and female life expectancy together a normalised value for each London borough based on the London average. Then selecting only the name of the Borough, mean life expectancy and normalised life expectancy, arranging the output based on the normalised life expectancy in descending order… To do this we will rely on the mutate() function that let’s us add new variables based on existing ones… Life_expectancy &lt;- LondonBoroughs %&gt;% #new column with average of male and female life expectancy mutate(averagelifeexpectancy= (female_life_expectancy_2009_13 + male_life_expectancy_2009_13)/2)%&gt;% #new column with normalised life expectancy mutate(normalisedlifeepectancy= averagelifeexpectancy / mean(averagelifeexpectancy))%&gt;% #select only columns we want dplyr::select(new_code, borough, averagelifeexpectancy, normalisedlifeepectancy)%&gt;% #arrange in descending order #ascending is the default and would be #arrange(normalisedlifeepectancy) arrange(desc(normalisedlifeepectancy)) We can also use dplyr to show us the top and bottom number of rows instead of using head or tail like we did earlier. #top of data slice_head(Life_expectancy, n=5) ## # A tibble: 5 × 4 ## new_code borough averagelifeexpectancy normalisedlifeepectancy ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 E09000001 City of London 86.4 1.05 ## 2 E09000020 Kensington and Chelsea 84.4 1.03 ## 3 E09000015 Harrow 84.2 1.02 ## 4 E09000027 Richmond upon Thames 83.9 1.02 ## 5 E09000033 Westminster 83.8 1.02 #bottom of data slice_tail(Life_expectancy,n=5) ## # A tibble: 5 × 4 ## new_code borough averagelifeexpectancy normalisedlifeepectancy ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 E09000011 Greenwich 80.8 0.983 ## 2 E09000012 Hackney 80.7 0.982 ## 3 E09000025 Newham 80.6 0.980 ## 4 E09000002 Barking and Dagenham 80.1 0.974 ## 5 E09000030 Tower Hamlets 80.0 0.974 2.5.5.5 Levelling up withdplyr So far, we’ve really just covered basic operations with dplyr that you might have previously done in Excel. However, dplyr has much more powerful functions that can make advanced data wrangling a breeze. Whilst we’ve looked at life expectancy in the London boroughs relative to each other, how does the life expectancy of the London Boroughs compare the the UK average of 81.16? To answer this question we can use the case_when(), whereby if the value is greater than 81.16 we can assign the Borough a string of “above UK average”, and if below a string of “below UK average”…. Life_expectancy2 &lt;- Life_expectancy %&gt;% mutate(UKcompare = case_when(averagelifeexpectancy&gt;81.16 ~ &quot;above UK average&quot;, TRUE ~ &quot;below UK average&quot;)) Life_expectancy2 ## # A tibble: 33 × 5 ## new_code borough averagelifeexpec… normalisedlifee… UKcompare ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 E09000001 City of London 86.4 1.05 above UK… ## 2 E09000020 Kensington and Chelsea 84.4 1.03 above UK… ## 3 E09000015 Harrow 84.2 1.02 above UK… ## 4 E09000027 Richmond upon Thames 83.9 1.02 above UK… ## 5 E09000033 Westminster 83.8 1.02 above UK… ## 6 E09000007 Camden 83.6 1.02 above UK… ## 7 E09000003 Barnet 83.4 1.02 above UK… ## 8 E09000006 Bromley 83.1 1.01 above UK… ## 9 E09000021 Kingston upon Thames 82.9 1.01 above UK… ## 10 E09000005 Brent 82.4 1.00 above UK… ## # … with 23 more rows Now whilst this is useful, it doesn’t tell is much more about the data itself, what if we wanted to know the range of life expectancies for London Boroughs that are above the national average…. Life_expectancy2_group &lt;- Life_expectancy2 %&gt;% mutate(UKdiff = averagelifeexpectancy-81.16) %&gt;% group_by(UKcompare)%&gt;% summarise(range=max(UKdiff)-min(UKdiff), count=n(), Average=mean(UKdiff)) Life_expectancy2_group ## # A tibble: 2 × 4 ## UKcompare range count Average ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 above UK average 5.25 25 1.52 ## 2 below UK average 0.900 8 -0.572 This is useful, but now what if we wanted to have more information based on the distribution of the Boroughs compared to the national average, as opposed to just over or under….there are a few ways to do this.. We are going to: Again work out difference between the life expectancy of the Boroughs compared to the national average Round the whole table based on if the column is numeric (this isn’t required and we’re not adding a new column). Here we are using across that applies some kind of transformation across the columns selected (or that are numeric in this case). Here we need to: Round the column UKdiff to 0 decimcal places (not adding a new column) Use case_when() to find Boroughs that have an average age of equal to or over 81 and create a new column that containts text based combining equal or above UK average by then the years created in UKdiff. We do this through the str_c() function from the stringr pacakge that let’s us join two or more vector elements into a single character vector. Here sep determines how these two vectors are separated. Then group by the UKcompare column Finally, count the number in each group. Life_expectancy3 &lt;- Life_expectancy %&gt;% mutate(UKdiff = averagelifeexpectancy-81.16)%&gt;% mutate(across(where(is.numeric), round, 3))%&gt;% mutate(across(UKdiff, round, 0))%&gt;% mutate(UKcompare = case_when(averagelifeexpectancy &gt;= 81 ~ str_c(&quot;equal or above UK average by&quot;, UKdiff, &quot;years&quot;, sep=&quot; &quot;), TRUE ~ str_c(&quot;below UK average by&quot;, UKdiff, &quot;years&quot;, sep=&quot; &quot;)))%&gt;% group_by(UKcompare)%&gt;% summarise(count=n()) Life_expectancy3 ## # A tibble: 7 × 2 ## UKcompare count ## &lt;chr&gt; &lt;int&gt; ## 1 below UK average by -1 years 3 ## 2 below UK average by 0 years 5 ## 3 equal or above UK average by 0 years 4 ## 4 equal or above UK average by 1 years 12 ## 5 equal or above UK average by 2 years 4 ## 6 equal or above UK average by 3 years 4 ## 7 equal or above UK average by 5 years 1 There is a lot of information here that we could use and make into a plot or map. For example, the Borough count of life expectancy difference could be visualised in a histogram (covered next week). Or, we could map the difference between the average life expectancy of each London Borough compared to the UK average..to do this would can just reuse some of the code from the example above…. Life_expectancy4 &lt;- Life_expectancy %&gt;% mutate(UKdiff = averagelifeexpectancy-81.16)%&gt;% mutate(across(is.numeric, round, 3))%&gt;% mutate(across(UKdiff, round, 0)) ## Warning: Predicate functions must be wrapped in `where()`. ## ## # Bad ## data %&gt;% select(is.numeric) ## ## # Good ## data %&gt;% select(where(is.numeric)) ## ## ℹ Please update your code. ## This message is displayed once per session. Before you move on consider what you have learnt about dplyr in relation to this concept map by Greg Wilson. The teaching team will also explain it… 2.5.6 Plotting For a simple and quick plot, we can use the plot() function… plot(LondonBoroughs$male_life_expectancy_2009_13, LondonBoroughs$percent_children_in_reception_year_who_are_obese_2011_12_to_2013_14) 2.5.7 Pimp my graph! Now, of course, because this is R, we can pimp this graph using something a bit more fancy than the base graphics functions. Here we will use plotly an open source interactive graphing library… install.packages(&quot;plotly&quot;) library(plotly) plot_ly(LondonBoroughs, #data for x axis x = ~male_life_expectancy_2009_13, #data for y axis y = ~percent_children_in_reception_year_who_are_obese_2011_12_to_2013_14, #attribute to display when hovering text = ~borough, type = &quot;scatter&quot;, mode = &quot;markers&quot;) 2.5.8 Spatial Data in R This next part of the practical applies the same principles introduced above to the much more complex problem of handling spatial data within R. In the remainder of this practical we will produce a map, the focus here is getting to grips with some of R’s visulisation tools and not sound analysis (I know one is useless without the other!). Good quality spatial analysis will come in the rest of the module. Whilst the instructions are step by step you are encouraged to start deviating from them (trying different colours for example) to get a better understanding of what we are doing. The first package we need to install for this part of the practical is maptools –– either find and install it using the RStudio GUI or do the following: install.packages(&quot;maptools&quot;) There are a few other packages we’ll need to get to grips with. Some, like ggplot2 (one of the most influential R packages ever) are part of the tidyverse package we came across earlier. Others we will need to install for the first time. install.packages(c(&quot;classInt&quot;, &quot;tmap&quot;)) # might also need these ones install.packages(c(&quot;RColorBrewer&quot;, &quot;sp&quot;, &quot;rgeos&quot;, &quot;tmaptools&quot;, &quot;sf&quot;, &quot;downloader&quot;, &quot;rgdal&quot;, &quot;geojsonio&quot;)) Now that the packages have been installed you will not have to repeat the above steps again (when you use your account in these cluster rooms). Open a new script and save it to your working directory as wk2_maps.r. As before, type each of the lines of code into this window and then select and use the ctrl return keys to run them. Be sure to save your script often. The first task is to load the packages we have just installed. Note, you might have some issues with the OpenStreetMap package if your installation of java on your computer doesn’t match your installation of R –– e.g. if you have installed the 64bit version of R, you also need the 64bit version of java (same with the 32bit versions) — you may also need to install the package Rcpp separately and try again. Install Java 64-bit from: https://java.com/en/download/manual.jsp #Load Packages (ignore any error messages about being built under a #different R version): library(maptools) library(RColorBrewer) library(classInt) library(sp) library(rgeos) library(tmap) library(tmaptools) library(sf) library(rgdal) library(geojsonio) 2.5.8.1 Background to spatial data in R R has a very well developed ecosystem of packages for working with Spatial Data. Early pioneers like Roger Bivand and Edzer Pebesma along with various colleagues were instrumental in writing packages to interface with some powerful open source libraries for working with spatial data, such as GDAL and GEOS. These were accessed via the rgdal and rgeos packages. The maptools package by Roger Bivand, amongst other things, allowed Shapefiles to be read into R. The sp package (along with spdep) by Edzer Pebesma was very important for defining a series of classes and methods for spatial data natively in R which then allowed others to write software to work with these formats. Other packages like raster advanced the analysis of gridded spatial data, while packages like classInt and RColorbrewer facilitated the binning of data and colouring of choropleth maps. Whilst these packages were extremely important for advancing spatial data analysis in R, they were not always the most straightforward to use — making a map in R could take quite a lot of effort and they were static and visually basic. However, more recently new packages have arrived to change this. Now leaflet enables R to interface with the leaflet javascript library for online, dynamic maps. ggplot2 which was developed by Hadley Wickham and colleagues radically changed the way that people thought about and created graphical objects in R, including maps, and introduced a graphical style which has been the envy of other software to the extent that there are now libraries in Python which copy the ggplot2 style! Building on all of these, the new tmap (Thematic Map) package has changed the game completely and now enables us to read, write and manipulate spatial data and produce visually impressive and interactive maps, very easily. In parallel, the sf (Simple Features) package is helping us re-think the way that spatial data can be stored and manipulated. It’s exciting times for geographic information / spatial data science! 2.5.8.2 Making some choropleth maps Choropleth maps are thematic maps which colour areas according to some phenomenon. In our case, we are going to fill some irregular polygons (the London Boroughs) with a colour that corresponds to a particular attribute. As with all plots in R, there are multiple ways we can do this. The basic plot() function requires no data preparation but additional effort in colour selection/ adding the map key etc. Quick plot (qplot()) and ggplot() (installed in the ggplot2 package, part of the tidyverse) require some additional steps to format the spatial data but select colours and add keys etc automatically. Qplot is basically a shortcut for a quick map / plot, but if you have a lot of data use ggplot(). However, here, we are going to make use of the new tmap package which makes making maps very easy indeed. More on tmap when we start mapping.. So one mega cool thing about R is you can read spatial data in straight from the internetz! Try this below for downloading a GeoJson file…it might take a few minutes… You can also either Download the geojson file Download the shapefilefrom the Office for National Statistics Open Geography Portal Move either to your project folder and read it in. The .shp is normally quicker to load. # this will take a few minutes EW &lt;- st_read(&quot;https://opendata.arcgis.com/datasets/8edafbe3276d4b56aec60991cbddda50_2.geojson&quot;) # this will take a few minutes # geojson in local folder #EW &lt;- st_read(here::here(&quot;prac2_data&quot;, # &quot;Local_Authority_Districts__December_2015__Boundaries.geojson&quot;)) # shapefile in local folder EW &lt;- st_read(here::here(&quot;prac2_data&quot;, &quot;Local_Authority_Districts_(December_2015)_Boundaries&quot;, &quot;Local_Authority_Districts_(December_2015)_Boundaries.shp&quot;)) ## Reading layer `Local_Authority_Districts_(December_2015)_Boundaries&#39; from data source `C:\\Users\\Andy\\OneDrive - University College London\\Teaching\\CASA0005\\2020_2021\\CASA0005repo\\prac2_data\\Local_Authority_Districts_(December_2015)_Boundaries\\Local_Authority_Districts_(December_2015)_Boundaries.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 380 features and 6 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 5513 ymin: 5333.602 xmax: 655989 ymax: 1220302 ## Projected CRS: OSGB 1936 / British National Grid Pull out London using the str_detect() function from the stringr package in combination with filter() from dplyr (again!). We will look for the bit of the district code that relates to London (E09) from the ‘lad15cd’ column data frame of our sf object. LondonMap&lt;- EW %&gt;% filter(str_detect(lad15cd, &quot;^E09&quot;)) #plot it using the qtm function qtm(LondonMap) 2.5.8.3 Attribute data OK, enough messing around, show us the maps!! Hold your horses, before be can create a map, we need to join some attribute data to some boundaries, let’s do it with merge(), but first clean up all of our names with Janitor again. LondonData &lt;- clean_names(LondonData) #EW is the data we read in straight from the web BoroughDataMap &lt;- EW %&gt;% clean_names()%&gt;% # the . here just means use the data already loaded filter(str_detect(lad15cd, &quot;^E09&quot;))%&gt;% merge(., LondonData, by.x=&quot;lad15cd&quot;, by.y=&quot;new_code&quot;, no.dups = TRUE)%&gt;% distinct(.,lad15cd, .keep_all = TRUE) We’ve added some more arguments to distinct() that mean we only have unique rows based on the code, but we keep all other variables .keep_all=TRUE. If you change to .keep_all=FALSE (which is the default) then all the other variables will be removed. An alternative to merge() would be to use a left_join() (like in SQL)…but it’s the same thing as merge(). Figure 2.1: Taken from Tidy explain by Garrick Aden‑Buie BoroughDataMap2 &lt;- EW %&gt;% clean_names() %&gt;% filter(str_detect(lad15cd, &quot;^E09&quot;))%&gt;% left_join(., LondonData, by = c(&quot;lad15cd&quot; = &quot;new_code&quot;)) If there are mutliple matches then all hits are returned… Figure 2.2: Taken from Tidy explain by Garrick Aden‑Buie However, i’ve left out filter() and distinct() which you would need to reduce the data to London and remove the duplicate City of London row afterwards…like in the step before with merge and as we did earlier on in the session. 2.5.9 Simple mapping tmap follows the idea of the grammar of graphics, similar to dplyr being the grammar of data manipulation. Essentially with the grammar of graphics the main data being mapped defines the location somewhere on Earth (loaded with tm_shape). Map aesthetics are then defined with a +, these usually include tm_fill() (fill of the polygons based on a variable) + tm_borders() (border of polygons). However, tm_polygon basically combines tm_fill() and tm_borders()… So to conclude, data first then + aesthetic syntax. We’re going to create a simple map with our spatial data, mapping and cartographic practice are covered in much more detail later in the course, but for now… We can create a choropleth map very quickly now using qtm() as we’ve done before library(tmap) library(tmaptools) tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting qtm(BoroughDataMap, fill = &quot;rate_of_job_seekers_allowance_jsa_claimants_2015&quot;) But that’s a bit basic! How about adding a basemap…to get a basemap we need to extract it from OpenStreetMap (OSM) using the read_osm() function from the tmaptools package. We talk about this in later weeks, but it’s a free editable map of the World (the Wikipedia of maps). We are going to need to create a box (termed bounding box) around London using the st_box() function from the sf package to extract the basemap image (which is a raster). tmaplondon &lt;- BoroughDataMap %&gt;% st_bbox(.) %&gt;% tmaptools::read_osm(., type = &quot;osm&quot;, zoom = NULL) Now we have the basemap, set tmap to plot, add the basemap, add the shape (our London layer), tell it which attribute to map (job seekers), the style to make the colour divisions (we explain this more in later weeks), the transparency (alpha), compass, scale and legend. But remember what i explained earlier… data first then + aesthetic syntax. We can also double up on this, so below we have data data from our bounding box + it’s raster aesthetic (tm_rgb) THEN ALSO the data from our London Borough layer and it’s aesthetics. As they are the same place they plot over each other! There is a bit of extra code below that we haven’t explained: style — how to divide the data into out colour breaks palette — the colour scheme to use tmap_mode(&quot;plot&quot;) tm_shape(tmaplondon)+ tm_rgb()+ tm_shape(BoroughDataMap) + tm_polygons(&quot;rate_of_job_seekers_allowance_jsa_claimants_2015&quot;, style=&quot;jenks&quot;, palette=&quot;YlOrBr&quot;, midpoint=NA, title=&quot;Rate per 1,000 people&quot;, alpha = 0.5) + tm_compass(position = c(&quot;left&quot;, &quot;bottom&quot;),type = &quot;arrow&quot;) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_layout(title = &quot;Job seekers&#39; Allowance Claimants&quot;, legend.position = c(&quot;right&quot;, &quot;bottom&quot;)) For more palette options, run palette_explorer() in the console. So that’s our first real map done! Awesome work. But remember our Life_expectancy4 data that we wrangled earlier. Can you think of a way to map this? So we need to Merge our Life_expectancy4map with the spatial data EW Map our merge with tmap Life_expectancy4map &lt;- EW %&gt;% merge(., Life_expectancy4, by.x=&quot;lad15cd&quot;, by.y=&quot;new_code&quot;, no.dups = TRUE)%&gt;% distinct(.,lad15cd, .keep_all = TRUE) Now let’s make the map! tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting tm_shape(tmaplondon)+ tm_rgb()+ tm_shape(Life_expectancy4map) + tm_polygons(&quot;UKdiff&quot;, style=&quot;pretty&quot;, palette=&quot;Blues&quot;, midpoint=NA, title=&quot;Number of years&quot;, alpha = 0.5) + tm_compass(position = c(&quot;left&quot;, &quot;bottom&quot;),type = &quot;arrow&quot;) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_layout(title = &quot;Difference in life expectancy&quot;, legend.position = c(&quot;right&quot;, &quot;bottom&quot;)) There are a few subtle differences in the code of this second map if you look closely: Style is now pretty not jenks. Style controls where the breaks are within the data that are then assigned to each colour for mapping. pretty rounds to whole numbers and evenly spaces them over the data. Palette in now Blues not YlOrBr. Palette controls the colour of the map, you can see more options through tmaptools::palette_explorer() 2.6 Tidying data As you progress through the programme you will probably notice that there is pretty much a tool or function for anything you could want. However, there has been little reserach into creating a standardised approach for wrangling data into a common format for analysis. This is where Hadley Wickham’s tidy data comes in. As per the R for Data Science book, tidy data is defined using the following three rules: Each variable must have its own column. Each observation must have its own row. Each value must have its own cell. But, as per the book, these three requirements are interrelated as you can’t only adhere to two without adhering to all three. So this gives us: Put each dataset in a tibble Put each variable in a column Figure 2.3: This figure is taken directly from Grolemund and Wickham (2017) Chapter 12.Following three rules makes a dataset tidy: variables are in columns, observations are in rows, and values are in cells. However, i also find this example from KSK analytics very helpful.. Figure 2.4: This figure is taken directly from Grolemund and Wickham (2017) Chapter 12.Following three rules makes a dataset tidy: variables are in columns, observations are in rows, and values are in cells. Earlier we read in the data using: flytipping &lt;- read_csv(&quot;https://data.london.gov.uk/download/fly-tipping-incidents/536278ff-a391-4f20-bc79-9e705c9b3ec0/fly-tipping-borough.csv&quot;) But we can also do something like this to force the columns to the appopraite data types (e.g. text, numberic) flytipping1 &lt;- read_csv(&quot;https://data.london.gov.uk/download/fly-tipping-incidents/536278ff-a391-4f20-bc79-9e705c9b3ec0/fly-tipping-borough.csv&quot;, col_types = cols( code = col_character(), area = col_character(), year = col_character(), total_incidents = col_number(), total_action_taken = col_number(), warning_letters = col_number(), fixed_penalty_notices = col_number(), statutory_notices = col_number(), formal_cautions = col_number(), injunctions = col_number(), prosecutions = col_number() )) # view the data view(flytipping1) So we have a tibble with columns of each varaible (e.g. warning letters, total actions taken) where every row is a London borough. We want make sure that each observation has its own row…it doesn’t as in the first row here we have observations for total incidents and total actions taken etc…to do this we will use pivot_longer(). Make sure you have the most recent version of tidyverse if you get an error. #convert the tibble into a tidy tibble flytipping_long &lt;- flytipping1 %&gt;% pivot_longer( cols = 4:11, names_to = &quot;tipping_type&quot;, values_to = &quot;count&quot; ) # view the data view(flytipping_long) Do you see the difference..the data has become longer!…this is classed as tidy data as every variable has a column, every observation has a row and every value has a cell. You could also use this to do the same thing… #an alternative which just pulls everything out into a single table flytipping2 &lt;- flytipping1[,1:4] But my advice would be to learn how to use the tidy tools! Now let’s make it a bit more suitable for mapping with pivot_wider() by making coloumns for each year of each variable….in the original .csv we had a year coloumn that had values of 2011-2012 to 2017-2018, so if we wanted to map a specifc year we’d have to filter out the year then map. Here we can just alter the data from pivot_longer() using the year and tipping type… Note, just because the data is considered tidy doesn’t mean it is directly appropriate for mapping. It might need to be tidy for analysis. #pivot the tidy tibble into one that is suitable for mapping flytipping_wide &lt;- flytipping_long %&gt;% pivot_wider( id_cols = 1:2, names_from = c(year,tipping_type), names_sep = &quot;_&quot;, values_from = count ) view(flytipping_wide) But what if you were just interested in a specific varaible and wanted the coloums to be each year of the data…again using pivot_wider() widefly &lt;- flytipping2 %&gt;% pivot_wider( names_from = year, values_from = total_incidents) You could now join this to the London borough .shp and produce a map… For another quick worked example have a look at the RLadies Sydney blog post on pivoting What’s the take home from this? Basically always try to put your data into a certain format before doing further analysis on it as it will be easier for you to determine the right tools to select. 2.7 Feedback Was anything that we explained unclear this week or was something really clear…let us know using the feedback form. It’s anonymous and we’ll use the responses to clear any issues up in the future / adapt the material. "],["rasters-descriptive-statistics-and-interpolation.html", "Chapter 3 Rasters, descriptive statistics and interpolation 3.1 Learning outcomes 3.2 Homework 3.3 Recommended listening  3.4 Introduction 3.5 Part 1 projections 3.6 Part 2 descriptive statistics 3.7 Part 3 interpolation 3.8 Auto data download 3.9 Advanced analysis 3.10 Feedback", " Chapter 3 Rasters, descriptive statistics and interpolation 3.1 Learning outcomes By the end of this practical you should be able to: Load, manipulate and interpret raster layers Observe and critique different descriptive data manipulation methods and outputs Execute interpolation of points to a raster layer Construct a methodology for comparing raster 3.2 Homework Outside of our schedulded sessions you should be doing around 12 hours of extra study per week. Feel free to follow your own GIS interests, but good places to start include the following: Assignment This week you need to Assess the validity of your topic in terms of data suitability, then sketch out an introduction and literature review including academic and policy documents (or any reputable source) — it’s the same as last week! Go through the assignment examples on Moodle and mark them with the mark scheme. Reading This week: Chapter 5 “Descriptive statistics” from Learning statistics with R: A tutorial for psychology students and other beginners by Navarro (2019) Appendix “Interpolation in R” from Intro to GIS and Spatial Analysis by Gimond (2019). Watching Hadley Wickham’s Keynote from the European Molecular Biology Laboratory (EMBL). This will be the same for a few weeks. Can you make an accurate map by SciShow Remember this is just a starting point, explore the reading list, practical and lecture for more ideas. 3.3 Recommended listening  Some of these practicals are long, take regular breaks and have a listen to some of our fav tunes each week. Andy. Oh Wonder, from London, an alt-pop duo according to Wikipedia. I just really like their music. Was due to see them in December in London, but it’s been postponed. Ultralife is their first album and the one i prefer, tracks 2-4 are where it’s at! Adam OK, this week it’s the 21st Century’s answer to Shakespear - the man who provided the soundtrack to countless post-club ‘back-to-your-house?’ early mornings in my youth. Yes, straight outta Brum (via Brixton), he’s only gone and penned a bunch of awesome new tracks almost 20 years after he first burst out of his bedroom studio. It’s only flippin’ Mike Skinner. You’re listening to the Streets! 3.4 Introduction This practical is composed of four parts. To start with we’re going to explore projection systems in more detail. In the second part we will load some global raster data into R. In the third part we extract data points (cities and towns) from this data and generate some descriptive statistics and histograms. In the final section we explore interpolation using point data. 3.5 Part 1 projections Projections systems are mathematical formulas that specify how our data is represented on a map. These can either be call geographic coordiate reference systems or projected coordinate reference systems. The former treats data as a sphere and the latter as a flat object. You might come across phrases such as a resolution of 5 minutes or a resolution of 30 metres, which can be used to establish what kind of projection system has been used. Let me explain… A minute type of resolution (e.g. 5 minute resolution) is a geographic reference system that treats the globe as if it was a sphere divided into 360 equal parts called degrees (which are angular units). Each degree has 60 minutes and each minute has 60 seconds. Arc-seconds of latitude (horizontal lines in the globe figure below) remain almost constant whilst arc-seconds of longitude (vertical lines in the globe figure below) decrease in a trigonometric cosine-based fashion as you move towards the Earth’s poles. This causes problems as you increase or decrease latitude the longitudial lengths alter…For example at the equator (0°, such as Quito) a degree is 111.3 km whereas at 60° (such as Saint Petersburg) a degree is 55.80 km …In contrast a projected coordinate system is defined on a flat, two-dimensional plane (through projecting a spheriod onto a 2D surface) giving it constant lengths, angles and areas… Figure 3.1: This figure is taken directly from Lovelace et al. (2019) section 2.2. Illustration of vector (point) data in which location of London (the red X) is represented with reference to an origin (the blue circle). The left plot represents a geographic CRS with an origin at 0° longitude and latitude. The right plot represents a projected CRS with an origin located in the sea west of the South West Peninsula. Knowing this, if we want to conduct analysis locally (e.g. at a national level) or use metric (e.g. kilometres) measurements we need to be able to change the projection of our data or “reproject” it. Most countries and even states have their own projected coordinate reference system such as British National Grid in the above example…Note how the origin (0,0) is has moved from the centre of the Earth to the bottom South West corner of the UK, which has now been ironed (or flattened) out. Projection rules Units are angular (e.g. degrees, latitude and longitude) or the data is global = Geographic coordinate reference system Units are linear (e.g. feet, metres) or data is at a local level (e.g. national, well the last one is not always true, but likely) = Projected coordinate reference system. You might hear some key words about projections that could terrify you! Let’s break them down: Ellipsoid (or spheriod) = size of shape of the Earth (3d) Datum = contains the point relationship (where the origin (0,0) of the map is) between a Cartesian coordinates (flat surface) and Earth’s surface. They can be local or geocentric. They set the origin, the scale and orientation of the Coordiante Reference System (CRS). Local datum = changes the Ellispoid to align with a certain location on the surface (e.g. BNG that uses the OSGB36 datum). A local datum is anything that isn’t the centre of the Earth. Geocentric datum = the centre is equal to the Earth’s centre of gravity (e.g. WGS84). Coordinate reference system (CRS) = Formula that defines how the 2D map (e.g. on your screen or a paper map) relates to the 3D Earth. Also sometimes called a spatial Reference System (SRS). It also stores the datum information. Take home message When you do analysis on multiple datasets make sure they are all use the same Coordiante Reference System. If it’s local (e.g. city of country analysis) then use a local projected CRS where possible. 3.5.1 Changing projections 3.5.1.1 Vector Until now, we’ve not really considered how our maps have been printed to the screen. Later on in the practical we will explore gridded temperature in Australia, as we will need an outline of Australia let’s use that as an example here: First, we need to source and load a vector of Australia. Go to: https://gadm.org/download_country_v3.html and download the GeoPackage Once we’ve downloaded the .gpkg let’s see what is inside it with st_layers()… library(sf) library(here) st_layers(here(&quot;prac3_data&quot;, &quot;gadm36_AUS.gpkg&quot;)) ## Driver: GPKG ## Available layers: ## layer_name geometry_type features fields ## 1 gadm36_AUS_0 Multi Polygon 1 2 ## 2 gadm36_AUS_1 Multi Polygon 11 10 ## 3 gadm36_AUS_2 Multi Polygon 569 13 Then read in the GeoPackage layer for the whole of Australia (layer ending in 0) library(sf) Ausoutline &lt;- st_read(here(&quot;prac3_data&quot;, &quot;gadm36_AUS.gpkg&quot;), layer=&#39;gadm36_AUS_0&#39;) ## Reading layer `gadm36_AUS_0&#39; from data source ## `C:\\Users\\Andy\\OneDrive - University College London\\Teaching\\CASA0005\\2020_2021\\CASA0005repo\\prac3_data\\gadm36_AUS.gpkg&#39; ## using driver `GPKG&#39; ## Simple feature collection with 1 feature and 2 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 112.9211 ymin: -55.11694 xmax: 159.1092 ymax: -9.142176 ## Geodetic CRS: WGS 84 You can check that the coordinate reference systems of sf or sp objects using the print function: print(Ausoutline) ## Simple feature collection with 1 feature and 2 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 112.9211 ymin: -55.11694 xmax: 159.1092 ymax: -9.142176 ## Geodetic CRS: WGS 84 ## GID_0 NAME_0 geom ## 1 AUS Australia MULTIPOLYGON (((158.6928 -5... The coordinates stored in the geometry column of your sf object contain the information to enable points, lines or polygons to be drawn on the screen. You can see that our Ausoutline is a multipolygon and every point within the polygon will have coordinates that are in a certain reference system, here WGS 84. 3.5.1.2 Proj4 WGS84 is one of the most common global projection systems, used in nearly all GPS devices. Whilst we were able to identify the CRS of our layer using print another alternative is to find the proj4 string. A proj4 string is meant to be a compact way of identifying a coordinate reference system. Let’s extract ours… library(sf) st_crs(Ausoutline)$proj4string ## [1] &quot;+proj=longlat +datum=WGS84 +no_defs&quot; “Well that’s clear as mud!” I hear you cry! Yes, not obvious is it!. The proj4-string basically tells the computer where on the earth to locate the coordinates that make up the geometries in your file and what distortions to apply (i.e. if to flatten it out completely etc.) It’s composed of a list of parameters seperated by a +. Here are projection proj uses latitude and longitude (so it’s a geographic not projected CRS). The datum is WGS84 that uses Earth’s centre mass as the coordinate origin (0,0). The Coordiante systems in R chapter by Gimond (2019) provides much more information on Proj4. However, i’d advise trying to use EPSG codes, which we come onto next. Sometimes you can download data from the web and it doesn’t have a CRS. If any boundary data you download does not have a coordinate reference system attached to it (NA is displayed in the coord. ref section), this is not a huge problem — it can be added afterwards by adding the proj4string to the file or just assigning an EPSG code. To find the proj4-strings for a whole range of different geographic projections, use the search facility at http://spatialreference.org/ or http://epsg.io/. 3.5.1.3 EPSG Now, if you can store a whole proj4-string in your mind, you must be some kind of savant (why are you doing this course? you could make your fortune as a card-counting poker player or something!). The rest of us need something a little bit more easy to remember and for coordinate reference systems, the saviour is the European Petroleum Survey Group (EPSG) — (naturally!). Now managed and maintained by the International Association of Oil and Gas producers — EPSG codes are short numbers represent all coordinate reference systems in the world and link directly to proj4 strings. We saw these last week in the [Making some maps] section. The EPSG code for the WGS84 World Geodetic System (usually the default CRS for most spatial data) is 4326 — http://epsg.io/4326 If our Australian outline didn’t have a spatial reference system, we could have just set it using st_set_crs() Ausoutline &lt;- Ausoutline %&gt;% st_set_crs(., 4326) Or, more concisely…but remember this is only useful if there is no CRS when you load the data. #or more concisely Ausoutline &lt;- st_read(here(&quot;prac3_data&quot;, &quot;gadm36_AUS.gpkg&quot;), layer=&#39;gadm36_AUS_0&#39;) %&gt;% st_set_crs(4326) ## Reading layer `gadm36_AUS_0&#39; from data source ## `C:\\Users\\Andy\\OneDrive - University College London\\Teaching\\CASA0005\\2020_2021\\CASA0005repo\\prac3_data\\gadm36_AUS.gpkg&#39; ## using driver `GPKG&#39; ## Simple feature collection with 1 feature and 2 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 112.9211 ymin: -55.11694 xmax: 159.1092 ymax: -9.142176 ## Geodetic CRS: WGS 84 Normally if a layer has a missing CRS, it’s WGS84. But check for any metadata that might list it. 3.5.1.4 Reprojecting your spatial data Reprojecting your data is something that you might have to (or want to) do, on occasion. Why? Well, one example might be if you want to measure the distance of a line object, or the distance between two polygons. This can be done far more easily in a projected coordinate system (where the units are measured in metres) than it can a geographic coordinate system such as WGS84 (where the units are degrees). However for generating maps in packages like leaflet, your maps will need to be in WGS84, rather than a projected (flat) reference system . So once your data has a coordinates system to work with, we can re-project or transform to anything we like. For SF objects, like our outline of Australia it’s carried out using st_transform. Here we are changing from WGS84 to GDA94, which is a local CRS for Australia and has the EPSG code 3112…. AusoutlinePROJECTED &lt;- Ausoutline %&gt;% st_transform(.,3112) print(AusoutlinePROJECTED) ## Simple feature collection with 1 feature and 2 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -2083066 ymin: -6460625 xmax: 2346599 ymax: -1115948 ## Projected CRS: GDA94 / Geoscience Australia Lambert ## GID_0 NAME_0 geom ## 1 AUS Australia MULTIPOLYGON (((1775780 -64... In the SF object, you can compare the values in the geometry column with those in the original file to look at how they have changed… You might also encounter an SP object from the sp package. In this case i’d advise just transforming the sp object to sf and changing the projection….this was covered last week..but it’s here too… #From sf to sp AusoutlineSP &lt;- Ausoutline %&gt;% as(., &quot;Spatial&quot;) #From sp to sf AusoutlineSF &lt;- AusoutlineSP %&gt;% st_as_sf() If you are still a bit confused by coordiate reference systems then stop and take some time to have a look at the resources listed here. It is very important to understand projection systems. This is the best resources i’ve come across explaining coordiate reference systems are: I hate coordinate systems ESRI’s coordinate systems and projections for beginners The story of Mercator! 3.5.2 WorldClim data So far we’ve only really considered vector data. Within the rest of this practical we will explore some raster data sources and processing techniques. If you recall rasters are grids of cell with individual values. There are many, many possible sources to obtain raster data from as it is the data type used for the majority (basically all) of remote sensing data. We are going to use WorldClim data — this is a dataset of free global climate layers (rasters) with a spatial resolution of between 1\\(km^2\\) and 240\\(km^2\\). Download the data from: https://www.worldclim.org/data/worldclim21.html Select any variable you want at the 5 minute second resolution. Unzip and move the data to your project folder. Now load the data. We could do this individually…. library(raster) jan&lt;-raster(here(&quot;prac3_data&quot;, &quot;wc2.0_5m_tavg_01.tif&quot;)) # have a look at the raster layer jan jan ## class : RasterLayer ## dimensions : 2160, 4320, 9331200 (nrow, ncol, ncell) ## resolution : 0.08333333, 0.08333333 (x, y) ## extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) ## crs : +proj=longlat +datum=WGS84 +no_defs ## source : wc2.0_5m_tavg_01.tif ## names : wc2.0_5m_tavg_01 ## values : -46.697, 34.291 (min, max) Then have a quick look at the data, we can see it’s again in the geographic projection of WGS84. plot(jan) To reproject a raster the whole grid must be recomputed (for a vector is was just the individual coordinates of the shapes), and the attributes then reestimated to the new grid. To do this we have to use projectRaster() from the Raster package. However, sadly it only accepts PROJ4 strings. Now we can actually see some data…here is a quick example of using the Mollweide projection saved to a new object. The Mollweide projection retains area proportions whilst compromising accuracy of angle and shape # set the proj 4 to a new object newproj&lt;-&quot;+proj=moll +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs&quot; # get the jan raster and give it the new proj4 pr1 &lt;- jan %&gt;% projectRaster(., crs=newproj) plot(pr1) It is possible to use only an EPSG code within a PROJ4 string, however, certain projections don’t have an EPSG code. For example, if we just wanted to go back from Mollweide to WGS84 we can simply set the crs to \"+init=epsg:4326\" pr1 &lt;- pr1 %&gt;% projectRaster(., crs=&quot;+init=epsg:4326&quot;) plot(pr1) 3.5.3 WorldClim data loading efficiently Ok, projections over. Let’s move forward with the practical… A better and more efficient way is to firstly list all the files stored within our directory with dir_info() from the fs pacakge, then use dplyr in conjunction with str_detect() from stringr to search for filenames containing tif. Finally just select the paths. But let’s firstly explore what dir_info() does… # look in our folder, find the files that end with .tif and library(fs) dir_info(&quot;prac3_data/&quot;) ## # A tibble: 16 × 18 ## path type size permissions modification_time user group ## &lt;fs::path&gt; &lt;fct&gt; &lt;fs::b&gt; &lt;fs::perms&gt; &lt;dttm&gt; &lt;chr&gt; &lt;chr&gt; ## 1 …ta/gadm36_AUS.gpkg file 83.57M rw- 2020-04-08 12:04:37 &lt;NA&gt; &lt;NA&gt; ## 2 …ta/gadm36_AUS_gpkg dire… 0 rw- 2022-06-14 23:43:12 &lt;NA&gt; &lt;NA&gt; ## 3 …3_data/license.txt file 300 rw- 2020-04-08 12:04:37 &lt;NA&gt; &lt;NA&gt; ## 4 …c3_data/readme.txt file 256 rw- 2020-04-08 12:04:37 &lt;NA&gt; &lt;NA&gt; ## 5 …2.0_5m_tavg_01.tif file 8.78M rw- 2020-04-08 12:04:38 &lt;NA&gt; &lt;NA&gt; ## 6 …2.0_5m_tavg_02.tif file 8.92M rw- 2020-04-08 12:04:38 &lt;NA&gt; &lt;NA&gt; ## 7 …2.0_5m_tavg_03.tif file 9.03M rw- 2020-04-08 12:04:38 &lt;NA&gt; &lt;NA&gt; ## 8 …2.0_5m_tavg_04.tif file 9.09M rw- 2020-04-08 12:04:38 &lt;NA&gt; &lt;NA&gt; ## 9 …2.0_5m_tavg_05.tif file 9.12M rw- 2020-04-08 12:04:38 &lt;NA&gt; &lt;NA&gt; ## 10 …2.0_5m_tavg_06.tif file 9.04M rw- 2020-04-08 12:04:38 &lt;NA&gt; &lt;NA&gt; ## 11 …2.0_5m_tavg_07.tif file 8.98M rw- 2020-04-08 12:04:38 &lt;NA&gt; &lt;NA&gt; ## 12 …2.0_5m_tavg_08.tif file 8.95M rw- 2020-04-08 12:04:38 &lt;NA&gt; &lt;NA&gt; ## 13 …2.0_5m_tavg_09.tif file 9.02M rw- 2020-04-08 12:04:38 &lt;NA&gt; &lt;NA&gt; ## 14 …2.0_5m_tavg_10.tif file 8.99M rw- 2020-04-08 12:04:38 &lt;NA&gt; &lt;NA&gt; ## 15 …2.0_5m_tavg_11.tif file 8.86M rw- 2020-04-08 12:04:38 &lt;NA&gt; &lt;NA&gt; ## 16 …2.0_5m_tavg_12.tif file 8.77M rw- 2020-04-08 12:04:38 &lt;NA&gt; &lt;NA&gt; ## # … with 11 more variables: device_id &lt;dbl&gt;, hard_links &lt;dbl&gt;, ## # special_device_id &lt;dbl&gt;, inode &lt;dbl&gt;, block_size &lt;dbl&gt;, blocks &lt;dbl&gt;, ## # flags &lt;int&gt;, generation &lt;dbl&gt;, access_time &lt;dttm&gt;, change_time &lt;dttm&gt;, ## # birth_time &lt;dttm&gt; Essentailly it just gets the details you would normally see in the file explorer..however, we can use this data with dplyr to select the data we actually want. Now be careful! the function select() exists both within the dplyr and raster package so to make sure you use the right one dplyr::select forces select from dplyr. library(tidyverse) listfiles&lt;-dir_info(&quot;prac3_data/&quot;) %&gt;% filter(str_detect(path, &quot;.tif&quot;)) %&gt;% dplyr::select(path)%&gt;% pull() #have a look at the file names listfiles ## prac3_data/wc2.0_5m_tavg_01.tif prac3_data/wc2.0_5m_tavg_02.tif ## prac3_data/wc2.0_5m_tavg_03.tif prac3_data/wc2.0_5m_tavg_04.tif ## prac3_data/wc2.0_5m_tavg_05.tif prac3_data/wc2.0_5m_tavg_06.tif ## prac3_data/wc2.0_5m_tavg_07.tif prac3_data/wc2.0_5m_tavg_08.tif ## prac3_data/wc2.0_5m_tavg_09.tif prac3_data/wc2.0_5m_tavg_10.tif ## prac3_data/wc2.0_5m_tavg_11.tif prac3_data/wc2.0_5m_tavg_12.tif Here, we’re also using pull() from dplyr which is the same as the $ often used to extract columns as in the next stage the input must be filenames as characters (nothing else like a column name). Then load all of the data straight into a raster stack. A raster stack is a collection of raster layers with the same spatial extent and resolution. worldclimtemp &lt;- listfiles %&gt;% stack() #have a look at the raster stack worldclimtemp ## class : RasterStack ## dimensions : 2160, 4320, 9331200, 12 (nrow, ncol, ncell, nlayers) ## resolution : 0.08333333, 0.08333333 (x, y) ## extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) ## crs : +proj=longlat +datum=WGS84 +no_defs ## names : wc2.0_5m_tavg_01, wc2.0_5m_tavg_02, wc2.0_5m_tavg_03, wc2.0_5m_tavg_04, wc2.0_5m_tavg_05, wc2.0_5m_tavg_06, wc2.0_5m_tavg_07, wc2.0_5m_tavg_08, wc2.0_5m_tavg_09, wc2.0_5m_tavg_10, wc2.0_5m_tavg_11, wc2.0_5m_tavg_12 ## min values : -46.697, -44.559, -57.107, -62.996, -63.541, -63.096, -66.785, -64.600, -62.600, -54.400, -42.000, -45.340 ## max values : 34.291, 33.174, 33.904, 34.629, 36.312, 38.400, 43.036, 41.073, 36.389, 33.869, 33.518, 33.667 In the raster stack you’ll notice that under dimensions there are 12 layers (nlayers). The stack has loaded the 12 months of average temperature data for us in order. To access single layers within the stack: # access the january layer worldclimtemp[[1]] ## class : RasterLayer ## dimensions : 2160, 4320, 9331200 (nrow, ncol, ncell) ## resolution : 0.08333333, 0.08333333 (x, y) ## extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) ## crs : +proj=longlat +datum=WGS84 +no_defs ## source : wc2.0_5m_tavg_01.tif ## names : wc2.0_5m_tavg_01 ## values : -46.697, 34.291 (min, max) We can also rename our layers within the stack: month &lt;- c(&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;) names(worldclimtemp) &lt;- month Last week we used rename() from the dplyr package, however, this isn’t yet available for raster data ☹️ Now to get data for just January use our new layer name worldclimtemp$Jan ## class : RasterLayer ## dimensions : 2160, 4320, 9331200 (nrow, ncol, ncell) ## resolution : 0.08333333, 0.08333333 (x, y) ## extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) ## crs : +proj=longlat +datum=WGS84 +no_defs ## source : wc2.0_5m_tavg_01.tif ## names : Jan ## values : -46.697, 34.291 (min, max) 3.5.4 Location data from a raster Using a raster stack we can extract data with a single command!! For example let’s make a dataframe of some sample sites — Australian cities/towns. site &lt;- c(&quot;Brisbane&quot;, &quot;Melbourne&quot;, &quot;Perth&quot;, &quot;Sydney&quot;, &quot;Broome&quot;, &quot;Darwin&quot;, &quot;Orange&quot;, &quot;Bunbury&quot;, &quot;Cairns&quot;, &quot;Adelaide&quot;, &quot;Gold Coast&quot;, &quot;Canberra&quot;, &quot;Newcastle&quot;, &quot;Wollongong&quot;, &quot;Logan City&quot; ) lon &lt;- c(153.03, 144.96, 115.86, 151.21, 122.23, 130.84, 149.10, 115.64, 145.77, 138.6, 153.43, 149.13, 151.78, 150.89, 153.12) lat &lt;- c(-27.47, -37.91, -31.95, -33.87, 17.96, -12.46, -33.28, -33.33, -16.92, -34.93, -28, -35.28, -32.93, -34.42, -27.64) #Put all of this inforamtion into one list samples &lt;- data.frame(site, lon, lat, row.names=&quot;site&quot;) # Extract the data from the Rasterstack for all points AUcitytemp&lt;- raster::extract(worldclimtemp, samples) Add the city names to the rows of AUcitytemp Aucitytemp2 &lt;- AUcitytemp %&gt;% as_tibble()%&gt;% add_column(Site = site, .before = &quot;Jan&quot;) 3.6 Part 2 descriptive statistics Descriptive (or summary) statistics provide a summary of our data, often forming the base of quantitiatve analysis leading to inferential statistics which we use to make infereces about our data (e.g. judegements of the probability that the observed difference between two datasets is not by chance) 3.6.1 Data preparation Let’s take Perth as an example. We can subset our data either using the row name: Perthtemp &lt;- Aucitytemp2 %&gt;% filter(site==&quot;Perth&quot;) Or the row location: Perthtemp &lt;- Aucitytemp2[3,] 3.6.2 Histogram A histogram lets us see the frequency of distribution of our data. This will vary based on the data that you have downloaded. Make a histogram of Perth’s temperature. The tibble stored the data as double and the base hist() function needs it as numeric.. hist(as.numeric(Perthtemp)) ## Warning in hist(as.numeric(Perthtemp)): NAs introduced by coercion Remember what we’re looking at here. The x axis is the temperature and the y is the frequency of occurrence. That’s a pretty simple histogram, let’s improve the aesthetics a bit. #define where you want the breaks in the historgram userbreak&lt;-c(8,10,12,14,16,18,20,22,24,26) hist(as.numeric(Perthtemp), breaks=userbreak, col=&quot;red&quot;, main=&quot;Histogram of Perth Temperature&quot;, xlab=&quot;Temperature&quot;, ylab=&quot;Frequency&quot;) ## Warning in hist(as.numeric(Perthtemp), breaks = userbreak, col = &quot;red&quot;, : NAs ## introduced by coercion Check out the histogram information R generated histinfo &lt;- Perthtemp %&gt;% as.numeric()%&gt;% hist(.) histinfo ## $breaks ## [1] 12 14 16 18 20 22 24 26 ## ## $counts ## [1] 1 3 2 2 1 1 2 ## ## $density ## [1] 0.04166667 0.12500000 0.08333333 0.08333333 0.04166667 0.04166667 0.08333333 ## ## $mids ## [1] 13 15 17 19 21 23 25 ## ## $xname ## [1] &quot;.&quot; ## ## $equidist ## [1] TRUE ## ## attr(,&quot;class&quot;) ## [1] &quot;histogram&quot; Here we have: breaks — the cut off points for the bins (or bars), we just specified these counts — the number of cells in each bin midpoints — the middle value for each bin density — the density of data per bin 3.6.3 Using more data This was still a rather basic histogram, what if we wanted to see the distribution of temperatures for the whole of Australia in Jan (from averaged WorldClim data) as opposed to just our point for Perth. Here, we will use the outline of Australia we loaded earlier.. Check the layer by plotting the geometry…we could do this through… plot(Ausoutline$geom) But as the .shp is quite complex (i.e. lots of points) we can simplify it first with the rmapshaper package — install that now..if it doesn’t load (or crashes your PC) this isn’t an issue. It’s just good practice that when you load data into R you check to see what it looks like… #load the rmapshaper package library(rmapshaper) #simplify the shapefile #keep specifies the % of points #to keep AusoutSIMPLE&lt;-Ausoutline %&gt;% ms_simplify(.,keep=0.05) plot(AusoutSIMPLE$geom) This should load quicker, but for ‘publication’ or ‘best’ analysis (i.e. not just demonstrating or testing) i’d recommend using the real file to ensure you don’t simply a potentially important variable. Check out the rmapshaper vignette for more information Next, set our map extent (where we want to clip the data to) to the outline of Australia then crop our WorldClim dataset to it. HOWEVER, we need to make sure that both of our layers are in the same coordinate reference system when we combine them…so.. print(Ausoutline) ## Simple feature collection with 1 feature and 2 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 112.9211 ymin: -55.11694 xmax: 159.1092 ymax: -9.142176 ## Geodetic CRS: WGS 84 ## GID_0 NAME_0 geom ## 1 AUS Australia MULTIPOLYGON (((158.6928 -5... #this works nicely for rasters crs(worldclimtemp) ## Coordinate Reference System: ## Deprecated Proj.4 representation: +proj=longlat +datum=WGS84 +no_defs ## WKT2 2019 representation: ## GEOGCRS[&quot;WGS 84 (with axis order normalized for visualization)&quot;, ## DATUM[&quot;World Geodetic System 1984&quot;, ## ELLIPSOID[&quot;WGS 84&quot;,6378137,298.257223563, ## LENGTHUNIT[&quot;metre&quot;,1]]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## CS[ellipsoidal,2], ## AXIS[&quot;geodetic longitude (Lon)&quot;,east, ## ORDER[1], ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433, ## ID[&quot;EPSG&quot;,9122]]], ## AXIS[&quot;geodetic latitude (Lat)&quot;,north, ## ORDER[2], ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433, ## ID[&quot;EPSG&quot;,9122]]]] Perfect! Now let’s contiune… Austemp &lt;- Ausoutline %&gt;% # now crop our temp data to the extent crop(worldclimtemp,.) # plot the output plot(Austemp) You’ll notice that whilst we have the whole of Australia the raster hasn’t been perfectly clipped to the exact outline….the extent just specifies an extent box that will cover the whole of the shape. If want to just get raster data within the outline of the shape: exactAus &lt;- Austemp %&gt;% mask(.,Ausoutline, na.rm=TRUE) You could also run this using the original worldclimtemp raster, however, it may take some time. I’d recommend cropping to the extent first. Both our Austemp and exactAus are raster bricks. A brick is similar to a stack except it is now stored as one file instead of a collection. Let’s re-compute our histogram for Australia in March. We could just use hist like we have done before. We can either subset using the location (we know March is thrid in the RasterBrick). #subset using the known location of the raster hist(exactAus[[3]], col=&quot;red&quot;, main =&quot;March temperature&quot;) We can also subset based on the name of the Brick, sadly we can’t apply filter() from dplyr (like we did earlier when filtering Perth) yet to rasters… #OR #subset with the word Mar hist(raster::subset(exactAus, &quot;Mar&quot;), col=&quot;red&quot;, main =&quot;March temperature&quot;) However we have a bit more control with ggplot()… 3.6.4 Histogram with ggplot We need to make our raster into a data.frame to be compatible with ggplot2, using a dataframe or tibble exactAusdf &lt;- exactAus %&gt;% as.data.frame() library(ggplot2) # set up the basic histogram gghist &lt;- ggplot(exactAusdf, aes(x=Mar)) + geom_histogram(color=&quot;black&quot;, fill=&quot;white&quot;)+ labs(title=&quot;Ggplot2 histogram of Australian March temperatures&quot;, x=&quot;Temperature&quot;, y=&quot;Frequency&quot;) # add a vertical line to the hisogram showing mean tempearture gghist + geom_vline(aes(xintercept=mean(Mar, na.rm=TRUE)), color=&quot;blue&quot;, linetype=&quot;dashed&quot;, size=1)+ theme(plot.title = element_text(hjust = 0.5)) How about plotting multiple months of temperature data on the same histogram As we did in practical 2, we need to put our variaible (months) into a one coloumn using pivot_longer(). Here, we are saying select columns 1-12 (all the months) and place them in a new column called Month and their values in another called Temp squishdata&lt;-exactAusdf%&gt;% pivot_longer( cols = 1:12, names_to = &quot;Month&quot;, values_to = &quot;Temp&quot; ) Then subset the data, selecting two months using filter() from dplyr twomonths &lt;- squishdata %&gt;% # | = OR filter(., Month==&quot;Jan&quot; | Month==&quot;Jun&quot;) Get the mean for each month we selected, remember group_by() and summarise() from last week? meantwomonths &lt;- twomonths %&gt;% group_by(Month) %&gt;% summarise(mean=mean(Temp, na.rm=TRUE)) meantwomonths ## # A tibble: 2 × 2 ## Month mean ## &lt;chr&gt; &lt;dbl&gt; ## 1 Jan 28.1 ## 2 Jun 15.0 Select the colour and fill based on the variable (which is our month). The intercept is the mean we just calculated, with the lines also based on the coloumn variable. ggplot(twomonths, aes(x=Temp, color=Month, fill=Month)) + geom_histogram(position=&quot;identity&quot;, alpha=0.5)+ geom_vline(data=meantwomonths, aes(xintercept=mean, color=Month), linetype=&quot;dashed&quot;)+ labs(title=&quot;Ggplot2 histogram of Australian Jan and Jun temperatures&quot;, x=&quot;Temperature&quot;, y=&quot;Frequency&quot;)+ theme_classic()+ theme(plot.title = element_text(hjust = 0.5)) Note how i adjusted the title after i selected the theme, if i had done this before the theme defaults would have overwritten my command. Have you been getting an annoying error message about bin size and non-finate values? Me too!…Bin size defaults to 30 in ggplot2 and the non-finate values is referring to lots of NAs (no data) that we have in our dataset. In the code below i’ve: dropped all the NAs with drop_na() made sure that the Month column has the levels specified, which will map in descending order (e.g. Jan, Feb, March..) selected a bin width of 5 and produced a faceted plot… data_complete_cases &lt;- squishdata %&gt;% drop_na()%&gt;% mutate(Month = factor(Month, levels = c(&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;, &quot;Apr&quot;,&quot;May&quot;,&quot;Jun&quot;, &quot;Jul&quot;,&quot;Aug&quot;,&quot;Sep&quot;, &quot;Oct&quot;,&quot;Nov&quot;,&quot;Dec&quot;))) # Plot faceted histogram ggplot(data_complete_cases, aes(x=Temp, na.rm=TRUE))+ geom_histogram(color=&quot;black&quot;, binwidth = 5)+ labs(title=&quot;Ggplot2 faceted histogram of Australian temperatures&quot;, x=&quot;Temperature&quot;, y=&quot;Frequency&quot;)+ facet_grid(Month ~ .)+ theme(plot.title = element_text(hjust = 0.5)) Does this seem right to you? Well…yes. It shows that the distribution of temperature is higher (or warmer) in the Australian summer (Dec-Feb) than the rest of the year, which makes perfect sense. How about an interactive histogram using plotly… See if you can understand what is going on in the code below. Run each line seperately. library(plotly) # split the data for plotly based on month jan &lt;- squishdata %&gt;% drop_na() %&gt;% filter(., Month==&quot;Jan&quot;) jun &lt;- squishdata %&gt;% drop_na() %&gt;% filter(., Month==&quot;Jun&quot;) # give axis titles x &lt;- list (title = &quot;Temperature&quot;) y &lt;- list (title = &quot;Frequency&quot;) # set the bin width xbinsno&lt;-list(start=0, end=40, size = 2.5) # plot the histogram calling all the variables we just set ihist&lt;-plot_ly(alpha = 0.6) %&gt;% add_histogram(x = jan$Temp, xbins=xbinsno, name=&quot;January&quot;) %&gt;% add_histogram(x = jun$Temp, xbins=xbinsno, name=&quot;June&quot;) %&gt;% layout(barmode = &quot;overlay&quot;, xaxis=x, yaxis=y) ihist This format of code where you set lots of varaibles then call them within a plot, package or fuction is sometihng you should become more familiar with as it’s considerd good practice. If you were to go on and produce multiple plots using the same legends / aesthetics you only ahve to set them once. Ok so enough with the histograms…the point is to think about how to best display your data both effectively and efficiently. Let’s change the pace a bit and do a quickfire of other descrptive statistics you might want to use… # mean per month meanofall &lt;- squishdata %&gt;% group_by(Month) %&gt;% summarise(mean = mean(Temp, na.rm=TRUE)) # print the top 1 head(meanofall, n=1) ## # A tibble: 1 × 2 ## Month mean ## &lt;chr&gt; &lt;dbl&gt; ## 1 Apr 22.2 # standard deviation per month sdofall &lt;- squishdata %&gt;% group_by(Month) %&gt;% summarize(sd = sd(Temp, na.rm=TRUE)) # maximum per month maxofall &lt;- squishdata %&gt;% group_by(Month) %&gt;% summarize(max = max(Temp, na.rm=TRUE)) # minimum per month minofall &lt;- squishdata %&gt;% group_by(Month) %&gt;% summarize(min = min(Temp, na.rm=TRUE)) # Interquartlie range per month IQRofall &lt;- squishdata %&gt;% group_by(Month) %&gt;% summarize(IQR = IQR(Temp, na.rm=TRUE)) # perhaps you want to store multiple outputs in one list.. lotsofstats &lt;- squishdata %&gt;% group_by(Month) %&gt;% summarize(IQR = IQR(Temp, na.rm=TRUE), max=max(Temp, na.rm=T)) # or you want to know the mean (or some other stat) #for the whole year as opposed to each month... meanwholeyear=squishdata %&gt;% summarize(meanyear = mean(Temp, na.rm=TRUE)) 3.7 Part 3 interpolation What if you had a selection of points over a spatial area but wanted to generate a complete raster. For this example, we will take our sample points (Australian cities) and estimate data between them using interpolation. If you look at our samples and AUcitytemp data the lat and lon is only in the former. We need to have this with our temperature data so let’s combine it using cbind samplestemp&lt;-AUcitytemp%&gt;% cbind(.,samples) Now we need to tell R that our points are spatial points using st_as_sf() from the sf package # convert samples temp to a data frame samplestemp&lt;-samplestemp%&gt;% st_as_sf(.,coords = c(&quot;lon&quot;, &quot;lat&quot;), crs =4326, agr = &quot;constant&quot;) You’ll notice that here i’ve just nicked the CRS from our worldclimtemp. In general it’s good practice to avoid using static or hard coding references. Right…plot the Australian geometry outline then add our spatial data points ontop… plot(Ausoutline$geom) plot(st_geometry(samplestemp), add=TRUE) Let’s interpolate using Inverse Distance Weighting, or IDW as it’s more commonly known. IDW is a deterministic method for multivaraite interpolation that estaimtes values for a surface using a weighted average of the provided data. The values closer to the point being predicted have more weight than those further away. The rate at which distance from the provided point imapcts the predcted point is controlled by the power of p. If p=0 then there is no decrease with distance. For more infomation see: https://pro.arcgis.com/en/pro-app/help/analysis/geostatistical-analyst/how-inverse-distance-weighted-interpolation-works.htm To get a meaningful result we could run some more calucaltions on let’s project our data to GDA94 (EPSG:3112) samplestemp &lt;- samplestemp %&gt;% st_transform(., 3112) Ausoutline &lt;- Ausoutline %&gt;% st_transform(., 3112) Here, we need to convert our SF objects to SP, the main reason for doing this is that i will make a grid to store my interpolation and having a remote sensing background i wanted to specify the pixel size. The equivalent function if SF won’t let you specify pixel size or there is no easy and straightforward way to do it (at least to my knowledge). library(sp) samplestempSP &lt;- samplestemp %&gt;% as(., &#39;Spatial&#39;) AusoutlineSP &lt;- Ausoutline %&gt;% as(., &#39;Spatial&#39;) Next, create an empty grid where cellsize is the spatial resolution, cellsize will overwrite the number of pixels we specified (n). Here as we’ve used a projected CRS i’ve put a high cellsize (in metres) so 200km by 200km cells. You can use a smaller number if you wish but it will take much longer to process. emptygrd &lt;- as.data.frame(spsample(AusoutlineSP, n=1000, type=&quot;regular&quot;, cellsize=200000)) names(emptygrd) &lt;- c(&quot;X&quot;, &quot;Y&quot;) coordinates(emptygrd) &lt;- c(&quot;X&quot;, &quot;Y&quot;) gridded(emptygrd) &lt;- TRUE # Create SpatialPixel object fullgrid(emptygrd) &lt;- TRUE # Create SpatialGrid object # Add the projection to the grid proj4string(samplestempSP) &lt;- proj4string(samplestempSP) #temp fix see: https://mgimond.github.io/Spatial/interpolation-in-r.html proj4string(emptygrd) &lt;- proj4string(samplestempSP) library(gstat) # Interpolate the grid cells using a power value of 2 interpolate &lt;- gstat::idw(Jan ~ 1, samplestempSP, newdata=emptygrd, idp=2.0) ## [inverse distance weighted interpolation] # Convert output to raster object ras &lt;- raster(interpolate) # Clip the raster to Australia outline rasmask &lt;- mask(ras, Ausoutline) # Plot the raster plot(rasmask) library(gstat) detach(&quot;package:gstat&quot;, unload=TRUE) IDW is just one method for interpolating data, there are many more, if you are interested check out: https://mgimond.github.io/Spatial/interpolation-in-r.html 3.8 Auto data download In this practical I’ve shown you how to source the data online, download it and load it into R. However for both WorldClim and GADM we can do this straight from R using the getData function….i’m sorry for making you do it the long way, but it’s good to do things manually to see how they work. WARNING, this may take some time. I’ve changed the resolution to 10 degrees, but I’d advise not running this in the practical session. #WorldClim data has a scale factor of 10 when using getData! tmean_auto &lt;- getData(&quot;worldclim&quot;, res=10, var=&quot;tmean&quot;) tmean_auto &lt;- tmean_auto/10 Now for GADM Aus_auto &lt;- getData(&#39;GADM&#39;, country=&quot;AUS&quot;, level=0) Much more convenient right? 3.9 Advanced analysis Are you already comptent with raster analysis and R, then have a go at completing this task in the practical session. Within the practical we’ve loaded one and created one raster layer. Undertake some comparative analysis to detemrine spatial (and temporal if appropraite) differences between the rasters here and any others you may wish to create (e.g. from other interpolation methods). Try to identify where the varaitions are and explain why they are occuring. You could assume that one raster is the ‘gold standard’ meaning it’s beleived to be fully correct and compare others to it. … Or you could go further than this and obtain weather station temperature data (or any other variable) for multiple sites, interpolate based on 50% of the sites and use the remaining sites to assess the accuracy of your selected method / the WorldClim data. Free weather station data can be found here: https://rp5.ru/Weather_in_the_world Have a go and discuss with your fellow students / members of the teaching team during the practical sessions or on slack. 3.10 Feedback Was anything that we explained unclear this week or was something really clear…let us know using the feedback form. It’s anonymous and we’ll use the responses to clear any issues up in the future / adapt the material. "],["git-github-and-rmarkdown.html", "Chapter 4 Git, GitHub and RMarkdown 4.1 Learning outcomes 4.2 Homework 4.3 Recommended listening  4.4 Introduction 4.5 Git and GitHub 4.6 RMarkdown 4.7 Binder 4.8 Further reading 4.9 Feedback", " Chapter 4 Git, GitHub and RMarkdown 4.1 Learning outcomes By the end of this practical you should be able to: Explain the use of and differences between Git and GitHub Create reproducible and open R code Produce RMarkdown documents that explain code and analysis 4.2 Homework Outside of our schedulded sessions you should be doing around 12 hours of extra study per week. Feel free to follow your own GIS interests, but good places to start include the following: Assignment This week, based on your knowledge of available data and literature compose a research question or hypothesis. Review your introduction and literature review to ensure you are guiding the reader to understanding the importance of the project Reading This week: Chapter 2 “Basics” from R Markdown: The Definitive Guide by Xie, Allaire and Grolemund (2019) Chapter 2 “Why RMarkdown” from RMarkdown for Scientists by Tierney (2020). The paper “Packaging Data Analytical Work Reproducibly Using R (and Friends)” by Marwick, Boettiger &amp; Mullen (2018). Chapter 9 “Hypothesis testing” from Modern Dive by Ismay and Kim (2019) — also see Analysing spatial patterns Watching Hadley Wickham’s Keynote from the European Molecular Biology Laboratory (EMBL). This will be the same for a few weeks. Karthik Ram’s “A guide to modern reproducible data science with R” Remember this is just a starting point, explore the reading list, practical and lecture for more ideas. 4.3 Recommended listening  Some of these practicals are long, take regular breaks and have a listen to some of our fav tunes each week. Andy Beautiful people will ruin your life! One of my favorite bands…the Wombats. Formed in 2003 at the Liverpool institute of performing arts. Just really talented musicians. Adam What happens when two of the greatest MCs ever to pick up a mic get together to make some music? They only smash out a double album with some of the biggest producers in drum &amp; bass and absolutely kill it! Yes, known to their mums as Delroy and Dominic, to the rest of us as DRS and Dynamite, it’s only Playing in the Dark by DRS and Dynamite! 4.4 Introduction In this practical you will learn how to produce work that is open, reproducible, shareable and portable using RStudio, RMarkdown, Git and GitHub. As more and more researchers and organisations publish assocaited code with their manusripts or documents it’s very imporant to become adept at using these tools. The tools you will use are: RStudio is a graphical user interface (that you should already be familiar with) — it contains a number of features which make it excellent for authoring reproducible and open geographic data science work. RMarkdown is a version of the Markdown markup language which enables plain text to be formatted to contain links to data, code to run, text to explain what you a producing and metadata to tell your software what kinds of outputs to generate from your markdown code. For more information on RMarkdown look here. Git is a software version control system which allows you to keep track of the code you produce and the changes that you or others make to it. GitHub is an online repository that allows anyone to view the code you have produced (in whatever language you choose to program in) and use/scrutinise/contribute to/comment on it. 4.5 Git and GitHub 4.5.1 The three ways There are three ways to make your RStudio project work with GitHub Set up the GitHub repository, clone it to your Git then load it in RStudio — using Git GUI Create a new RStudio project and link it to GitHub — new version control If you have an existing RProject then you can link them manually — existing project I will show you all three, you should be able to do way 1, then way 2 using the same repository. Way 3 will have merge issues, so start with a fresh GitHub repository. It is useful if you have produced some code then want to share it at a later date. Follow what i do in the lecture. My advice is to read the Git and GitHub parts of the practical before you start (until the RMarkdown section). 4.5.2 Set up your GitHub If you are working on your own computer, you will first need to install Git — https://git-scm.com/ — if you are working on the UCL Remote Desktop, you won’t need to do this as it is already installed for you. Go to http://github.com, create an account and create a new repository (call it anything you like - ‘gis_code’ or something similar), making sure it is public and you check the box that says ‘initialise new repository with a README’ — click ‘create repository’ at the bottom Your new repository (‘repo’) will be created and this is where you will be able to store your code online. You will notice that a README.md markdown file has also been created. This can be edited to tell people what they are likely to find in this repository. 4.5.3 Using RStudio with Git Now, as I’ve mentioned before, RStudio is totally bad-ass. Not only does it make R fun to use, but the lovely people who created it also built in support for things like git! For a full and excellent tutorial on using Git with R Studio, watch this webinar If you don’t want to watch the vid, I’ll do a quick summary below. So, to use git, first you need to enable it in RStudio: At the time of writing git integration should work within RStudio. If it doesn’t try this again on your laptop. The next part of the practical is going run through the three ways of using Git and GitHub with RStudio as I laid out in The three ways 4.5.4 Using the Git GUI - way 1 Now you have created your repo online, you need to ‘clone’ it so that there is an identical copy of it in a local folder on your computer. There are a couple of ways of doing this, but the easy one is to use the GUI that comes packaged with your git installation. The first thing you need to do is copy the Clone URL for your repo from the github website — click the green button in your repo for ‘Clone or Download’ and copy the link: Now in the windows start menu, go to Git &gt; GUI Select ‘Clone Existing Repository’ and paste the link from your GitHub account into the top box and the local directory that you want to create to store your repo in the bottom box (note, you will need to add a name for a new folder, once you have selected an existing directory, don’t create a new folder in windows explorer you have to specify it in the file path). After a few moments, you should now be able to view a copy of your GitHub repo on your local machine. This is where you will be able to store all of your code and some other files for your reproducible research. Open RStudio and go File &gt; New Project &gt; Existing Directory Set the project working directory to what you specified in the Git GUI target directory. You have now linked your project to your local Git Note for later, when we try to push to GitHub from RStudio the push button might be geyed out..this is most likely due to your local Git branch not tracking (following) the GitHub branch! Ishow you how to fix this in the greyed out push button section. 4.5.5 Create a new version control in RStudio - way 2 There is an easier way to set up Git and GitHub with your project, but this assumes you are starting fresh (with no code in an RProject)! Under Set up your GitHub we made a respository on GitHub. Copy that URL. Open RStudio &gt; File New Project &gt; Version Control &gt; Git Copy in the repository URL and provide a project directory name…but it should populate when you paste in the URL 4.5.6 If have have an existing project - way 3 Start with a fesh GitHub repository, we’re assuming here that you have some code and then want to share it. DO NOT SELECT a README.md file…it should be an empty GitHub repo… Open RStudio and your exsiting project (or make a new one…i will make one here). In RStudio Tools &gt; Global Options, under ‘Git/SVN’ check the box to allow version control and locate the folder on your computer where the git.exe file is located — if you have installed git then this should be automatically there. If you make a new project make sure you create a file (.R or .Rmd through File &gt; New File), add something to it, then save it (File &gt; Save As) into your project folder. When it saves it should apprear in the bottom right Files window. Next go Tools &gt; Project Options &gt; Git/SVN &gt; and select the version control system as Git. You should now see a git tab in the environment window of RStudio (top right) and the files also appear under the Git tab. It should look something like this…. Now you will be able to use Git and GitHub as per the following instructions…you can also refer to practical 8 GitHub last to avoid using the shell (as i did in the lecture) and just use RStudio GUI. 4.5.7 Commiting to Git As well as saving (as you normally do with any file), which saves a copy to our local directory, we will also ‘commit’ or create a save point for our work on git. To do this, you should click the ‘Git’ icon and up will pop a menu like the one below: You can also click the Git tab that will have appeared in the top-right window of RStudio. Up will then pop another window that looks a little like the one below: Stage the changes, add a commit message so you can monitor the changes you make, then click commit Make some more changes to your file and save it. Click commit again then in the review changes box you will be able to see what has changed within your file. Add a comitt message and click commit: 4.5.8 Using Git outside RStudio Sometimes RStudio Git can be a bit temperamental. For example, when staging the files they can take some time to appear with the ticked box (I think this is because we are working from the Network). Normally in RStudio you click the commit button, select to stage all the files, wait a few seconds then close the review changes box and commit from the buttons in the Git tab in the environment quadrant. Alternatively if you would like to use Git but you’re working on the UCL Remote Desktop or you are experiening other problems with getting git working in RStudio, fear not, you can just use your raw Git installation. In the Start Menu, open the git GUI. Start &gt; Git &gt; Git GUI. You should open the existing repository that you have just created. Whenever you have made some changes to your files in your cloned repo, you can use git to review the changes and ‘Commit’ (save) them and then ‘Push’ them up to your main repository on GitHub. To review and commit your changes, in the commit menu, simply: scan for changes stage them ready for committing commit the changes push the changes to your GitHub repo 4.5.9 Push to Github Now we can push our changes to GitHub using the up arrow either in the RStudio Git tab (envrionment quadrant), or from the review changes box (opens when you click commit). To do this, first make sure you have committed any changes to your local cloned repo and then click the ‘Push’ button to whizz your code up to your main GitHub repo — you might be prompted to enter your github username and password to enable this… But….if the push button is greyed out go to the section Greyed out push button 4.5.10 Pull from GitHub Pull will take any changes to the global repo and bring them into your local repo. Go to your example GitHub repo (online) and click on your test file &gt; edit this file. Add a line of code or a comment, preview the changes then commit directly to the main branch. Now in RStudio click the down arrow (Pull) request. Your file should update in RStudio. If you were to update your file on GitHub and your local one in RStudio seperately you would receive an error message in RStudio when you attempted to commit. 4.5.11 Troubleshooting 4.5.11.1 Were you challenged for your password? As of January 2019 it is possible that Git will use a credential helper provided by the operating system. So you should be asked for your GitHub username and password only once. As I am already logged into mine and I started using GitHub a while ago i’m not exactly sure when you will be asked for you details. You can however set your usename and email manually using the git prompt. Go Tools &gt; Shell and enter: git config --global user.name &#39;yourGitHubUsername&#39; git config --global user.email &#39;name@provider.com&#39; These only need to be set once. 4.5.11.2 Greyed out push button Is your push button greyed out? Mine was when i tried to set it up within an existing project in the section [If have have an existing project] … Fear not…. First, let’s check your local repostiority (Git) is connected to a remote one (GitHub). Open the Shell again (Tools &gt; Shell) and enter: git remote -v ## output origin https://github.com/andrewmaclachlan/example.git (fetch) origin https://github.com/andrewmaclachlan/example.git (push) The fetch and push should be your repository on GitHub. If you need to set the remote repo use: git remote add origin https://github.com/andrewmaclachlanc/myrepo.git Replace my name and myrepo with your account and repo — it’s the same URL that we cloned from GitHub… Was it setup correctly ? Yes… Then check the current branch in RStudio (and Git) is tracking a branch on the remote repo — mine wasn’t. git branch -vv ## output main 3abe929 [origin/main] test3 Origin/main shows that the local main is tracking the origin/main on the remote repo. If you can’t see origin/main then set it using the following code. At the moment RStudio and git still defaults to the starting branch of master so the fist line below will change it to main — which is required to match with the remote (GitHub). git branch -M main git push -u origin main Origin is the repository you cloned (from GitHub) and main is the name of the branch. You might see something like…your branch is ahead of origin/main by 1 commit. This means you have commited something you are working on in you local repo (Git) that hasn’t yet been pushed to GitHub (the origin) and main branch…GitHub defaults the first branch to be called main If you need to change the URL of your GitHub …. so where you push your local Git to the GitHub account (changing this), perhaps you have made a new GitHub repo… git remote set-url origin [enter your cloned URL from GitHUB here]``` For more trouble shooting on Git and GitHub have a look at the book Happy Git and GitHub for the useR 4.5.11.3 reprex If you recall from the introduction to R practical we’ve already talked a bit about a minimal working (or not working) example (MWE). However, now we know a more about R, Git and GitHub there is a way to easily create a reproducible example (repex) that other people can copy and help you to troubleshoot! Firstly install and load the package install.packages(&quot;reprex&quot;) library(reprex) Then simply copy some code to the clipboard (just control+c or cmd+c if you have a Mac)…try copying this to your clipboard A &lt;- 1 B &lt;- 2 C &lt;- A+B C ## [1] 3 The all you do is run… reprex() The rendered code will be copied on to your clipboard so you can paste it to wherever needed, perhaps a GitHub issues tab, like the one for this practical book. If you wanted to pass it to stackoverflow or slack then you just need to change the venue argument (default is for GitHub)… #stackoverflow reprex(venue=&quot;so&quot;) #slack reprex(venue=&quot;r&quot;) 4.5.12 Fork a repository A Fork in GitHub is a copy of someone elses repository. You could use it as a base starting point for your project or to make a fix and then submit a pull request to the original owner who would then pull your changes to their repository. You can fork a GitHub example repository from: https://github.com/octocat/Spoon-Knife Once you fork it, you should see it in your repositories 4.5.13 Branches Each repository you make in git has a default branch but you can create new branches to isolate development of specific areas of work without affecting other branches — like a test envrionment. Go to the test repository you just forked on github. Click the branch drop down and type in the name for a new branch: Now click on the README.md file &gt; edit this file Add some changes, preview them and complete the commit changes box at the bottom of the screen. Here, we’re going to commit directly to the new branch. We could have made these changes to the main branch and then made a new branch for them at this stage. Commit the changes. Go to the home page of our example branch (click the branch down arrow and select your example branch). You’ll see that our example branch is now 1 commit ahead of the main Now let’s create a pull request to the main branch. If you had modified someone else’s code, then you would send a request to them to pull in the changes. Here we are doing a pull request for ourselves — from our example branch to our main. Click New pull request. At the top you will see the branches that are being compared — the base defaults to githubs example repository, change it to yours. Now scroll down and you will see the comaparison of between the two branches. Click create pull request. Select squash and merge &gt; confirm squash and merge. This means that all our commits on the exmaple branch and squashed into one, as we only have one it doesn’t matter but could be useful in future. Go back to your main branch repositry and you should see the changes from the example branch have been merged. We will show you how to publish RMarkdown documents online in a later practical. 4.5.14 Back in time 4.5.14.1 Git Here, we’re going to use code seen in the section of existing project (way 3). To quick recap here, i have an RProject with some files in, one of which is the test_file.R seen in the in the section of existing project (way 3). We also added some code to this file in the section pulling from GitHub. Now, we are going to add some more code then go back in time to remove it. I’ve added z&lt;-5+5 to my script and you can see the file has come up in the Git tab (also called the Git working directory) on the right hand side. Now, as we have done before, Commit(in the Git tab) then the review changes window comes up. Add a commit message, click stage and the Commit. ** Don’t push to GitHub yet** But wait, you’ve just recevied an urgent email (probably using the high importance flag) that the variable z should be deleted, renamed t and be equal to 2. Now, of course, we could just rename it here manually and Commit our changes. But what if you have a large project (like this book!) and make mistakes on several scripts or RMarkdown documents and you need to undo them (like the undo button in Microsoft software). Here we are going to show that. To do this we need to clearly know what we are trying to acheive, for us it’s easy, go back one commit. We have to use the shell again, click the cog icon then shell.. Now, there are two commands we can use here git reset --hard HEAD~1 or git reset --soft HEAD~1. These simply tell Git to reset to Head-1 commit (your current commit is the Head). Changing the number will alter how many commits you go back. Hard will delete all the changes in the previous commit, soft will move the changes we committed to the Git tab, reversing out commit — always use soft! Type the command git reset --soft HEAD~1, the press enter… You’ll see that the test_file.R has moved back to the Git tab. Now if you have forgotten what changes you actually made in the last commit, click the Diff icon (next to Commit) and it will show the changes made to each file. 4.5.14.2 GitHub This section follows on from what we’ve just been through, however, now will we look at how to go back in time once you have pushed to GitHub So change z to t and assign it a value of 2+1. Stage the file, commit to git then now push to GitHub. Think of this as case (a) But wait…you missed off an extra 1, t should be 2+1+1. Add the extra 1 commit to git then now push to GitHub. Think of this as case (b) But wait (again!)…more incoming news from management…t is wrong, is should be assigned to only 2+1,….but do they not know we’ve already pushed to GitHub several times!! If we use reset once we’ve pushed to GitHub it will rewrite the commit history and won’t match with GitHub, so if you tried to push to GitHub you will get an error saying the tip of your local branch is behind the remote. This is because you have done back in time locally. It will ask you to pull the changes from the remote. If you have reset, made changes, tried to push, got an error, tried to pull — you will likely get a merge conflict message that you have to correct manually. However, we can instead use revert to maintain the history and avoid any conflicts — revert adds a new commit at then end of the ‘chain’ of commits. In our case (b) is the curret head, it will add a new commit that is our origial (a) to the end of the chain. On the other hand reset will move your local main (or other branch) back in the chain of commits, but if you moved your local git back whilst your remote (GitHub) remains further along the chain this will cause an error and merge conflicts! To use git revert you have two options either just: git revert HEAD or git revert [input commit ID] - but just get the commit ID for the latest commit nothing before it! . Every commit you make will have an ID (called an SHA). To see the SHA just go to Diff (in the Git tab) &gt; History (top left of the review changes window) — note down your SHA and use it in the shell command. Ok, so to use revert go to the shell and enter git revert HEAD You will probably be met with the VIM (or viewport) window. The best course of action is to input :q to quit and accept the default commit message. You will see already that my test_file.R has already been placed back in the Git tab and t&lt;-2+1 again. If you really want to change the commit message then you need to get into insert mode by typing i &gt; modify text &gt; exit the insert mode with Ctrl+C then &gt; :q to quit. Thanks to the article by Melanie Frazier for this information. If you are storing your R project in a folder that is synchronises online (e.g. OneDrive) you might have issues with this. When you use revert git locks a file which mean it can’t synchronise, if you try and do another revert git will not know who you are. It looks like the process of reverting still happens, but just be careful! Also if you want to go back several commits as opposed to just one you must write the code as git revert HEAD HEAD~1 HEAD~2 and so on. Remember HEAD is the last commit you sent to Github, HEAD~1 the one before etc. You could also specify this as git revert HEAD~2..HEAD, where i think it’s possible to replace HEAD~2 with a commit ID. Boris Serebrov explains more advance useage of revert very well. 4.5.14.3 On final trick What if you wanted to go back in time and restart from that point. Of course you could use revert. However another possible way is to trick GitHub by combining git reset --hard and git reset --soft. First do a hard reset to using the commit ID you want to go back to… git reset --hard commit ID Then do a soft reset to trick git to moving the pointed back to the end (or back to head), which is what the remote is expecting git reset --soft HEAD@{1} Then commit git commit -m \"going back to x commit (or with the commit button) and push git push (or with the push button). 4.5.14.4 Git commands If you’d rather use shell to control Git then you can. If you have a large project RStudio sometimes has limits on filename length (e.g. this might occur with a book, like this one). To get around this you can use the following commands: git add . to stage all files git commit -m \"commit comment\" to commit all the staged files git push to push the commited files to the remote 4.5.15 Health warning To avoid merge conflicts be careful with your commits, pushes and pulls. Think about what you are doing each time. GitHub help pages are quite comprehensive… https://help.github.com/en/articles/resolving-a-merge-conflict-on-github 4.6 RMarkdown OK, so now you have set everything up so that you can become a reproducible research ninja! All that remains is to do some reproducible research! For the definitive guide on R Markdown, please read R Markdown: The Definitive Guide — obviously! It will tell you everything you need to know, far beyond what I am telling you here. The RMarkdown for scientists workshop by Nicholas Tierney is a really quick guide for how to use it for reproducible science. There is also an excellent guide on the R Studio website And a quick cheatsheet here And an older one here This video is also pretty good at explaining the benefits of RMarkdown R Markdown is awesome as you can show code, explanations and results within the same document!!!! Often it could be very hard to reproduce results owing to a lack of information in the methodology / userguides or walkthrougts not matching up with the latest version of software. Think back to a time where you had to use software and consult a massive userguide in how to use it…for me it was a very painful experience. R Markdown is a big improvement as it puts all of the information in the same document, which can then be convereted into a range of different formats — html for webpages, word documents, PDFs, blogs, books — virtually everything! It’s also not limited to R code!!! To change the code language all you have to do is edit what is between the {} in a code chunk (we cover in point 36). In R by default you get {r}, put for python you just change this to {python}!!! COOL. You’ve also got to have all the python software installed and the R reticulate() package too.. have a look here for more information. Now, earlier on in this exercise, I got you to open a new R Script. You now need to open a new R Markdown document, you could also select an R Notebook…They are both RMarkdown documents, the notebook originally let you run code chunks that could be exectued independently, however you can also now do this if you select a markdown file. To my knowledge the only difference is that a R Notebook adds output: html_notebook in the output option in the header of the file that adds a Preview button in the tool bar. If you don’t have this then the preview option will be replaced with Knit. But you can mix the output options in your header for the file to get the Preview button back if you wish to. Basically, there isn’t much difference and you can manually change it with one line of code. Have a look at this stackoverflow question for more infomation. For ease i’d just stick with R Markdown files There are two ways to create an RMarkdown document File &gt; New File &gt; R Markdown You can change the type in the bottom right corner of the script window…. I always use way no.1 (so use that here) and this will be populated with some example data, click Knit to see what it does…the file should load in the viewer pane, if you click the arrow and browser button it will open in an internet browser.. 4.6.1 HTML We are now going to insert some code from the practical last week into the new R Markdown document that i’ve tweaked a bit and run it…clear all of the code except the stuff between the — In RStudio, you can either select Code &gt; Insert Chunk or you can Click the ‘Insert’ button and insert an R chunk A box will appear and in this box, you will be able to enter and run your R code. Try pasting in: library(plotly) library(raster) library(weathermetrics) GB_auto &lt;- raster::getData(&#39;GADM&#39;, country=&quot;GBR&quot;, level=0, #set the path to store your data in path=&#39;prac4_data/&#39;, download=TRUE) GBclim &lt;- raster::getData(&quot;worldclim&quot;, res=5, var=&quot;tmean&quot;, #set the path to store your data in path=&#39;prac4_data/&#39;, download=TRUE) month &lt;- c(&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;) names(GBclim) &lt;- month GBtemp &lt;- GBclim %&gt;% crop(., GB_auto)%&gt;% #WorldClim data has a scale factor of 10! mask(., GB_auto)/10 alldf &lt;- GBtemp %&gt;% as.data.frame()%&gt;% pivot_longer( cols = 1:12, names_to = &quot;Month&quot;, values_to = &quot;Temp&quot;)%&gt;% drop_na() jan&lt;-filter(alldf, Month==&quot;Jan&quot;) jun&lt;-filter(alldf, Month==&quot;Jun&quot;) # give axis titles x &lt;- list (title = &quot;Temperature&quot;) y &lt;- list (title = &quot;Frequency&quot;) # set the bin width xbinsno&lt;-list(start=-5, end=20, size = 2.5) # plot the histogram calling all the variables we just set ihist&lt;-plot_ly(alpha = 0.6) %&gt;% add_histogram(x = jan$Temp, xbins=xbinsno, name=&quot;January&quot;) %&gt;% add_histogram(x = jun$Temp, xbins=xbinsno, name=&quot;June&quot;) %&gt;% layout(barmode = &quot;overlay&quot;, xaxis=x, yaxis=y) ihist When including code chunks in your work, there are various options that allow you to do things like include the code, but not run it: display the output but not the code, hide warnings etc. Most of these can be input automatically by clicking the cog icon in the top-right of the chunk, or you can specify them in the code header of the chunk…if you toggle the buttons you’ll see the code change in the chunk ‘header’. There are also two useful icons to the right of the settings cog, the first will run all code above the current chunck (play symbol facing downwards) and the second will run the current code chunk (regular play symbol) 4.6.2 Flexdashboard We can also change what we knit to…how about a dashboard — this could be something like a group of related data plots or visualisations with some code and or descriptions. First you need to install the flexdashboard package and load it install.packages(&quot;flexdashboard&quot;) library(flexdashboard) To do so you change the YAML to… --- title: &quot;Untitled&quot; output: flexdashboard::flex_dashboard: runtime: flexdashboard --- Then to add coloumns for the different visualisations add the following not in a code chunk. Here we are going to have a coloumn on the left with our histogram then a coloumn on the right with 2 data plot areas which will be empty for this demonstration… This is an example of an interactive dashboard... Column {data-width=600} ------------------------------------- ### Chart 1 Then should be your code chunk from above with the histogram stuff in… Underneath the code chunk add (again not in a code chunk) Column {data-width=400} ------------------------------------- ### Chart 2 The add any code you wish (in a chunk), then to place another area beneath (still in the right hand coloumn) just add ### Chart 3 beneath the code…with all code removed it should look like this… Note that by default flexdashboard doesn’t show code…to show it you need to add echo=TRUE into the R code chunk headers or set ‘global’ code chunk options (within the first code chunk) through: knitr::opts_chunk$set(echo=TRUE) 4.6.3 Word document How about a word document? Just change the YAML to --- title: &quot;Untitled&quot; output: word_document --- I’ve also removed all the coloumn stuff from the flexdashboard…should look something like this… 4.6.4 Knit options Various other options and tips can be found in the full R Markdown guide on RStudio here: https://rmarkdown.rstudio.com/lesson-1.html https://rmarkdown.rstudio.com/lesson-3.html (for code chunk options) 4.6.5 Shortcuts This Twitter thread started by We are R-Ladies is one of the best resources i’ve found for shortcuts using RMarkdown. Favourties that will help you are: New code chunk CTRL + ALT + i New comment in code CTRL + SHIFT + c Align code consistently CTRL+i Fromant ugly code to nice looking code CTRL + ALT + A Insert section label which is foldable and navigable — this only works in a .R file not a .Rmd but is still useful CTRL + SHIFT + R 4.6.6 Adding references This practical will focus on Mendeley, but there are guides online if you use other reference managers. 4.6.6.1 Set up Mendeley You need to download Mendeley (it’s free) to produce a BibTeX file. Open Mendeley (from the desktop icon) and populate it with some research papers..you should just be able to download a few .pdfs and drag them into Mendeley. Make sure the metadata (or document details) are correct by clicking this button… And editing the fields on the right…Now… Go Tools &gt; Options &gt; BibTex Select Escape LaTex special characters, enable BibTex syncing and Create a BibTex file for your whole library or per group. Select to save the BibTeX file in the same folder as your R project, otherwise R won’t be able to find it Else you can just use my BibTex file from my GitHub it’s the .bib. Warning Whilst we’ve excluded the special characters if they happen to be in some of the fields within Mendeley (e.g. abstracts) this will throw an error This method will auto sync your references to the BibTex file, which you can then load in R. If you use Zotero then follow Adam’s guide in section 4.1 here 4.6.6.2 Add refereces into R In your document add the following to the YAML header (this is what we call the top of any RMarkdown header, enclosed by —). I beleive it stands for Yet Another Markup Language. I’ve added a few extra bits…these are pretty self-explanatory (e.g table of contents, numbered sections) but have a play around. --- title: &quot;R Notebook&quot; output: html_document: number_sections: yes theme: yeti highlight: textmate toc: yes toc_float: collapsed: no smooth_scroll: yes editor_options: chunk_output_type: inline bibliography: library.bib --- Now to cite someone just use: [@MicheleAcuto2016; @McPherson2016] Note that the name i’ve used (e.g. McPherson2016) is what Mendeley provided as the citation key for me (see the details about every document you store to find it). The complete bibliography will be placed in the last section, to add a new section to the markdown document just use # and then a space (e.g. # Last section). 4.6.6.3 References using citr If you don’t want to type the code above you can also add references to R using citr package… library(citr) In the ‘Addins’ menu near the top of RStudio, you should (once RStudio has been restarted) have a citr option for ‘Insert citations’ and including them in your work. 4.6.6.4 YAML options Information to help format your knitted file is contained in the YAML header at the top. In here, you can add things like tables of contents, apply specific themes, etc. For a selection of nice themes, see go here For things like adding Tables of Contents, tabbed sections (in HTML), figure and table parameters look here 4.6.6.5 Packrat Packrat is useful as it let’s you store all of your loaded packages in a folder within your project, if you were then to move or share your project someone else could load the packages you have used (and the appopraite version) permitting them to run your code with no isses and no inflence their main R package library. You can access Packrat through the icon under the Packages tab…or Tools &gt; Project Options.. This practical book is build using RStudio, but as i update the packages and content every year i haven’t used Packrat here. So go and check out the documentation for more information. 4.7 Binder Binder is a free platform that makes it possible to share code very easily. It lets you take your RProject (that is stored on GitHub) and add a bit of extra code to it that will provide a link button (called a bage), if clicked it will the user to an online workspace with all your code and data loaded, meaning someone could run your analysis with one click anywhere on any device. COOL! Here is the binder ‘badge’ for the example R project i used to demonstrate Git and GitHub within this practical. This was really easy to make and if you have pushed your R project to GitHub then you are almost there! First you need to install the holepunch package by Karthik Ram. This isn’t on the Comprehensive R Archive Network (CRAN), which is central distribution system for R packages whereby each package is reviewed — these packages can just be installed with install.packages(). So instead will can install it from GitHub, be we do need the remotes package — so install that if you don’t have it. library(remotes) remotes::install_github(&quot;karthik/holepunch&quot;) Next, we have four simple steps Write a compendium — a standard and recognisable way of organising files Write a docker file — contains commands to create an image of the GitHub repository Create a bage, like mine above and copy the code to a file (e.g. the README.md or a .Rmd). Note, you don’t nee to have this in a code chunk. Push to GitHub, then click the bagde! So let’s do it! Change the “Your compendium name” or anything with “Your” with what you want to call it, write_compendium_description(package = &quot;Your compendium name&quot;, description = &quot;Your compendium description&quot;) write_dockerfile(maintainer = &quot;your_name&quot;) generate_badge() # copy and paste the code generate_badge produces #into the file (e.g. README.md / a .Rmd) of your choice. Commit, then push to GitHub. Be careful! Binder is free but if you have a large project then it might take a while to create (as it gives you between 1 and 2GB of RAM) or time out. For example, I tried to create a binder for this book, it did run eventually but took several hours. The binder will also be deleted after around 10 minutes. That said, it’s really great for instantly demonstrating your code to your audience. For more information on this, see Karthik’s great holepunch package user guide, which is where i got this code from. 4.8 Further reading Since starting this little guide, I have come across the book Happy Git and GitHub for the useR on, well, using R and GitHub by Jenny Bryan and Jim Hester. It’s brilliant — get involved! …Also the GitHub guide 4.9 Feedback Was anything that we explained unclear this week or was something really clear…let us know using the feedback form. It’s anonymous and we’ll use the responses to clear any issues up in the future / adapt the material. "],["map-making.html", "Chapter 5 Map making 5.1 Learning outcomes 5.2 Homework 5.3 Recommended listening  5.4 Introduction 5.5 Data 5.6 QGIS 5.7 R 5.8 Bad maps 5.9 Feedback", " Chapter 5 Map making 5.1 Learning outcomes By the end of this practical you should be able to: List and explain basic mapping concepts across QGIS and R Interpret and manipulate data from multiple sources Create near publishable static and interactive mapped outputs Evaluate and critique mapping approaches between QGIS and R 5.2 Homework Outside of our scheduled sessions you should be doing around 12 hours of extra study per week. Feel free to follow your own GIS interests, but good places to start include the following: Assignment homework This week Fill in this short assignment proposal form by 9am the Tuesday of reading week (10th November) Create a draft of the methodology / initial ideas that can be expanded on as we move to more advanced analysis in the second part of the course. Reading This week: Chapter 8 “Making maps with R” from Geocomputation with R by Lovelace, Nowosad and Muenchow (2020) Watching Episode 1 of Maptastic from the Financial Times with Professor Alasdair Rae formerly of the University of Sheffield. Remember this is just a starting point, explore the reading list, practical and lecture for more ideas. 5.3 Recommended listening  Some of these practicals are long, take regular breaks and have a listen to some of our fav tunes each week. Andy. Mumford &amp; Sons, unique sound classed as British folk rock apparently. Enjoy! Adam Your ears are in for an absolute treat this week. Hospital Records have only gone and put out a mind-blowing mini compilation album which completely smashes it. It’s NHS400 - get your ears around this! 5.4 Introduction In this practical we’re going to focus on creating mapped outputs using QGIS, ArcMap and R. For fun we’re going to use data from OpenStreetMap (OSM) and Airbnb. 5.4.1 OSM OpenStreetMap is collaborative project that has created a free editable map of the World. As users can create their own content it is classed as Volunteered geographic Information (VGI). There is a lot of academic literature on VGI, it’s advnatages and disadvantages. For an overview of VGI checkout this article by Goodchild (2007). If you are interested in exploring the power of VGI and OSM further checkout missing maps. They aim to map missing places, often in less developed countires, using OSM so that when natural disasters occur first responders can make data informed decisions. They run events all over the world and it’s worth going to meet other spatial professionals, gain some experience with OSM and contribute to a good cause. 5.4.2 Airbnb Airbnb is an online marketplace that connects people looking to rent homes to those seeking accomodation often over short time periods. 5.5 Data It’s possible to download OSM data straight from the website, although the interface can be a little unreliable (it works better for small areas). There are, however, a number of websites that allow OSM data to be downloaded more easily and are directly linked to from the ‘Export’ option in OSM. Geofabrik (one of these websites) allows you to download frequently updated shapefiles for various global subdivisions. 5.5.1 OSM Go to the Geofabrik download server website Navigate to: Europe &gt; GreatBritain &gt; England &gt; Greater London Download greater-london-latest-free.shp.zip Unzip the data and save it to your current folder 5.5.2 London boroughs We’ll use our London boroughs layer again, either load it from week 1 or download it: To get the data go to the London data store Search for Statistical GIS Boundary Files for London Download the statistical-gis-boundaries-london.zip Unzip the data and save it to your current folder 5.5.3 World cities We will use World cities to provide some context to our maps. Download them from the ArcGIS HUB &gt; Download &gt; Shapefile. 5.5.4 Airbnb Download the listings.csv from the inside airbnb website for London. In the lecture we discussed how when producing maps there should be some sort of common denominator as opposed to mapping raw counts. Go and source a suitable common denominator then using the skills from previous weeks normalise your data. Hint there is a table on the Office for National Statistics NOMIS website called number of bedrooms which would let you normalise the airbnb and hotel data based on the number of bedrooms in each ward. 5.6 QGIS Ok, now we’re going to reproduce our map in QIGS. 5.6.1 Load data Load QGIS, Open and Save a new project (Project &gt; New) Right click on GeoPackage and create a new database to store our data in .gpkg Load our data layers: London boroughs and OSM data (OSM data should be the gis_osm_pois_a_free_1 polygon layer). Make sure the processing toolbox is active…go Plugins &gt; Manage and Install Plugins &gt; Installed (left side of the box that opens), Processing should be ticked….then select the cog that is in the toolbar — within the sqaure box in the image below. You can then search for tools in the Processing Toolbox that appears on the right of QGIS. 5.6.2 Manipulate data If you recall from practical 1, QGIS sets the map document CRS to that of the first layer loaded. Our London boroughs layer is in British National Grid (EPSG: 27700) where as are OSM layers are in WGS 1984 (EPSG: 4326). The OSM data will load and QGIS is pretty clever here as it will project ‘on the fly’ which means it can display the data stored in one projection as if it were in another, but the actual data is not altered. This is both good and bad. Good as it let’s us visualise our data quickly, but bad because if we have data with different projections you will run into problems during processing. My advice is to load the data and pick a projection to do all processing in. Reproject the OSM data. If you scroll right in the dialogue box you’ll be able to save it into your GeoPackage. You might need to refresh the browers to see the layer. While we are working with projections…check the CRS of your map (bottom right)…mine is EPSG 4326 (WGS 1984) and we want it to be in British National Grid (which is ESPG: 27700), click on it, change it and apply. For completness also drag and drop your London boroughs .shp from the Layers window (bottom left) into your GeoPacakge. Remove the old one from the Layers window. Double click on the new London boroughs layer in the GeoPackage and it will open To get only the hotels out of our OSM data we can use extract by attrbitue…this is my tool dialogue box. You can find extract by attribute by clicking the toolbox cog, then searching for extract by attribute. Refresh the browser —you have to do this everytime. Double click the layer to load it. Now extract by location using the file you just created and the London boroughs (so hotels within the London boroughs). Note that i selected that the hotels are within the Lonon boroughs Let’s now count our hotels per London borough using Join Attributes by Location (Summary). Note i selected the osm_id field to summarise using count in summaries to calcualte…. Next up is the Air b n b data, i’ll show you how to load it then you need to produce a count of rentals per London borough using the same rules as before (entire place/apartment and available all year). To load the data click Data Source Manager &gt; Delimited Text: You need to: Sort the projection out and save into your .gpkg Select by attibute (entire place and 365 days) Select by location (within London boroughs) Join the output to a new (or original) London borough polygon layer Note You can filter by multiple attributes using extract by expression…here we would use the expression (\"room_type\" ILIKE '%Entire home/apt%') AND (\"availability_365\" ILIKE '%365%') to filter based on entire home/apt and available 365 days of the year. 5.6.3 Map data So now you should have two London borough layers one with a count of all the hotels and the other with a count of all the air b n b properties…To make a thematic map right click on the hotel layer &gt; Symbology (tab) select Graduated and your count coloumn as the coloumn, mode as natural breaks and then classify… Now save the style so we can use it on our other layer….Style &gt; Save Style &gt; select in Database and provide a name Go to the symbology of the other layer &gt; select Graduated, select the correct count coloumn, then Style &gt; Load Style, from database and your saved style should be listed. To create a new map document in QGIS go: Project &gt; New Print Layout. The layout works by adding a new map which is a snapshop of the main QGIS document…. In the main QGIS document only select your airbnb layer, right click and zoom to it. GO back to the Print Layout &gt; Add Item &gt; Add Map..draw a sqaure…the layer should appear…In the window at the bottom right under Item Properties select to Lock layers…so now if you were to unselect that layer it would still remain on in the Print Layout Go back to your main QGIS document, now only select the hotels layer…repeat the Add Map steps and lock the layers Make sure you give the same size to both Maps…to do so click on a Map &gt; Item Properties (bottom right) scroll down, expand Position and Size, give the same width and height values Add some guides to line everything up go: View &gt; Manage Guides. The guides panel will appear in the bottom right hand corner, click the + to add a guide at a distance you specify. You can then drag your maps to snap to the guides. Add a scale bar: Add Item &gt; Add Scale Bar. To adjust it, right click &gt; Item Properties…alter some of the properties to make it look appropraite. Add a legend: Add Item &gt; Add Legend and draw a sqaure. Same process to adjust it. Untick Auto update then you can use the + and - icons to remove items along with the edit icon to change the text…this is what mine looks like… Add an arrow: Add Item &gt; Add Arrow, left click to start (twice) and right click to finish. Add text: In the left hand tool bar click add text box and draw a square Let’s add our extent map, load the UK .shp, reproject it and save it into your .gpkg. Do the same for your city points but be sure to load them into your .gpkg before you run any tool (just drag and drop them). When reprojecting you might see a lot of errors for certain points in the processing box…don’t worry British National Grid only covers the UK — these errors will be for points outside of the UK which we will remove Now replicate our ArcMap inset map by opening the Layer Properties of the new cities layer &gt; Labels &gt; Single Labels with city name, alter any of the text styles as you wish. Also play around with the symbology.. Add the new map into your map layout and move the items to appropraite locations… This is what i came up with in my map layout 5.6.4 Export map To export your map to a file go: Layout &gt; Export as Image and select crop to content…and here is my map… Note there are a few problems with my map that could be improved: (1) If you look closely at the vector layer for London you will see that one of the boroughs is missing from map (b) — this is most likely because it has no data but could easily be fixed (2) Whilst this time i’ve displayed all the city names the colour scheme needs work…for ideas on this check out colour brewer. 5.6.5 Graphical modeler As in ArcMap we can automate the methodological process in QGIS using the graphical modeler..again i’ll provide a short example here Go: Processing &gt; Graphical Modeler Graphical modeler is a bit different to model builder in ArcMap, here you drag inputs and algorthims from the inputs box (bottom left) into the model, you don’t need to specify the inputs here. When you click the run buttom (play on the top toolbar) you’ll be asked to provide the layers for the inputs. The options will be limited to those you currently have open in your map…check out the model i made to automate reprojecting cities and the UK outline, then extracting the cities within the UK outline… Make sure you save your model from the top tool bar either as a standalone model or within your project 5.7 R Your R and geogprahical are certainly improving by now, so i’m just going to provide you with the R code i used to do this analysis… 5.7.1 Static map ##Load all our data library(sf) library(tmap) library(tmaptools) library(tidyverse) library(here) # read in all the spatial data and # reproject it OSM &lt;- st_read(here::here(&quot;prac5_data&quot;, &quot;greater-london-latest-free.shp&quot;, &quot;gis_osm_pois_a_free_1.shp&quot;)) %&gt;% st_transform(., 27700) %&gt;% #select hotels only filter(fclass == &#39;hotel&#39;) ## Reading layer `gis_osm_pois_a_free_1&#39; from data source ## `C:\\Users\\Andy\\OneDrive - University College London\\Teaching\\CASA0005\\2020_2021\\CASA0005repo\\prac5_data\\greater-london-latest-free.shp\\gis_osm_pois_a_free_1.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 35197 features and 4 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -0.5108706 ymin: 51.28117 xmax: 0.322123 ymax: 51.68948 ## Geodetic CRS: WGS 84 Worldcities &lt;- st_read(here::here(&quot;prac5_data&quot;, &quot;World_Cities&quot;, &quot;World_Cities.shp&quot;)) %&gt;% st_transform(., 27700) ## Reading layer `World_Cities&#39; from data source ## `C:\\Users\\Andy\\OneDrive - University College London\\Teaching\\CASA0005\\2020_2021\\CASA0005repo\\prac5_data\\World_Cities\\World_Cities.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 2540 features and 13 fields ## Geometry type: POINT ## Dimension: XY ## Bounding box: xmin: -176.1516 ymin: -54.792 xmax: 179.2219 ymax: 78.2 ## Geodetic CRS: WGS 84 UK_outline &lt;- st_read(here::here(&quot;prac5_data&quot;, &quot;gadm36_GBR_shp&quot;, &quot;gadm36_GBR_0.shp&quot;)) %&gt;% st_transform(., 27700) ## Reading layer `gadm36_GBR_0&#39; from data source ## `C:\\Users\\Andy\\OneDrive - University College London\\Teaching\\CASA0005\\2020_2021\\CASA0005repo\\prac5_data\\gadm36_GBR_shp\\gadm36_GBR_0.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 1 feature and 2 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -13.69139 ymin: 49.86542 xmax: 1.764168 ymax: 61.52708 ## Geodetic CRS: WGS 84 #London Borough data is already in 277000 Londonborough &lt;- st_read(here::here(&quot;Prac1_data&quot;, &quot;statistical-gis-boundaries-london&quot;, &quot;ESRI&quot;, &quot;London_Borough_Excluding_MHW.shp&quot;))%&gt;% st_transform(., 27700) ## Reading layer `London_Borough_Excluding_MHW&#39; from data source ## `C:\\Users\\Andy\\OneDrive - University College London\\Teaching\\CASA0005\\2020_2021\\CASA0005repo\\prac1_data\\statistical-gis-boundaries-london\\ESRI\\London_Borough_Excluding_MHW.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 33 features and 7 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 503568.2 ymin: 155850.8 xmax: 561957.5 ymax: 200933.9 ## Projected CRS: OSGB 1936 / British National Grid # read in the .csv # and make it into spatial data Airbnb &lt;- read_csv(&quot;prac5_data/listings.csv&quot;) %&gt;% st_as_sf(., coords = c(&quot;longitude&quot;, &quot;latitude&quot;), crs = 4326) %&gt;% st_transform(., 27700)%&gt;% #select entire places that are available all year filter(room_type == &#39;Entire home/apt&#39; &amp; availability_365 ==&#39;365&#39;) # make a function for the join # functions are covered in practical 7 # but see if you can work out what is going on # hint all you have to do is replace data1 and data2 # with the data you want to use Joinfun &lt;- function(data1, data2){ output&lt;- data1%&gt;% st_join(Londonborough,.)%&gt;% add_count(GSS_CODE, name=&quot;hotels_in_borough&quot;) return(output) } # use the function for hotels Hotels &lt;- Joinfun(OSM, Londonborough) # then for airbnb Airbnb &lt;- Joinfun(Airbnb, Londonborough) Worldcities2 &lt;- Worldcities %&gt;% filter(CNTRY_NAME==&#39;United Kingdom&#39;&amp; Worldcities$CITY_NAME==&#39;Birmingham&#39;| Worldcities$CITY_NAME==&#39;London&#39;| Worldcities$CITY_NAME==&#39;Edinburgh&#39;) newbb &lt;- c(xmin=-296000, ymin=5408, xmax=655696, ymax=1000000) UK_outlinecrop &lt;- UK_outline$geometry %&gt;% st_crop(., newbb) Hotels &lt;- Hotels %&gt;% #at the moment each hotel is a row for the borough #we just one one row that has number of airbnbs group_by(., GSS_CODE, NAME)%&gt;% summarise(`Accomodation count` = unique(hotels_in_borough)) Airbnb &lt;- Airbnb %&gt;% group_by(., GSS_CODE, NAME)%&gt;% summarise(`Accomodation count` = unique(hotels_in_borough)) Make the map tmap_mode(&quot;plot&quot;) # set the breaks # for our mapped data breaks = c(0, 5, 12, 26, 57, 286) # plot each map tm1 &lt;- tm_shape(Hotels) + tm_polygons(&quot;Accomodation count&quot;, breaks=breaks, palette=&quot;PuBu&quot;)+ tm_legend(show=FALSE)+ tm_layout(frame=FALSE)+ tm_credits(&quot;(a)&quot;, position=c(0,0.85), size=1.5) tm2 &lt;- tm_shape(Airbnb) + tm_polygons(&quot;Accomodation count&quot;, breaks=breaks, palette=&quot;PuBu&quot;) + tm_legend(show=FALSE)+ tm_layout(frame=FALSE)+ tm_credits(&quot;(b)&quot;, position=c(0,0.85), size=1.5) tm3 &lt;- tm_shape(UK_outlinecrop)+ tm_polygons(col=&quot;darkslategray1&quot;)+ tm_layout(frame=FALSE)+ tm_shape(Worldcities2) + tm_symbols(col = &quot;red&quot;, scale = .5)+ tm_text(&quot;CITY_NAME&quot;, xmod=-1, ymod=-0.5) legend &lt;- tm_shape(Hotels) + tm_polygons(&quot;Accomodation count&quot;, palette=&quot;PuBu&quot;) + tm_scale_bar(position=c(0.2,0.04), text.size=0.6)+ tm_compass(north=0, position=c(0.65,0.6))+ tm_layout(legend.only = TRUE, legend.position=c(0.2,0.25),asp=0.1)+ tm_credits(&quot;(c) OpenStreetMap contrbutors and Air b n b&quot;, position=c(0.0,0.0)) t=tmap_arrange(tm1, tm2, tm3, legend, ncol=2) t We can also arrage our maps using the grid package… library(grid) grid.newpage() pushViewport(viewport(layout=grid.layout(2,2))) print(tm1, vp=viewport(layout.pos.col=1, layout.pos.row=1, height=5)) print(tm2, vp=viewport(layout.pos.col=2, layout.pos.row=1, height=5)) print(tm3, vp=viewport(layout.pos.col=1, layout.pos.row=2, height=5)) print(legend, vp=viewport(layout.pos.col=2, layout.pos.row=2, height=5)) 5.7.2 Inset map Londonbb = st_bbox(Airbnb, crs = st_crs(Airbnb)) %&gt;% st_as_sfc() main &lt;- tm_shape(Airbnb, bbbox = Londonbb) + tm_polygons(&quot;Accomodation count&quot;, breaks=breaks, palette=&quot;PuBu&quot;)+ tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;), text.size = .75)+ tm_layout(legend.position = c(&quot;right&quot;,&quot;top&quot;), legend.text.size=.75, legend.title.size = 1.1, frame=FALSE)+ tm_credits(&quot;(c) OpenStreetMap contrbutors and Air b n b&quot;, position=c(0.0,0.0))+ #tm_text(text = &quot;NAME&quot;, size = .5, along.lines =T, remove.overlap=T, auto.placement=F)+ tm_compass(type = &quot;8star&quot;, position = c(0.06, 0.1)) + #bottom left top right tm_layout(inner.margin=c(0.02,0.02,0.02,0.2)) inset = tm_shape(UK_outlinecrop) + tm_polygons() + tm_shape(Londonbb)+ tm_borders(col = &quot;grey40&quot;, lwd = 3)+ tm_layout(frame=FALSE, bg.color = &quot;transparent&quot;)+ tm_shape(Worldcities2) + tm_symbols(col = &quot;red&quot;, scale = .5)+ tm_text(&quot;CITY_NAME&quot;, xmod=-1.5, ymod=-0.5) library(grid) main print(inset, vp = viewport(0.86, 0.29, width = 0.5, height = 0.55)) ### Export So how do we output our map then… tmap_save(t, &#39;hotelsandairbnbR.png&#39;) library(grid) tmap_save(main,insets_tm = inset,insets_vp=viewport(x=0.86, y=0.29, width=.5, height=.55), filename=&quot;test.pdf&quot;, dpi=600) 5.7.3 Basic interactive map But could we not also make an interactive map like we did in practical 2? tmap_mode(&quot;view&quot;) tm_shape(Airbnb) + tm_polygons(&quot;Accomodation count&quot;, breaks=breaks) 5.7.4 Advanced interactive map But let’s take it a bit further so we can select our layers on an interactive map.. # library for pop up boxes library(leafpop) library(leaflet) #join data Joined &lt;- Airbnb%&gt;% st_join(., Hotels, join = st_equals)%&gt;% dplyr::select(GSS_CODE.x, NAME.x, `Accomodation count.x`, `Accomodation count.y`)%&gt;% dplyr::rename(`GSS code` =`GSS_CODE.x`, `Borough` = `NAME.x`, `Airbnb count` = `Accomodation count.x`, `Hotel count`= `Accomodation count.y`)%&gt;% st_transform(., 4326) #remove the geometry for our pop up boxes to avoid popupairbnb &lt;-Joined %&gt;% st_drop_geometry()%&gt;% dplyr::select(`Airbnb count`, Borough)%&gt;% popupTable() popuphotel &lt;-Joined %&gt;% st_drop_geometry()%&gt;% dplyr::select(`Hotel count`, Borough)%&gt;% popupTable() tmap_mode(&quot;view&quot;) # set the colour palettes using our previously defined breaks pal1 &lt;- Joined %&gt;% colorBin(palette = &quot;YlOrRd&quot;, domain=.$`Airbnb count`, bins=breaks) pal1 &lt;-colorBin(palette = &quot;YlOrRd&quot;, domain=Joined$`Airbnb count`, bins=breaks) pal2 &lt;- Joined %&gt;% colorBin(palette = &quot;YlOrRd&quot;, domain=.$`Hotel count`, bins=breaks) map&lt;- leaflet(Joined) %&gt;% # add basemap options addTiles(group = &quot;OSM (default)&quot;) %&gt;% addProviderTiles(providers$Stamen.Toner, group = &quot;Toner&quot;) %&gt;% addProviderTiles(providers$Stamen.TonerLite, group = &quot;Toner Lite&quot;) %&gt;% addProviderTiles(providers$CartoDB.Positron, group = &quot;CartoDB&quot;)%&gt;% #add our polygons, linking to the tables we just made addPolygons(color=&quot;white&quot;, weight = 2, opacity = 1, dashArray = &quot;3&quot;, popup = popupairbnb, fillOpacity = 0.7, fillColor = ~pal2(`Airbnb count`), group = &quot;Airbnb&quot;)%&gt;% addPolygons(fillColor = ~pal2(`Hotel count`), weight = 2, opacity = 1, color = &quot;white&quot;, dashArray = &quot;3&quot;, popup = popupairbnb, fillOpacity = 0.7,group = &quot;Hotels&quot;)%&gt;% # add a legend addLegend(pal = pal2, values = ~`Hotel count`, group = c(&quot;Airbnb&quot;,&quot;Hotel&quot;), position =&quot;bottomleft&quot;, title = &quot;Accomodation count&quot;) %&gt;% # specify layers control addLayersControl( baseGroups = c(&quot;OSM (default)&quot;, &quot;Toner&quot;, &quot;Toner Lite&quot;, &quot;CartoDB&quot;), overlayGroups = c(&quot;Airbnb&quot;, &quot;Hotels&quot;), options = layersControlOptions(collapsed = FALSE) ) # plot the map map The legend on this map doesn’t update when you select a different layer. I could have enabled this by chaning the group argument to just Airbnb or Hotel, then calling a second addLegend() function for the other group. However, when displaying maps such as these, it’s often useful to have a consistent scale in the legend so they are directly comparable. If you want to explore Leaflet more have a look at the leaflet for R Guide To see other basemap options (there are loads!) have a look here at leaflet extras 5.8 Bad maps What makes a bad map then… and what should you avoid: Poor labeling — don’t present something as an output with the file name (e.g. layer_1_osm) in the legend — name your layers properly, it’s really easy to do and makes a big difference to the quality of the map. No legend Screenshot of the map — export it properly, we’ve been doing this a while and can tell Change the values in the legend … what is aesthetically more pleasing 31.99999 or 32?. Make it as easy as possible to interpret your map. Too much data presented on one map — be selective or plot multiple maps Presented data is too small or too big — be critical about what you produce, it should be easy to read and understand A map or figure without enough detail — A reader should be able to understand a map or figure using the graphic in the figure/map and the caption alone! A long caption is fine assuming it’s all relevant information. For more cartography ideas/advice have a look at Katie Jolly’s blog post on urban heat islands, consult axis map catography guide and check out the data is beautiful reddit. Another decent resource is the Fundamentals of Data Visualization book 5.9 Feedback Was anything that we explained unclear this week or was something really clear…let us know using the feedback form. It’s anonymous and we’ll use the responses to clear any issues up in the future / adapt the material. "],["analysing-spatial-patterns.html", "Chapter 6 Analysing spatial patterns 6.1 Learning outcomes 6.2 Homework 6.3 Recommended listening  6.4 Introduction 6.5 Setting up your data 6.6 Point pattern analysis 6.7 Density-based spatial clustering of applications with noise: DBSCAN 6.8 Point pattern analysis summary 6.9 Analysing Spatial Autocorrelation with Moran’s I, LISA and friends 6.10 Extension 6.11 Feedback", " Chapter 6 Analysing spatial patterns 6.1 Learning outcomes By the end of this practical you should be able to: Describe and evaluate methods for analysing spatial patterns Execute data cleaning and manipulation appropairte for analysis Determine the locations of spatial clusters using point pattern analysis methods Investigate the degree to which values at spatial points are similar (or different) to each other 6.2 Homework Outside of our schedulded sessions you should be doing around 12 hours of extra study per week. Feel free to follow your own GIS interests, but good places to start include the following: Assignment From weeks 6-9, learn and practice analysis from the course and identify appropriate techniques (from wider research) that might be applicable/relevant to your data. Conduct an extensive methodological review – this could include analysis from within academic literature and/or government departments (or any reputable source). Reading This week: Chapter 11 “Point Pattern Analysis” and Chapter 13 “Spatial Autocorrelation” from Intro to GIS and Spatial Analysis by Gimond (2019). Chapter 9 “Hypothesis testing” from Modern Dive by Ismay and Kim (2019) if you have not already done so. Remember this is just a starting point, explore the reading list, practical and lecture for more ideas. 6.3 Recommended listening  Some of these practicals are long, take regular breaks and have a listen to some of our fav tunes each week. Andy Adam This week it’s the head honcho himself, the man, the legend that is Tony Colman, CEO and founder of Hospital Records — his new album Building Better Worlds is a masterpiece! Enjoy! 6.4 Introduction In this practical you will learn how to begin to analyse patterns in spatial data. Using data you are already familiar with, in the first part of the practical, you will explore some techniques for analysing patterns of point data in R. Then, in the second part of the practial, you will explore spatial autocorrelation using R or ArcGIS…or both if you wish. In this analysis we will analyse the patterns of Blue Plaques — you will see these placed on around the UK linking the buildings of the present to people of the past. The question we want to answer is: “For any given London Borough, are the Blue Plaques within that borough distributed randomly or do they exhibit some kind of dispersed or clustered pattern?” Before we progress, take a minute to go back and refelct on Grolemund and Wickham’s typical workflow of a data science (or GIS) project from workshop 1 To answer this question, we will make use of some of the Point Pattern Analysis functions found in the spatstat package. #first library a few packages that we will use during the practical #note you may need to install them first... library(spatstat) library(here) library(sp) library(rgeos) library(maptools) library(GISTools) library(tmap) library(sf) library(geojson) library(geojsonio) library(tmaptools) 6.5 Setting up your data Now, assuming that you’ve got a copy of your London Boroughs shapefile (from week 1) in your new week 6 folder, along with a shapefile of your Blue Plaques. If not.. read in the data from the ONS geoportal ##First, get the London Borough Boundaries LondonBoroughs &lt;- st_read(here::here(&quot;Prac1_data&quot;, &quot;statistical-gis-boundaries-london&quot;, &quot;ESRI&quot;, &quot;London_Borough_Excluding_MHW.shp&quot;)) ## Reading layer `London_Borough_Excluding_MHW&#39; from data source ## `C:\\Users\\Andy\\OneDrive - University College London\\Teaching\\CASA0005\\2020_2021\\CASA0005repo\\prac1_data\\statistical-gis-boundaries-london\\ESRI\\London_Borough_Excluding_MHW.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 33 features and 7 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 503568.2 ymin: 155850.8 xmax: 561957.5 ymax: 200933.9 ## Projected CRS: OSGB 1936 / British National Grid # Or use this to read in directly. #LondonBoroughs &lt;- st_read(&quot;https://opendata.arcgis.com/datasets/8edafbe3276d4b56aec60991cbddda50_4.geojson&quot;) Pull out London using the str_detect() function from the stringr package in combination with filter() from dplyr (again!). We will look for the bit of the district code that relates to London (E09) from the ‘lad15cd’ column data frame of our sf object. library(stringr) BoroughMap &lt;- LondonBoroughs %&gt;% dplyr::filter(str_detect(GSS_CODE, &quot;^E09&quot;))%&gt;% st_transform(., 27700) qtm(BoroughMap) summary(BoroughMap) ## NAME GSS_CODE HECTARES NONLD_AREA ## Length:33 Length:33 Min. : 314.9 Min. : 0.00 ## Class :character Class :character 1st Qu.: 2724.9 1st Qu.: 0.00 ## Mode :character Mode :character Median : 3857.8 Median : 2.30 ## Mean : 4832.4 Mean : 64.22 ## 3rd Qu.: 5658.5 3rd Qu.: 95.60 ## Max. :15013.5 Max. :370.62 ## ONS_INNER SUB_2009 SUB_2006 geometry ## Length:33 Length:33 Length:33 MULTIPOLYGON :33 ## Class :character Class :character Class :character epsg:27700 : 0 ## Mode :character Mode :character Mode :character +proj=tmer...: 0 ## ## ## Now get the location of all Blue Plaques in the City ##Now get the location of all Blue Plaques in the City BluePlaques &lt;- st_read(&quot;https://s3.eu-west-2.amazonaws.com/openplaques/open-plaques-london-2018-04-08.geojson&quot;) BluePlaques &lt;- st_read(here::here(&quot;prac6_data&quot;, &quot;open-plaques-london-2018-04-08.geojson&quot;)) %&gt;% st_transform(.,27700) ## Reading layer `open-plaques-london-2018-04-08&#39; from data source ## `C:\\Users\\Andy\\OneDrive - University College London\\Teaching\\CASA0005\\2020_2021\\CASA0005repo\\prac6_data\\open-plaques-london-2018-04-08.geojson&#39; ## using driver `GeoJSON&#39; ## Simple feature collection with 2812 features and 2 fields ## Geometry type: POINT ## Dimension: XY ## Bounding box: xmin: -0.477 ymin: 0 xmax: 0.21903 ymax: 51.6783 ## Geodetic CRS: WGS 84 summary(BluePlaques) ## id inscription geometry ## Min. : 1.0 Length:2812 POINT :2812 ## 1st Qu.: 711.8 Class :character epsg:27700 : 0 ## Median : 6089.0 Mode :character +proj=tmer...: 0 ## Mean :10622.0 ## 3rd Qu.:10358.2 ## Max. :49190.0 #plot the blue plaques in the city tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing tm_shape(BoroughMap) + tm_polygons(col = NA, alpha = 0.5) + tm_shape(BluePlaques) + tm_dots(col = &quot;blue&quot;) 6.5.1 Data cleaning Now, you might have noticed that there is at least one Blue Plaque that falls outside of the Borough boundaries. Errant plaques will cause problems with our analysis, so we need to clip the plaques to the boundaries…First we’ll remove any Plaques with the same grid reference as this will cause problems later on in the analysis.. #remove duplicates library(tidyverse) library(sf) BluePlaques &lt;- distinct(BluePlaques) Now just select the points inside London - thanks to Robin Lovelace for posting how to do this one, very useful! BluePlaquesSub &lt;- BluePlaques[BoroughMap,] #check to see that they&#39;ve been removed tmap_mode(&quot;view&quot;) tm_shape(BoroughMap) + tm_polygons(col = NA, alpha = 0.5) + tm_shape(BluePlaquesSub) + tm_dots(col = &quot;blue&quot;) 6.5.2 Study area From this point, we could try and carry out our analysis on the whole of London, but you might be waiting until next week for Ripley’s K to be calculated for this many points. Therefore to speed things up and to enable us to compare areas within London, we will select some individual boroughs. First we need to subset our SpatialPolygonsDataFrame to pull out a borough we are interested in. I’m going to choose Harrow as I know there are few enough points for the analysis to definitely work. If you wish, feel free to choose another borough in London and run the same analysis, but beware that if it happens that there are a lot of blue plaques in your borough, the analysis could fall over!! #extract the borough Harrow &lt;- BoroughMap %&gt;% filter(., NAME==&quot;Harrow&quot;) #Check to see that the correct borough has been pulled out tm_shape(Harrow) + tm_polygons(col = NA, alpha = 0.5) Next we need to clip our Blue Plaques so that we have a subset of just those that fall within the borough or interest #clip the data to our single borough BluePlaquesSub &lt;- BluePlaques[Harrow,] #check that it&#39;s worked tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing tm_shape(Harrow) + tm_polygons(col = NA, alpha = 0.5) + tm_shape(BluePlaquesSub) + tm_dots(col = &quot;blue&quot;) We now have all of our data set up so that we can start the analysis using spatstat. The first thing we need to do is create an observation window for spatstat to carry out its analysis within — we’ll set this to the extent of the Harrow boundary #now set a window as the borough boundary window &lt;- as.owin(Harrow) plot(window) spatstat has its own set of spatial objects that it works with (one of the delights of R is that different packages are written by different people and many have developed their own data types) — it does not work directly with the SpatialPolygonsDataFrames, SpatialPointsDataFrames or sf objects that we are used to. For point pattern analysis, we need to create a point pattern (ppp) object. #create a ppp object BluePlaquesSub&lt;- BluePlaquesSub %&gt;% as(., &#39;Spatial&#39;) BluePlaquesSub.ppp &lt;- ppp(x=BluePlaquesSub@coords[,1], y=BluePlaquesSub@coords[,2], window=window) Try to understand what the different elements in command above is doing. If you are unsure, you can run elements of the code, for example: BluePlaquesSub@coords[,1] ## [1] 516451.0 518560.0 514177.1 515166.2 513053.6 515093.1 515210.7 516746.3 ## [9] 513371.5 514971.1 517339.4 512215.1 515300.0 514966.0 512639.2 515561.8 ## [17] 515561.8 511539.4 516725.5 512335.7 515370.2 518598.3 511792.6 515694.1 ## [25] 513008.4 514805.8 513392.3 518187.5 513750.4 512466.7 515491.4 514789.8 ## [33] 514022.4 519099.9 514183.4 512343.1 512508.2 512346.3 512269.5 515333.7 Have a look at the new ppp object BluePlaquesSub.ppp %&gt;% plot(.,pch=16,cex=0.5, main=&quot;Blue Plaques Harrow&quot;) 6.6 Point pattern analysis 6.6.1 Kernel Density Estimation One way to summarise your point data is to plot the density of your points under a window called a ‘Kernel’. The size and shape of the Kernel affects the density pattern produced, but it is very easy to produce a Kernel Density Estimation (KDE) map from a ppp object using the density() function. BluePlaquesSub.ppp %&gt;% density(., sigma=500) %&gt;% plot() The sigma value sets the diameter of the Kernel (in the units your map is in — in this case, as we are in British National Grid the units are in metres). Try experimenting with different values of sigma to see how that affects the density estimate. BluePlaquesSub.ppp %&gt;% density(., sigma=1000) %&gt;% plot() 6.6.2 Quadrat Analysis So as you saw in the lecture, we are interesting in knowing whether the distribution of points in our study area differs from ‘complete spatial randomness’ — CSR. That’s different from a CRS! Be careful! The most basic test of CSR is a quadrat analysis. We can carry out a simple quadrat analysis on our data using the quadrat count function in spatstat. Note, I wouldn’t recommend doing a quadrat analysis in any real piece of analysis you conduct, but it is useful for starting to understand the Poisson distribution… #First plot the points plot(BluePlaquesSub.ppp, pch=16, cex=0.5, main=&quot;Blue Plaques in Harrow&quot;) #now count the points in that fall in a 6 x 6 #grid overlaid across the windowBluePlaquesSub.ppp2&lt;-BluePlaquesSub.ppp %&gt;% BluePlaquesSub.ppp %&gt;% quadratcount(.,nx = 6, ny = 6)%&gt;% plot(., add=T, col=&quot;red&quot;) In our case here, want to know whether or not there is any kind of spatial patterning associated with the Blue Plaques in areas of London. If you recall from the lecture, this means comparing our observed distribution of points with a statistically likely (Complete Spatial Random) distibution, based on the Poisson distribution. Using the same quadratcount() function again (for the same sized grid) we can save the results into a table: #run the quadrat count Qcount &lt;- BluePlaquesSub.ppp %&gt;% quadratcount(.,nx = 6, ny = 6) %&gt;% as.data.frame() %&gt;% dplyr::count(Var1=Freq)%&gt;% dplyr::rename(Freqquadratcount=n) Check the data type in the first column — if it is factor, we will need to convert it to numeric Qcount %&gt;% summarise_all(class) ## Var1 Freqquadratcount ## 1 integer integer OK, so we now have a frequency table — next we need to calculate our expected values. The formula for calculating expected probabilities based on the Poisson distribution is: \\[Pr= (X =k) = \\frac{\\lambda^{k}e^{-\\lambda}}{k!}\\] where: x is the number of occurrences λ is the mean number of occurrences e is a constant- 2.718 sums &lt;- Qcount %&gt;% #calculate the total blue plaques (Var * Freq) mutate(total = Var1 * Freqquadratcount) %&gt;% dplyr::summarise(across(everything(), sum))%&gt;% dplyr::select(-Var1) lambda&lt;- Qcount%&gt;% #calculate lambda mutate(total = Var1 * Freqquadratcount)%&gt;% dplyr::summarise(across(everything(), sum)) %&gt;% mutate(lambda=total/Freqquadratcount) %&gt;% dplyr::select(lambda)%&gt;% pull(lambda) Calculate expected using the Poisson formula from above \\(k\\) is the number of blue plaques counted in a square and is found in the first column of our table… QCountTable &lt;- Qcount %&gt;% mutate(Pr=((lambda^Var1)*exp(-lambda))/factorial(Var1))%&gt;% #now calculate the expected counts based on our total number of plaques #and save them to the table mutate(Expected= (round(Pr * sums$Freqquadratcount, 0))) #Compare the frequency distributions of the observed and expected point patterns plot(c(1,5),c(0,14), type=&quot;n&quot;, xlab=&quot;Number of Blue Plaques (Red=Observed,Blue=Expected)&quot;, ylab=&quot;Frequency of Occurances&quot;) points(QCountTable$Freqquadratcount, col=&quot;Red&quot;, type=&quot;o&quot;, lwd=3) points(QCountTable$Expected, col=&quot;Blue&quot;, type=&quot;o&quot;, lwd=3) Comparing the observed and expected frequencies for our quadrant counts, we can observe that they both have higher frequency counts at the lower end — something reminiscent of a Poisson distribution. This could indicate that for this particular set of quadrants, our pattern is close to Complete Spatial Randomness (i.e. no clustering or dispersal of points). But how do we confirm this? To check for sure, we can use the quadrat.test() function, built into spatstat. This uses a Chi Squared test to compare the observed and expected frequencies for each quadrant (rather than for quadrant bins, as we have just computed above). A Chi-Squared test determines if there is an association between two categorical variables. The higher the Chi-Squared value, the greater the difference. If the p-value of our Chi-Squared test is &gt; 0.05, then we can reject a null hypothesis that says “there is no complete spatial randomness in our data” (think of a null-hypothesis as the opposite of a hypothesis that says our data exhibit complete spatial randomness). What we need to look for is a value for p &gt; 0.05. If our p-value is &gt; 0.05 then this indicates that we have CSR and there is no pattern in our points. If it is &lt; 0.05, this indicates that we do have clustering in our points. teststats &lt;- quadrat.test(BluePlaquesSub.ppp, nx = 6, ny = 6) plot(BluePlaquesSub.ppp,pch=16,cex=0.5, main=&quot;Blue Plaques in Harrow&quot;) plot(teststats, add=T, col = &quot;red&quot;) So we can see that the indications are there is no spatial patterning for Blue Plaques in Harrow — at least for this particular grid. Note the warning message — some of the observed counts are very small (0) and this may affect the accuracy of the quadrant test. Recall that the Poisson distribution only describes observed occurrances that are counted in integers — where our occurrences = 0 (i.e. not observed), this can be an issue. We also know that there are various other problems that might affect our quadrat analysis, such as the modifiable areal unit problem. In the new plot, we can see three figures for each quadrant. The top-left figure is the observed count of points; the top-right is the Poisson expected number of points; the bottom value is the residual value (also known as Pearson residual value), or (Observed - Expected) / Sqrt(Expected). This is the first mention of the mathematician Karl Pearson who founded the world’s first university statistics department here at UCL. Pearson was a eugenicist and the Unversity’s first Chair of Eugenics that was established on the request of Galton (who coined the term eugenics and Pearson studied under) for the residue of his estate. Throuhgout research you may encounter Pearson’s name as it is used to identify certain techniques, for example, Pearson’s product-moment coefficient (alternatively just product-moment coefficient). Where possible within this book I have removed references to Pearson, although as you will see later on some arguments in functions still require the value “pearson” and certain output messages default to include his name. UCL recently denamed spaces and buildings named after Pearson and Galton. 6.6.3 Try experimenting… Try running a quadrant analysis for different grid arrangements (2 x 2, 3 x 3, 10 x 10 etc.) — how does this affect your results? 6.6.4 Ripley’s K One way of getting around the limitations of quadrat analysis is to compare the observed distribution of points with the Poisson random model for a whole range of different distance radii. This is what Ripley’s K function computes. We can conduct a Ripley’s K test on our data very simply with the spatstat package using the kest() function. K &lt;- BluePlaquesSub.ppp %&gt;% Kest(., correction=&quot;border&quot;) %&gt;% plot() The plot for K has a number of elements that are worth explaining. First, the Kpois(r) line in Red is the theoretical value of K for each distance window (r) under a Poisson assumption of Complete Spatial Randomness. The Black line is the estimated values of K accounting for the effects of the edge of the study area. Where the value of K falls above the line, the data appear to be clustered at that distance. Where the value of K is below the line, the data are dispersed. From the graph, we can see that up until distances of around 1300 metres, Blue Plaques appear to be clustered in Harrow, however, at around 1500 m, the distribution appears random and then dispersed between about 1600 and 2100 metres. 6.6.5 Alternatives to Ripley’s K There are a number of alternative measures of spatial clustering which can be computed in spatstat such as the G and the L functions — I won’t go into them now, but if you are interested, you should delve into the following references: Bivand, R. S., Pebesma, E. J., &amp; Gómez-Rubio, V. (2008). “Applied spatial data analysis with R.” New York: Springer. Brundson, C., Comber, L., (2015) “An Introduction to R for Spatial Analysis &amp; Mapping”. Sage. https://research.csiro.au/software/wp-content/uploads/sites/6/2015/02/Rspatialcourse_CMIS_PDF-Standard.pdf 6.7 Density-based spatial clustering of applications with noise: DBSCAN Quadrat and Ripley’s K analysis are useful exploratory techniques for telling us if we have spatial clusters present in our point data, but they are not able to tell us WHERE in our area of interest the clusters are occurring. To discover this we need to use alternative techniques. One popular technique for discovering clusters in space (be this physical space or variable space) is DBSCAN. For the complete overview of the DBSCAN algorithm, read the original paper by Ester et al. (1996) or consult the wikipedia page library(raster) library(fpc) We will now carry out a DBSCAN analysis of blue plaques in my borough to see if there are any clusters present. #first check the coordinate reference system of the Harrow spatial polygon: st_geometry(BoroughMap) ## Geometry set for 33 features ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 503568.2 ymin: 155850.8 xmax: 561957.5 ymax: 200933.9 ## Projected CRS: OSGB 1936 / British National Grid ## First 5 geometries: ## MULTIPOLYGON (((516401.6 160201.8, 516407.3 160... ## MULTIPOLYGON (((535009.2 159504.7, 535005.5 159... ## MULTIPOLYGON (((540373.6 157530.4, 540361.2 157... ## MULTIPOLYGON (((521975.8 178100, 521967.7 17809... ## MULTIPOLYGON (((510253.5 182881.6, 510249.9 182... DBSCAN requires you to input two parameters: 1. Epsilon - this is the radius within which the algorithm with search for clusters 2. MinPts - this is the minimum number of points that should be considered a cluster Based on the results of the Ripley’s K analysis earlier, we can see that we are getting clustering up to a radius of around 1200m, with the largest bulge in the graph at around 700m. Therefore, 700m is probably a good place to start and we will begin by searching for clusters of at least 4 points… #first extract the points from the spatial points data frame BluePlaquesSubPoints &lt;- BluePlaquesSub %&gt;% coordinates(.)%&gt;% as.data.frame() #now run the dbscan analysis db &lt;- BluePlaquesSubPoints %&gt;% fpc::dbscan(.,eps = 700, MinPts = 4) #now plot the results plot(db, BluePlaquesSubPoints, main = &quot;DBSCAN Output&quot;, frame = F) plot(BoroughMap$geometry, add=T) You could also use kNNdistplot() from the dbscan pacakge to find a suitable eps value based on the ‘knee’ in the plot… # used to find suitable eps value based on the knee in plot # k is no of nearest neighbours used, use min points library(dbscan) BluePlaquesSubPoints%&gt;% dbscan::kNNdistplot(.,k=4) So the DBSCAN analysis shows that for these values of eps and MinPts there are three clusters in the area I am analysing. Try varying eps and MinPts to see what difference it makes to the output. Now of course the plot above is a little basic and doesn’t look very aesthetically pleasing. As this is R and R is brilliant, we can always produce a much nicer plot by extracting the useful information from the DBSCAN output and use ggplot2 to produce a much cooler map… library(ggplot2) Our new db object contains lots of info including the cluster each set of point coordinates belongs to, whether the point is a seed point or a border point etc. We can get a summary by just calling the object db ## dbscan Pts=40 MinPts=4 eps=700 ## 0 1 2 3 4 ## border 16 1 0 3 4 ## seed 0 6 8 1 1 ## total 16 7 8 4 5 If you open up the object in the environment window in RStudio, you will also see the various slots in the object, including cluster db$cluster ## [1] 0 3 0 1 4 0 1 0 4 1 0 2 1 1 2 0 0 0 0 2 1 3 0 0 0 0 4 3 4 2 0 0 4 3 0 2 2 2 ## [39] 2 1 We can now add this cluster membership info back into our dataframe BluePlaquesSubPoints&lt;- BluePlaquesSubPoints %&gt;% mutate(dbcluster=db$cluster) Next we are going to create some convex hull polygons to wrap around the points in our clusters. Use the ddply() function in the plyr package to get the convex hull coordinates from the cluster groups in our dataframe chulls &lt;- BluePlaquesSubPoints %&gt;% group_by(dbcluster) %&gt;% dplyr::mutate(hull = 1:n(), hull = factor(hull, chull(coords.x1, coords.x2)))%&gt;% arrange(hull) #chulls2 &lt;- ddply(BluePlaquesSubPoints, .(dbcluster), # function(df) df[chull(df$coords.x1, df$coords.x2), ]) As 0 isn’t actually a cluster (it’s all points that aren’t in a cluster) drop it from the dataframe chulls &lt;- chulls %&gt;% filter(dbcluster &gt;=1) Now create a ggplot2 object from our data dbplot &lt;- ggplot(data=BluePlaquesSubPoints, aes(coords.x1,coords.x2, colour=dbcluster, fill=dbcluster)) #add the points in dbplot &lt;- dbplot + geom_point() #now the convex hulls dbplot &lt;- dbplot + geom_polygon(data = chulls, aes(coords.x1,coords.x2, group=dbcluster), alpha = 0.5) #now plot, setting the coordinates to scale correctly and as a black and white plot #(just for the hell of it)... dbplot + theme_bw() + coord_equal() Now we are getting there, but wouldn’t it be better to add a basemap?! ###add a basemap ##First get the bbox in lat long for Harrow HarrowWGSbb &lt;- Harrow %&gt;% st_transform(., 4326)%&gt;% st_bbox() Now convert the basemap to British National Grid library(OpenStreetMap) basemap &lt;- OpenStreetMap::openmap(c(51.5549876,-0.4040502),c(51.6405356,-0.2671315), zoom=NULL, &quot;stamen-toner&quot;) # convert the basemap to British National Grid basemap_bng &lt;- openproj(basemap, projection=&quot;+init=epsg:27700&quot;) Now we can plot our fancy map with the clusters on… OpenStreetMap::autoplot.OpenStreetMap(basemap_bng) + geom_point(data=BluePlaquesSubPoints, aes(coords.x1,coords.x2, colour=dbcluster, fill=dbcluster)) + geom_polygon(data = chulls, aes(coords.x1,coords.x2, group=dbcluster, fill=dbcluster), alpha = 0.5) # if error with autoplot try # autoplot.OpenStreetMap(basemap_bng) 6.8 Point pattern analysis summary This is end of the point pattern analysis section of the practical. You have been introduced to the basics of Point Pattern Analysis examining the distribution of Blue Plaques in a London Borough. At this point, you may wish to try running similar analyses on different boroughs (or indeed the whole city) and playing with some of the outputs — although you will find that Ripley’s K will fall over very quickly if you try to run the analysis on that many points) This how you might make use of these techniques in another context or with different point data… 6.9 Analysing Spatial Autocorrelation with Moran’s I, LISA and friends In this section we are going to explore patterns of spatially referenced continuous observations using various measures of spatial autocorrelation. Spatial autocorrelation is a measure of similarity between nearby data. Check out the various references in the reading list for more information about the methods we will explore today. There are also useful links in the help file of the spdep package which we will be using here. 6.9.1 Data download Before we get any further, let’s get some ward boundaries read in to R — download LondonWardData from the London Data store and read it in… library(here) library(janitor) #read the ward data in LondonWards &lt;- st_read(here::here(&quot;prac6_data&quot;, &quot;LondonWards.shp&quot;)) ## Reading layer `LondonWards&#39; from data source ## `C:\\Users\\Andy\\OneDrive - University College London\\Teaching\\CASA0005\\2020_2021\\CASA0005repo\\prac6_data\\LondonWards.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 625 features and 77 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 503568.2 ymin: 155850.8 xmax: 561957.5 ymax: 200933.9 ## Projected CRS: OSGB 1936 / British National Grid LondonWardsMerged &lt;- st_read(here::here(&quot;prac6_data&quot;, &quot;statistical-gis-boundaries-london&quot;, &quot;statistical-gis-boundaries-london&quot;, &quot;ESRI&quot;, &quot;London_Ward_CityMerged.shp&quot;))%&gt;% st_transform(.,27700) ## Reading layer `London_Ward_CityMerged&#39; from data source ## `C:\\Users\\Andy\\OneDrive - University College London\\Teaching\\CASA0005\\2020_2021\\CASA0005repo\\prac6_data\\statistical-gis-boundaries-london\\statistical-gis-boundaries-london\\ESRI\\London_Ward_CityMerged.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 625 features and 7 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 503568.2 ymin: 155850.8 xmax: 561957.5 ymax: 200933.9 ## Projected CRS: OSGB 1936 / British National Grid WardData &lt;- read_csv(&quot;https://data.london.gov.uk/download/ward-profiles-and-atlas/772d2d64-e8c6-46cb-86f9-e52b4c7851bc/ward-profiles-excel-version.csv&quot;, locale = locale(encoding = &quot;latin1&quot;), na = c(&quot;NA&quot;, &quot;n/a&quot;)) %&gt;% clean_names() ## Rows: 660 Columns: 67 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (3): Ward name, Old code, New code ## dbl (64): Population - 2015, Children aged 0-15 - 2015, Working-age (16-64) ... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. LondonWardsMerged &lt;- LondonWardsMerged %&gt;% left_join(WardData, by = c(&quot;GSS_CODE&quot; = &quot;new_code&quot;))%&gt;% dplyr::distinct(GSS_CODE, .keep_all = T)%&gt;% dplyr::select(GSS_CODE, ward_name, average_gcse_capped_point_scores_2014) It’s probably projected correctly, but in case it isn’t give it a projection using the st_crs() function in the sf package #have a look to check that it&#39;s #in the right projection st_crs(LondonWardsMerged) ## Coordinate Reference System: ## User input: EPSG:27700 ## wkt: ## PROJCRS[&quot;OSGB 1936 / British National Grid&quot;, ## BASEGEOGCRS[&quot;OSGB 1936&quot;, ## DATUM[&quot;OSGB 1936&quot;, ## ELLIPSOID[&quot;Airy 1830&quot;,6377563.396,299.3249646, ## LENGTHUNIT[&quot;metre&quot;,1]]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## ID[&quot;EPSG&quot;,4277]], ## CONVERSION[&quot;British National Grid&quot;, ## METHOD[&quot;Transverse Mercator&quot;, ## ID[&quot;EPSG&quot;,9807]], ## PARAMETER[&quot;Latitude of natural origin&quot;,49, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8801]], ## PARAMETER[&quot;Longitude of natural origin&quot;,-2, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8802]], ## PARAMETER[&quot;Scale factor at natural origin&quot;,0.9996012717, ## SCALEUNIT[&quot;unity&quot;,1], ## ID[&quot;EPSG&quot;,8805]], ## PARAMETER[&quot;False easting&quot;,400000, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8806]], ## PARAMETER[&quot;False northing&quot;,-100000, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8807]]], ## CS[Cartesian,2], ## AXIS[&quot;(E)&quot;,east, ## ORDER[1], ## LENGTHUNIT[&quot;metre&quot;,1]], ## AXIS[&quot;(N)&quot;,north, ## ORDER[2], ## LENGTHUNIT[&quot;metre&quot;,1]], ## USAGE[ ## SCOPE[&quot;Engineering survey, topographic mapping.&quot;], ## AREA[&quot;United Kingdom (UK) - offshore to boundary of UKCS within 49°45&#39;N to 61°N and 9°W to 2°E; onshore Great Britain (England, Wales and Scotland). Isle of Man onshore.&quot;], ## BBOX[49.75,-9,61.01,2.01]], ## ID[&quot;EPSG&quot;,27700]] tmap_mode(&quot;view&quot;) tm_shape(LondonWardsMerged) + tm_polygons(col = NA, alpha = 0.5) + tm_shape(BluePlaques) + tm_dots(col = &quot;blue&quot;) 6.9.2 Data cleaning Ah yes, we might need to lose the blue plaques that fall outside of London summary(BluePlaques) ## id inscription geometry ## Min. : 1.0 Length:2812 POINT :2812 ## 1st Qu.: 711.8 Class :character epsg:27700 : 0 ## Median : 6089.0 Mode :character +proj=tmer...: 0 ## Mean :10622.0 ## 3rd Qu.:10358.2 ## Max. :49190.0 BluePlaquesSub &lt;- BluePlaques[LondonWardsMerged,] tm_shape(LondonWardsMerged) + tm_polygons(col = NA, alpha = 0.5) + tm_shape(BluePlaquesSub) + tm_dots(col = &quot;blue&quot;) 6.9.3 Data manipulation The measures of spatial autocorrelation that we will be using require continuous observations (counts of blue plaques, average GCSE scores, average incomes etc.) to be spatially referenced (i.e. attached to a spatial unit like a ward or a borough). The file you have already has the various obervations associated with the London Ward data file already attached to it, but let’s continue with our blue plaques example for now. To create a continuous observation from the blue plaques data we need to count all of the blue plaques that fall within each Ward in the City. Luckily, we can do this using the st_join() function from the sf package. library(sf) points_sf_joined &lt;- LondonWardsMerged%&gt;% st_join(BluePlaquesSub)%&gt;% add_count(ward_name)%&gt;% janitor::clean_names()%&gt;% #calculate area mutate(area=st_area(.))%&gt;% #then density of the points per ward mutate(density=n/area)%&gt;% #select density and some other variables dplyr::select(density, ward_name, gss_code, n, average_gcse_capped_point_scores_2014) How about a quick choropleth map to see how we are getting on… points_sf_joined&lt;- points_sf_joined %&gt;% group_by(gss_code) %&gt;% summarise(density = first(density), wardname= first(ward_name), plaquecount= first(n)) tm_shape(points_sf_joined) + tm_polygons(&quot;density&quot;, style=&quot;jenks&quot;, palette=&quot;PuOr&quot;, midpoint=NA, popup.vars=c(&quot;wardname&quot;, &quot;density&quot;), title=&quot;Blue Plaque Density&quot;) So, from the map, it looks as though we might have some clustering of blue plaques in the centre of London so let’s check this with Moran’s I and some other statistics. Before being able to calculate Moran’s I and any similar statistics, we need to first define a \\(W_{ij}\\) spatial weights matrix library(spdep) First calculate the centroids of all Wards in London #First calculate the centroids of all Wards in London coordsW &lt;- points_sf_joined%&gt;% st_centroid()%&gt;% st_geometry() plot(coordsW,axes=TRUE) Now we need to generate a spatial weights matrix (remember from the lecture). We’ll start with a simple binary matrix of queen’s case neighbours (otherwise known as Contiguity edges corners). Thie method means that polygons with a shared edge or a corner will be included in computations for the target polygon… #create a neighbours list LWard_nb &lt;- points_sf_joined %&gt;% poly2nb(., queen=T) #plot them plot(LWard_nb, st_geometry(coordsW), col=&quot;red&quot;) #add a map underneath plot(points_sf_joined$geometry, add=T) #create a spatial weights object from these weights Lward.lw &lt;- LWard_nb %&gt;% nb2listw(., style=&quot;C&quot;) head(Lward.lw$neighbours) ## [[1]] ## [1] 6 7 10 462 468 482 ## ## [[2]] ## [1] 5 8 9 11 12 13 16 ## ## [[3]] ## [1] 10 11 12 15 480 483 ## ## [[4]] ## [1] 17 281 291 470 473 481 ## ## [[5]] ## [1] 2 9 16 281 283 290 ## ## [[6]] ## [1] 1 7 8 10 11 14 6.9.4 Spatial autocorrelation Now we have defined our \\(W_{ij}\\) matrix, we can calculate the Moran’s I and other associated statistics Moran’s I test tells us whether we have clustered values (close to 1) or dispersed values (close to -1), we will calculate for the densities rather than raw values I_LWard_Global_Density &lt;- points_sf_joined %&gt;% pull(density) %&gt;% as.vector()%&gt;% moran.test(., Lward.lw) I_LWard_Global_Density ## ## Moran I test under randomisation ## ## data: . ## weights: Lward.lw ## ## Moran I statistic standard deviate = 29.826, p-value &lt; 2.2e-16 ## alternative hypothesis: greater ## sample estimates: ## Moran I statistic Expectation Variance ## 0.6634963783 -0.0016025641 0.0004972692 Geary’s C as well..? This tells us whether similar values or dissimilar values are clusering C_LWard_Global_Density &lt;- points_sf_joined %&gt;% pull(density) %&gt;% as.vector()%&gt;% geary.test(., Lward.lw) C_LWard_Global_Density ## ## Geary C test under randomisation ## ## data: . ## weights: Lward.lw ## ## Geary C statistic standard deviate = 8.0906, p-value = 2.969e-16 ## alternative hypothesis: Expectation greater than statistic ## sample estimates: ## Geary C statistic Expectation Variance ## 0.4149148 1.0000000 0.0052297 Getis Ord General G…? This tells us whether high or low values are clustering. If G &gt; Expected = High values clustering; if G &lt; expected = low values clustering G_LWard_Global_Density &lt;- points_sf_joined %&gt;% pull(density) %&gt;% as.vector()%&gt;% globalG.test(., Lward.lw) G_LWard_Global_Density ## ## Getis-Ord global G statistic ## ## data: . ## weights: Lward.lw ## ## standard deviate = 29.029, p-value &lt; 2.2e-16 ## alternative hypothesis: greater ## sample estimates: ## Global G statistic Expectation Variance ## 1.007037e-02 1.602564e-03 8.508962e-08 So the global statistics are indicating that we have spatial autocorrelation of Blue Plaques in London: The Moran’s I statistic = 0.67 (remember 1 = clustered, 0 = no pattern, -1 = dispersed) which shows that we have some distinctive clustering The Geary’s C statistic = 0.41 (remember Geary’s C falls between 0 and 2; 1 means no spatial autocorrelation, &lt;1 - positive spatial autocorrelation or similar values clustering, &gt;1 - negative spatial autocorreation or dissimilar values clustering) which shows that similar values are clustering The General G statistic = G &gt; expected, so high values are tending to cluster. We can now also calculate local versions of the Moran’s I statistic (for each Ward) and a Getis Ord \\(G_{i}^{*}\\) statistic to see where we have hot-spots… #use the localmoran function to generate I for each ward in the city I_LWard_Local_count &lt;- points_sf_joined %&gt;% pull(plaquecount) %&gt;% as.vector()%&gt;% localmoran(., Lward.lw)%&gt;% as_tibble() I_LWard_Local_Density &lt;- points_sf_joined %&gt;% pull(density) %&gt;% as.vector()%&gt;% localmoran(., Lward.lw)%&gt;% as_tibble() #what does the output (the localMoran object) look like? slice_head(I_LWard_Local_Density, n=5) ## # A tibble: 5 × 5 ## Ii E.Ii Var.Ii Z.Ii `Pr(z != E(Ii))` ## &lt;localmrn&gt; &lt;localmrn&gt; &lt;localmrn&gt; &lt;localmrn&gt; &lt;localmrn&gt; ## 1 0.08211560 -0.0001279242 0.01346824 0.7086738 0.4785269 ## 2 0.10367896 -0.0001544145 0.01623084 0.8150167 0.4150627 ## 3 0.08390459 -0.0001282188 0.01349925 0.7232592 0.4695206 ## 4 0.10859594 -0.0001776588 0.01870353 0.7953561 0.4264064 ## 5 0.10653209 -0.0001782914 0.01877012 0.7788846 0.4360477 There are 5 columns of data. We want to copy some of the columns (the I score (column 1) and the z-score standard deviation (column 4)) back into the LondonWards spatialPolygonsDataframe points_sf_joined &lt;- points_sf_joined %&gt;% mutate(plaque_count_I = as.numeric(I_LWard_Local_count$Ii))%&gt;% mutate(plaque_count_Iz =as.numeric(I_LWard_Local_count$Z.Ii))%&gt;% mutate(density_I =as.numeric(I_LWard_Local_Density$Ii))%&gt;% mutate(density_Iz =as.numeric(I_LWard_Local_Density$Z.Ii)) 6.9.5 Mapping outputs No we can plot a map of the local Moran’s I outputs… We’ll set the breaks manually based on the rule that data points &gt;2.58 or &lt;-2.58 standard deviations away from the mean are significant at the 99% level (&lt;1% chance that autocorrelation not present); &gt;1.96 - &lt;2.58 or &lt;-1.96 to &gt;-2.58 standard deviations are significant at the 95% level (&lt;5% change that autocorrelation not present). &gt;1.65 = 90% etc. breaks1&lt;-c(-1000,-2.58,-1.96,-1.65,1.65,1.96,2.58,1000) Now create a new diverging colour brewer palette and reverse the order using rev() (reverse) so higher values correspond to red MoranColours&lt;- rev(brewer.pal(8, &quot;RdGy&quot;)) Plot on an interactive map tm_shape(points_sf_joined) + tm_polygons(&quot;plaque_count_Iz&quot;, style=&quot;fixed&quot;, breaks=breaks1, palette=MoranColours, midpoint=NA, title=&quot;Local Moran&#39;s I, Blue Plaques in London&quot;) This map shows some areas in the centre of London that have relatively high scores, indicating areas with lots of blue plaques neighbouring other areas with lots of blue plaques. What about the Getis Ord \\(G_{i}^{*}\\) statisic for hot and cold spots? Gi_LWard_Local_Density &lt;- points_sf_joined %&gt;% pull(density) %&gt;% as.vector()%&gt;% localG(., Lward.lw) head(Gi_LWard_Local_Density) ## [1] -0.7086738 -0.8150167 -0.7232592 -0.7953561 -0.7788846 -0.7296942 Check the help file (?localG) to see what a localG object looks like - it is a bit different from a localMoran object as it only contains just a single value - the z-score (standardised value relating to whether high values or low values are clustering together) And map the outputs… points_sf_joined &lt;- points_sf_joined %&gt;% mutate(density_G = as.numeric(Gi_LWard_Local_Density)) And map the outputs… GIColours&lt;- rev(brewer.pal(8, &quot;RdBu&quot;)) #now plot on an interactive map tm_shape(points_sf_joined) + tm_polygons(&quot;density_G&quot;, style=&quot;fixed&quot;, breaks=breaks1, palette=GIColours, midpoint=NA, title=&quot;Gi*, Blue Plaques in London&quot;) 6.9.6 Other variables The local Moran’s I and \\(G_{i}^{*}\\) statistics for wards clearly show that the density of blue plaques in the centre of the city exhibits strong (and postitive) spatial autocorrelation, but neither of these maps are very interesting. Why not try some alternative variables and see what patterns emerge… here I’m going to have a look at Average GSCE scores… #use head to see what other variables are in the data file slice_head(points_sf_joined, n=2) ## Simple feature collection with 2 features and 9 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 543417.3 ymin: 183674.3 xmax: 549991.5 ymax: 185809.7 ## Projected CRS: OSGB 1936 / British National Grid ## # A tibble: 2 × 10 ## gss_code density wardname plaquecount geometry plaque_count_I ## &lt;chr&gt; [1/m^2] &lt;chr&gt; &lt;int&gt; &lt;POLYGON [m]&gt; &lt;dbl&gt; ## 1 E050000… 7.79e-7 Barking… 1 ((543595.5 184832.8, 543… 0.0551 ## 2 E050000… 7.33e-7 Barking… 1 ((547932.4 184916.6, 547… 0.0643 ## # … with 4 more variables: plaque_count_Iz &lt;dbl&gt;, density_I &lt;dbl&gt;, ## # density_Iz &lt;dbl&gt;, density_G &lt;dbl&gt; Or print out the class of each column like we did in week 2, although we need to drop the geometry. Datatypelist &lt;- LondonWardsMerged %&gt;% st_drop_geometry()%&gt;% summarise_all(class) %&gt;% pivot_longer(everything(), names_to=&quot;All_variables&quot;, values_to=&quot;Variable_class&quot;) Datatypelist ## # A tibble: 3 × 2 ## All_variables Variable_class ## &lt;chr&gt; &lt;chr&gt; ## 1 GSS_CODE character ## 2 ward_name character ## 3 average_gcse_capped_point_scores_2014 numeric I_LWard_Local_GCSE &lt;- LondonWardsMerged %&gt;% arrange(GSS_CODE)%&gt;% pull(average_gcse_capped_point_scores_2014) %&gt;% as.vector()%&gt;% localmoran(., Lward.lw)%&gt;% as_tibble() points_sf_joined &lt;- points_sf_joined %&gt;% arrange(gss_code)%&gt;% mutate(GCSE_LocIz = as.numeric(I_LWard_Local_GCSE$Z.Ii)) tm_shape(points_sf_joined) + tm_polygons(&quot;GCSE_LocIz&quot;, style=&quot;fixed&quot;, breaks=breaks1, palette=MoranColours, midpoint=NA, title=&quot;Local Moran&#39;s I, GCSE Scores&quot;) Now the Gi* statistic to look at clusters of high and low scores… G_LWard_Local_GCSE &lt;- LondonWardsMerged %&gt;% dplyr::arrange(GSS_CODE)%&gt;% dplyr::pull(average_gcse_capped_point_scores_2014) %&gt;% as.vector()%&gt;% localG(., Lward.lw) points_sf_joined &lt;- points_sf_joined %&gt;% dplyr::arrange(gss_code)%&gt;% dplyr::mutate(GCSE_LocGiz = as.numeric(G_LWard_Local_GCSE)) tm_shape(points_sf_joined) + tm_polygons(&quot;GCSE_LocGiz&quot;, style=&quot;fixed&quot;, breaks=breaks1, palette=GIColours, midpoint=NA, title=&quot;Gi*, GCSE Scores&quot;) So this is the end of the practical. Hopefully you have learned a lot about the different methods we can employ to analyse patterns in spatial data. This practical was deliberately designed as a walk through, but this may have given you ideas about where you could perhaps take these techniques in your coursework if this is something you wanted to explore further with different data or in different contexts. 6.10 Extension Already a pro with point pattern and spatial autocorrelation analysis? Then try the following out: We have used sp objects in this practical (because I wrote it before sf became the defacto spatial data type in R). Can you convert some of this so it works withsf? Could you automate any of the functions so that you could quickly produce maps of any of the variables in the LondonWards dataset? Could you get these outputs into a faceted ggplot2 map? Make an interactive map with selectable layers for Gi* and Moran’s I like we did in the [Maps with extra features] or Advanced interactive map sections… 6.11 Feedback Was anything that we explained unclear this week or was something really clear…let us know using the feedback form. It’s anonymous and we’ll use the responses to clear any issues up in the future / adapt the material. "],["advanced-raster-analysis.html", "Chapter 7 Advanced raster analysis 7.1 Learning objectives 7.2 Homework 7.3 Recommended listening  7.4 Introduction 7.5 .gitignore 7.6 Data 7.7 Processing raster data 7.8 Data exploration 7.9 Basic raster calculations 7.10 Advanced raster calculations 7.11 Calucating urban area from Landsat data 7.12 Urban area and temperature relationship 7.13 Statistical summary 7.14 Considerations 7.15 Extension 7.16 References 7.17 Remote sensing background (optional) 7.18 Feedback", " Chapter 7 Advanced raster analysis 7.1 Learning objectives By the end of this practical you should be able to: Explain and execute appropraite pre-proessing steps of raster data Replicate published methodologies using raster data Design new R code to undertake further analysis 7.2 Homework Outside of our schedulded sessions you should be doing around 12 hours of extra study per week. Feel free to follow your own GIS interests, but good places to start include the following: Assignment From weeks 6-9, learn and practice analysis from the course and identify appropriate techniques (from wider research) that might be applicable/relevant to your data. Conduct an extensive methodological review – this could include analysis from within academic literature and/or government departments (or any reputable source). Reading This week: Appendix “Raster operations in R” from Intro to GIS and Spatial Analysis by Gimond (2019) Raster manipulation” from Spatial data science by Hijmans (2016). This last one is another tutoiral — it seems there aren’t any decent free raster textbook chapters, let me know if you find one. Remember this is just a starting point, explore the reading list, practical and lecture for more ideas. 7.3 Recommended listening  Some of these practicals are long, take regular breaks and have a listen to some of our fav tunes each week. Andy Hamilton. Adam Straight outa somewhere near Grantham - this week it has to be the Sleaford Mods! 7.4 Introduction Within this practical we are going to be using data from the Landsat satellite series provided for free by the United States Geological Survey (USGS) to replicate published methods. Landsat imagery is the longest free temporal image repository of consistent medium resolution data. It collects data at each point on Earth each every 16 days (temporal resolution) in a raster grid composed of 30 by 30 m cells (spatial resolution). Geographical analysis and concepts are becoming ever more entwined with remote sensing and Earth observation. Back when I was an undergraduate there was specific software for undertaking certain analysis, now you can basically use any GIS. I see remote sensing as the science behind collecting the data with spatial data analysis then taking that data and providing meaning. So whilst i’ll give a background to Landsat data and remote sensing, this practical will focus on more advanced methods for analysing and extracting meaning from raster data. 7.5 .gitignore If you are using Git with your project and have large data it’s best to set up a .gitignore file. This file tells git to ignore certain files so they aren’t in your local repository that is then pushed to GitHub. If you try and push large files to GitHub you will get an error and could run into lots of problems, trust me, i’ve been there. Look at my .gitignore for this repository and you will notice: prac7_data/Lsatdata/* prac7_data/exampleGoogleDrivedata/* prac7_data/Manchester_boundary/* This means igore all files within these folders, all is denoted by the *. The .gitignore has to be in your main project folder, if you have made a a git repo for your project then you should have a .gitignore so all you have to do is open it and add the folder or file paths you wish to ignore. GitHub has a maximum file upload size of 50mb….image credit reddit r/ProgrammerHumor 7.5.1 Remote sensing background (required) Landsat is raster data It has pixels of 30 by 30m collected every 16 days with global coverage As humans we see in the visible part of the electromagnetic spectrum (red-green-blue) Landsat takes samples in these bands and several more to make a spectral sigature for each pixel (see image below) Each band is provided as a seperate .TIFF raster layer Later on we will compute temperature from the Landsat data, whilst i refer to and explain each varaiable created don’t get overwhelmed by it, take away the process of loading and manipulating raster data in R to extract meaningful information. An optional remote sensing background containing additional information can be found at the end of this practical should you wish to explore this further. 7.6 Data 7.6.1 Shapefile The shapefile of Manchester is available from the data folder for this week on GitHub. To download this consult How to download data and files from GitHub, i’d used Option 1. 7.6.2 Raster data (Landsat) To access the Landsat data we will use in this practical you can either: Sign up for a free account at: https://earthexplorer.usgs.gov/. Use the Landsat data provided on Moodle — this will be available only if the earth explorer website is down (e.g. in the case of US government shutdowns) To download the data: Search for Manchester in the address/place box and select it. Select the date range between the 12/5/2019 and 14/5/2019 — it’s a US website so check the dates are correct. Click dataset and select Landsat, then Landsat Collection 1 Level-1, check Landsat 8 (level 2 is surface reflectance — see Remote sensing background (optional) Click results, there should be one image, download it..it might take a while Landsat data comes zipped twice as a .tar.gz. Use 7Zip or another file extractor, extract it once to get to a .tar then extract again and files should appear. Or the code below will also let you extract Landsat data… 7.6.2.1 Alternative raster data Occasionally the earth explorer website can go down for maintenance or during government shutdowns. If possible I strongly advise you to learn how to use its interface as multiple other data providers have similar interfaces. GitHub also place a strict size limit on files of 100MB. However, in order to account for situations like this I’ve placed the zipped file on GoogleDrive and will demonstrate how to access this from R using the new googledrive package. This could be a great option for you to gain reproducibility points if you have large files that you can’t upload to GitHub. In GoogleDrive you need to ensure your file is shareable with others — right click on it &gt; Share &gt; then copy the link. I have done this for my file in the example below, but if you try and replicate this, make sure you’ve done it otherwise it might not work when other people try and run your code, as they won’t have access to the file on your GoogleDrive. Depending on your internet speed this example might take some time… Be sure to change the path to your practical 7 folder but make sure you include the filename within it and set overwrite to T (or TRUE) if you are going to run this again. library(&quot;googledrive&quot;) o&lt;-drive_download(&quot;https://drive.google.com/open?id=1MV7ym_LW3Pz3MxHrk-qErN1c_nR0NWXy&quot;, path=&quot;prac7_data/exampleGoogleDrivedata/LC08_L1TP_203023_20190513_20190521_01_T1.tar.gz&quot;, overwrite=T) Next we need to uncompress and unzip the file with untar(), first list the files that end in the extension .gz then pass that to untar with the pipe %&gt;% remember this basically means after this function… then…do this other function with that data library(tidyverse) library(fs) library(stringr) library(utils) listfiles&lt;-dir_info(here::here(&quot;prac7_data&quot;, &quot;exampleGoogleDrivedata&quot;)) %&gt;% dplyr::filter(str_detect(path, &quot;.gz&quot;)) %&gt;% dplyr::select(path)%&gt;% dplyr::pull()%&gt;% #print out the .gz file print()%&gt;% as.character()%&gt;% utils::untar(exdir=here::here(&quot;prac7_data&quot;, &quot;exampleGoogleDrivedata&quot;)) 7.7 Processing raster data 7.7.1 Loading Today, we are going to be using a Landsat 8 raster of Manchester. The vector shape file for Manchester has been taken from an ESRI repository. Let’s load the majority of packages we will need here. ## listing all possible libraries that all presenters may need following each practical library(sp) library(raster) library(rgeos) library(rgdal) library(rasterVis) library(ggplot2) Now let’s list all our Landsat bands except band 8 (i’ll explain why next) along with our study area shapefile. Each band is a seperate .TIF file. library(stringr) library(raster) library(fs) library(sf) library(tidyverse) # List your raster files excluding band 8 using the patter argument listlandsat&lt;-dir_info(here::here(&quot;prac7_data&quot;, &quot;Lsatdata&quot;))%&gt;% dplyr::filter(str_detect(path, &quot;[B123456790].TIF&quot;)) %&gt;% dplyr::select(path)%&gt;% pull()%&gt;% as.character()%&gt;% # Load our raster layers into a stack stack() # Load the manchester boundary manchester_boundary &lt;- st_read(here::here(&quot;prac7_data&quot;, &quot;Manchester_boundary&quot;, &quot;manchester_boundary.shp&quot;)) ## Reading layer `manchester_boundary&#39; from data source ## `C:\\Users\\Andy\\OneDrive - University College London\\Teaching\\CASA0005\\2020_2021\\CASA0005repo\\prac7_data\\Manchester_boundary\\manchester_boundary.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 1 feature and 5 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 540926.6 ymin: 5917117 xmax: 558663.4 ymax: 5933117 ## Projected CRS: WGS 84 / UTM zone 30N #check they have the same Coordinate Reference System (CRS) crs(manchester_boundary) ## Coordinate Reference System: ## Deprecated Proj.4 representation: ## +proj=utm +zone=30 +datum=WGS84 +units=m +no_defs ## WKT2 2019 representation: ## PROJCRS[&quot;WGS 84 / UTM zone 30N&quot;, ## BASEGEOGCRS[&quot;WGS 84&quot;, ## DATUM[&quot;World Geodetic System 1984&quot;, ## ELLIPSOID[&quot;WGS 84&quot;,6378137,298.257223563, ## LENGTHUNIT[&quot;metre&quot;,1]]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## ID[&quot;EPSG&quot;,4326]], ## CONVERSION[&quot;UTM zone 30N&quot;, ## METHOD[&quot;Transverse Mercator&quot;, ## ID[&quot;EPSG&quot;,9807]], ## PARAMETER[&quot;Latitude of natural origin&quot;,0, ## ANGLEUNIT[&quot;Degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8801]], ## PARAMETER[&quot;Longitude of natural origin&quot;,-3, ## ANGLEUNIT[&quot;Degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8802]], ## PARAMETER[&quot;Scale factor at natural origin&quot;,0.9996, ## SCALEUNIT[&quot;unity&quot;,1], ## ID[&quot;EPSG&quot;,8805]], ## PARAMETER[&quot;False easting&quot;,500000, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8806]], ## PARAMETER[&quot;False northing&quot;,0, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8807]]], ## CS[Cartesian,2], ## AXIS[&quot;(E)&quot;,east, ## ORDER[1], ## LENGTHUNIT[&quot;metre&quot;,1]], ## AXIS[&quot;(N)&quot;,north, ## ORDER[2], ## LENGTHUNIT[&quot;metre&quot;,1]], ## ID[&quot;EPSG&quot;,32630]] crs(listlandsat) ## Coordinate Reference System: ## Deprecated Proj.4 representation: ## +proj=utm +zone=30 +datum=WGS84 +units=m +no_defs ## WKT2 2019 representation: ## PROJCRS[&quot;WGS 84 / UTM zone 30N&quot;, ## BASEGEOGCRS[&quot;WGS 84&quot;, ## DATUM[&quot;World Geodetic System 1984&quot;, ## ELLIPSOID[&quot;WGS 84&quot;,6378137,298.257223563, ## LENGTHUNIT[&quot;metre&quot;,1]]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## ID[&quot;EPSG&quot;,4326]], ## CONVERSION[&quot;UTM zone 30N&quot;, ## METHOD[&quot;Transverse Mercator&quot;, ## ID[&quot;EPSG&quot;,9807]], ## PARAMETER[&quot;Latitude of natural origin&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8801]], ## PARAMETER[&quot;Longitude of natural origin&quot;,-3, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8802]], ## PARAMETER[&quot;Scale factor at natural origin&quot;,0.9996, ## SCALEUNIT[&quot;unity&quot;,1], ## ID[&quot;EPSG&quot;,8805]], ## PARAMETER[&quot;False easting&quot;,500000, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8806]], ## PARAMETER[&quot;False northing&quot;,0, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8807]]], ## CS[Cartesian,2], ## AXIS[&quot;(E)&quot;,east, ## ORDER[1], ## LENGTHUNIT[&quot;metre&quot;,1]], ## AXIS[&quot;(N)&quot;,north, ## ORDER[2], ## LENGTHUNIT[&quot;metre&quot;,1]], ## USAGE[ ## SCOPE[&quot;Engineering survey, topographic mapping.&quot;], ## AREA[&quot;Between 6°W and 0°W, northern hemisphere between equator and 84°N, onshore and offshore. Algeria. Burkina Faso. Côte&#39; Ivoire (Ivory Coast). Faroe Islands - offshore. France. Ghana. Gibraltar. Ireland - offshore Irish Sea. Mali. Mauritania. Morocco. Spain. United Kingdom (UK).&quot;], ## BBOX[0,-6,84,0]], ## ID[&quot;EPSG&quot;,32630]] 7.7.2 Resampling There is an error with this dataset as band 8 does not fully align with the extent of the other raster layers. There are several ways to fix this, but in this tutorial we will resample the band 8 layer with the extent of band 1. First, read in the band 8 and store it as a raster. # get band 8 b8list&lt;-dir_info(here::here(&quot;prac7_data&quot;, &quot;Lsatdata&quot;))%&gt;% dplyr::filter(str_detect(path, &quot;[B8].tif&quot;)) %&gt;% dplyr::select(path)%&gt;% pull()%&gt;% as.character()%&gt;% raster() Then, resample() and write out the new layer, resampling takes awhile, so please be patient or find my output on GitHub. ## ngb is a nearest neighbour sampling method b8correct &lt;- b8list%&gt;% resample(., listlandsat$LC08_L1TP_203023_20190513_20190521_01_T1_B1, method = &quot;ngb&quot;) %&gt;% # Write out the raster writeRaster(.,str_c(here::here(&quot;prac7_data&quot;, &quot;Lsatdata&quot;), names(b8list), sep=&quot;/&quot;), format=&#39;GTiff&#39;, overwrite=TRUE) Load band 8 and add it to our raster stack library(fs) b8backin&lt;-dir_info(here::here(&quot;prac8_data&quot;, &quot;Lsatdata&quot;))%&gt;% dplyr::filter(path == &quot;C:/Users/Andy/OneDrive - University College London/Teaching/CASA0005/2020_2021/CASA0005repo/prac8_data/Lsatdata/LC08_L1TP_203023_20190513_20190521_01_T1_B8.tif&quot;) %&gt;% dplyr::select(path)%&gt;% pull()%&gt;% as.character()%&gt;% raster() listlandsat &lt;- listlandsat %&gt;% addLayer(., b8backin) We can compare it to see if both rasters have the same extent, number of rows and columns, projection, resolution and origin raster::compareRaster(listlandsat$LC08_L1TP_203023_20190513_20190521_01_T1_B1, listlandsat$LC08_L1TP_203023_20190513_20190521_01_T1_B8) ## [1] TRUE 7.7.3 Clipping Our raster is currently the size of the scene which satellite data is distributed in, to clip it to our study area it’s best to first crop it to the extent of the shapefile and then mask it as we have done in previous practicals… lsatmask &lt;- listlandsat %&gt;% # now crop our temp data to the extent crop(.,manchester_boundary)%&gt;% mask(., manchester_boundary) If all we wanted to do was clip our data, we could now change our filenames in the raster stack and write the .TIFF files out again… # add mask to the filenames within the raster stack names(lsatmask) &lt;- names(lsatmask)%&gt;% str_c(., &quot;mask&quot;, sep=&quot;_&quot;) # I need to write mine out in another location outputfilenames &lt;- str_c(&quot;prac7_data/Lsatdata/&quot;, &quot;mask/&quot;, names(lsatmask) ,sep=&quot;&quot;) In the first line of code i’m taking the original names of the raster layers and adding “mask” to the end of them. This is done using str_c() from the stringr package and the arguments names(lsatmask): original raster layer names \"mask\": what i want to add to the names sep=\"\": how the names and “mask” should be seperated — “” means no spaces As i can’t upload my Landsat files to GitHub i’m storing them in a folder that is not linked (remember this is all sotred on GitHub) – so you won’t find prac7_data/Lsatdata on there. If you want to store your clipped Landsat files in your project directory just use: lsatmask %&gt;% writeRaster(., names(lsatmask), bylayer=TRUE, format=&#39;raster&#39;, overwrite=TRUE) For me though it’s: lsatmask %&gt;% writeRaster(., outputfilenames, bylayer=TRUE, format=&#39;raster&#39;, overwrite=TRUE) Here i write out each raster layer individually though specifying bylayer=TRUE. 7.8 Data exploration 7.8.1 More loading and manipulating For the next stage of analysis we are only interested in bands 1-7, we can either load them back in from the files we just saved or take them directly from the original raster stack. # either read them back in from the saved file: manc_files&lt;-dir_info(here::here(&quot;prac7_data&quot;, &quot;Lsatdata&quot;, &quot;mask&quot;)) %&gt;% dplyr::filter(str_detect(path, &quot;[B1234567]_mask.grd&quot;)) %&gt;% dplyr::filter(str_detect(path, &quot;B11&quot;, negate=TRUE))%&gt;% dplyr::select(path)%&gt;% pull()%&gt;% stack() # or extract them from the original stack manc&lt;-stack(lsatmask$LC08_L1TP_203023_20190513_20190521_01_T1_B1_mask, lsatmask$LC08_L1TP_203023_20190513_20190521_01_T1_B2_mask, lsatmask$LC08_L1TP_203023_20190513_20190521_01_T1_B3_mask, lsatmask$LC08_L1TP_203023_20190513_20190521_01_T1_B4_mask, lsatmask$LC08_L1TP_203023_20190513_20190521_01_T1_B5_mask, lsatmask$LC08_L1TP_203023_20190513_20190521_01_T1_B6_mask, lsatmask$LC08_L1TP_203023_20190513_20190521_01_T1_B7_mask) # Name the Bands based on where they sample the electromagentic spectrum names(manc) &lt;- c(&#39;ultra-blue&#39;, &#39;blue&#39;, &#39;green&#39;, &#39;red&#39;, &#39;NIR&#39;, &#39;SWIR1&#39;, &#39;SWIR2&#39;) If you want to extract specific information from a raster stack use: crs(manc) # projection extent(manc) # extent ncell(manc) # number of cells dim(manc) # number of rows, columns, layers nlayers(manc) # number of layers res(manc) # xres, yres 7.8.2 Plotting data Let’s actually have a look at our raster data, first in true colour (how humans see the world) and then false colour composites (using any other bands but not the combination of red, green and blue). # true colour composite manc_rgb &lt;- stack(manc$red, manc$green, manc$blue) # false colour composite manc_false &lt;- stack(manc$NIR, manc$red, manc$green) manc_rgb %&gt;% plotRGB(.,axes=TRUE, stretch=&quot;lin&quot;) manc_false %&gt;% plotRGB(.,axes=TRUE, stretch=&quot;lin&quot;) 7.8.3 Data similarity What if you wanted to look at signle bands and also check the similarity between bands? # Looking at single bands plot(manc$SWIR2) ## How are these bands different? #set the plot window size (2 by 2) par(mfrow = c(2,2)) #plot the bands plot(manc$blue, main = &quot;Blue&quot;) plot(manc$green, main = &quot;Green&quot;) plot(manc$red, main = &quot;Red&quot;) plot(manc$NIR, main = &quot;NIR&quot;) ## Look at the stats of these bands pairs(manc[[1:7]]) ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter ## Warning in graphics::par(usr): argument 1 does not name a graphical parameter Low statistical significance means that the bands are sufficiently different enough in their wavelength reflectance to show different things in the image. We can also make this look a bit nicer with ggplot2 and GGally library(ggplot2) library(GGally) manc %&gt;% as.data.frame(., na.rm=TRUE)%&gt;% sample_n(., 100)%&gt;% ggpairs(.,axisLabels=&quot;none&quot;) You can do much more using GGally have a look at the great documentation 7.9 Basic raster calculations Now we will move on to some basic advanced raster analysis to compute temperature from this raster data. To do so we need to generate additional raster layers, the first of which is NDVI 7.9.1 NDVI Live green vegetation can be represented with the NIR and Red Bands through the normalised difference vegetation index (NDVI) as chlorophyll reflects in the NIR wavelength, but absorbs in the Red wavelength. \\[NDVI= \\frac{NIR-Red}{NIR+Red}\\] 7.9.2 NDVI function One of the great strengths of R is that is lets users define their own functions. Here we will practice writing a couple of basic functions to process some of the data we have been working with. One of the benefits of a function is that it generalises some set of operations that can then be repeated over and again on different data… the structure of a function in R is given below: myfunction &lt;- function(arg1, arg2, ... ){ statements return(object) } We can use NDVI as an example… Let’s make a function called NDVIfun NDVIfun &lt;- function(NIR, Red) { NDVI &lt;- (NIR - Red) / (NIR + Red) return(NDVI) } Here we have said our function needs two arguments NIR and Red, the next line calcualtes NDVI based on the formula and returns it. To be able to use this function throughout our analysis either copy it into the console or make a new R script, save it in your project then call it within this code using the source() function e.g… source(&#39;insert file name&#39;) To use the function do so through… ndvi &lt;- NDVIfun(manc$NIR, manc$red) Here we call the function NDVIfun() and then provide the NIR and Red band. Check the output ndvi %&gt;% plot(.,col = rev(terrain.colors(10)), main = &quot;Landsat-NDVI&quot;) # Let&#39;s look at the histogram for this dataset ndvi %&gt;% hist(., breaks = 40, main = &quot;NDVI Histogram&quot;, xlim = c(-.3,.8)) We can reclassify to the raster to show use what is most likely going to vegetation based on the histogram using the 3rd quartile — anything above the 3rd quartile we assume is vegetation. Note, this is an assumption for demonstration purposes, if you were to do something similar in your assignment be sure to provide reasoning with linkage to literature (e.g. policy or academic) veg &lt;- ndvi %&gt;% reclassify(., cbind(-Inf, 0.3, NA)) veg %&gt;% plot(.,main = &#39;Possible Veg cover&#39;) Let’s look at this in relation to Manchester as a whole manc_rgb %&gt;% plotRGB(.,axes = TRUE, stretch = &quot;lin&quot;, main = &quot;Landsat True Color Composite&quot;) veg %&gt;% plot(., add=TRUE, legend=FALSE) 7.10 Advanced raster calculations The goal of this final section is to set up a mini investigation to see if there is a relationship between urban area and temperature. If our hypothesis is that there is a relationship then our null is that there is not a relationship… 7.10.1 Calucating tempearture from Landsat data Here we are going to compute temperature from Landsat data — there are many methods that can be found within literature to do so but we will use the one originally developed by Artis &amp; Carnahan (1982), recently summarised by Guha et al. 2018 and and Avdan and Jovanovska (2016). Some of the terms used our outlined in the remote sensing background section at the end of the document, so check back there if you get confused. Calcualte the Top of Atmopshere (TOA) spectral radiance from the Digital Number (DN) using: \\[\\lambda= Grescale * QCAL + Brescale\\] TOA spectral radiance is light reflected off the Earth as seen from the satellite measure in radiance units. In this equation Grescale and Brescale represent the gain and bias of the image, with QCAL the Digital Number (DN) — how the raw Landsat image is captured. Grescale and Brescale are available from the .MTL file provided when you downloaded the Landsat data. Either open this file in notepad and extract the required values for band 10 gain (MULT_BAND) and bias (ADD_BAND) …Or we can automate it using the MTL() function within the RStoolbox package library(RStoolbox) MTL&lt;-dir_info(here::here(&quot;prac7_data&quot;, &quot;Lsatdata&quot;)) %&gt;% dplyr::filter(str_detect(path, &quot;MTL.txt&quot;)) %&gt;% dplyr::select(path)%&gt;% pull()%&gt;% readMeta() #To see all the attributes head(MTL) Now let’s extract the values from the readMTL variable for Band 10…we can either use the function getMeta() from RStoolbox of just extract the values ourselves… offsetandgain &lt;-MTL %&gt;% getMeta(&quot;B10_dn&quot;, metaData = ., what = &quot;CALRAD&quot;) offsetandgain ## offset gain ## B10_dn 0.1 0.0003342 ##OR offsetandgain &lt;- subset(MTL$CALRAD, rownames(MTL$CALRAD) == &quot;B10_dn&quot;) Run the calculation using the band 10 raster layer TOA &lt;- offsetandgain$gain * lsatmask$LC08_L1TP_203023_20190513_20190521_01_T1_B10_mask + offsetandgain$offset Next convert the TOA to Brightness Temperature \\(T_b\\) using the following equation: \\[T_b=\\frac{K_2}{ln((K_1/\\lambda)+1)}\\] Brightness temperature is the radiance travelling upward from the top of the atmosphere to the satellite in units of the temperature of an equivalent black body. K1 (774.8853) and K2 (1321.0789) are pre launch calibration constants provided by USGS. Check the handbook for these values Instead of hardcoding these values…yep, you guessed it… we can extract them from our MTL Calidata &lt;- MTL$CALBT%&gt;% as.data.frame()%&gt;% mutate(Band=rownames(.))%&gt;% filter(Band==&quot;B10_dn&quot;) # subset the columns K1 &lt;- Calidata %&gt;% dplyr::select(K1)%&gt;% pull() K2 &lt;- Calidata %&gt;% dplyr::select(K2)%&gt;% pull() Brighttemp &lt;- (K2 / log((K1 / TOA) + 1)) Earlier we calcualted NDVI, let’s use that to determine emissivity of each pixel. First we need to calcualte the fractional vegetation of each pixel, through the equation: \\[F_v= \\left( \\frac{NDVI - NDVI_{min}}{NDVI_{max}-NDVI_{min}} \\right)^2\\] facveg &lt;- (ndvi-0.2/0.5-0.2)^2 Fractional vegetation cover is the ratio of vertically projected area of vegetation to the total surface extent. Here, \\(NDVI_{min}\\) is the minimum NDVI value (0.2) where pixels are considered bare earth and \\(NDVI_{max}\\) is the value at which pixels are considered healthy vegetation (0.5) Now compute the emissivity using: \\[\\varepsilon = 0.004*F_v+0.986\\] emiss &lt;- 0.004*facveg+0.986 Emissivity is the ratio absorbed radiation energy to total incoming radiation engery compared to a blackbody (which would absorb everything), being ab measure of absoptivity. Great, we’re nearly there… get our LST following the equation from Weng et al. 2004 (also summarised in Guja et al. (2018) and Avdan and Jovanovska (2016)): \\[LST= \\frac{T_b}{1+(\\lambda \\varrho T_b / (p))ln\\varepsilon}\\] Where: \\[p= h\\frac{c}{\\varrho}\\] Ok, don’t freak out….let’s start with calculating \\(p\\) Here we have: \\(h\\) which is Plank’s constant \\(6.626 × 10^-34 Js\\) \\(c\\) which is the velocity of light in a vaccum \\(2.998 × 10^8 m/sec\\) \\(\\varrho\\) which is the Boltzmann constant of \\(1.38 × 10^-23 J/K\\) Boltzmann &lt;- 1.38*10e-23 Plank &lt;- 6.626*10e-34 c &lt;- 2.998*10e8 p &lt;- Plank*(c/Boltzmann) Now for the rest of the equation….we have the values for: \\(\\lambda\\) which is the effective wavelength of our data (10.9 for Landsat 8 band 10) \\(\\varepsilon\\) emissivity \\(T_b\\) Brightness Temperature Run the equation with our data #define remaining varaibles lambda &lt;- 1.09e-5 #run the LST calculation LST &lt;- Brighttemp/(1 +(lambda*Brighttemp/p)*log(emiss)) # check the values LST ## class : RasterLayer ## dimensions : 533, 592, 315536 (nrow, ncol, ncell) ## resolution : 30, 30 (x, y) ## extent : 540915, 558675, 5917125, 5933115 (xmin, xmax, ymin, ymax) ## crs : +proj=utm +zone=30 +datum=WGS84 +units=m +no_defs ## source : memory ## names : layer ## values : 281.4855, 305.9571 (min, max) Are the values very high?… That’s because we are in Kevlin not degrees Celcius…let’s fix that and plot the map LST &lt;- LST-273.15 plot(LST) Nice that’s our temperature data sorted. 7.11 Calucating urban area from Landsat data How about we extract some urban area using another index and then see how our temperature data is related? We will use the Normalized Difference Built-up Index (NDBI) algorithm for identification of built up regions using the reflective bands: Red, Near-Infrared (NIR) and Mid-Infrared (MIR) originally proposed by Zha et al. (2003). It is very similar to our earlier NDVI calculation but using different bands… \\[NDBI= \\frac{Short-wave Infrared (SWIR)-Near Infrared (NIR)}{Short-wave Infrared (SWIR)+Near Infrared (NIR)}\\] In Landsat 8 data the SWIR is band 6 and the NIR band 5 Let’s compute this index now… NDBI=((lsatmask$LC08_L1TP_203023_20190513_20190521_01_T1_B6_mask- lsatmask$LC08_L1TP_203023_20190513_20190521_01_T1_B5_mask)/ (lsatmask$LC08_L1TP_203023_20190513_20190521_01_T1_B6_mask+ lsatmask$LC08_L1TP_203023_20190513_20190521_01_T1_B5_mask)) But do you remember our function? …Well this is the same calculation we used there just with different raster layers (or bands) so we could reuse it… NDBIfunexample &lt;- NDVIfun(lsatmask$LC08_L1TP_203023_20190513_20190521_01_T1_B6_mask, lsatmask$LC08_L1TP_203023_20190513_20190521_01_T1_B5_mask) 7.12 Urban area and temperature relationship We could plot the varaibles agaisnt each other but there are a lot of data points plot(values(NDBI), values(LST)) This is termed the overplotting problem. So, let’s just take a random subset of the same pixels from both raster layers. To do so we need to again stack our layers # stack the layers computeddata &lt;- LST%&gt;% stack(.,NDBI)%&gt;% as.data.frame()%&gt;% na.omit()%&gt;% # take a random subset sample_n(., 500)%&gt;% dplyr::rename(Temp=&quot;layer.1&quot;, NDBI=&quot;layer.2&quot;) # check the output plot(computeddata$Temp, computeddata$NDBI) Let’s jazz things up, load some more packages library(plotly) library(htmlwidgets) Transfrom the data to a data.frame to work with ggplot, then plot heat&lt;-ggplot(computeddata, aes(x = NDBI, y = Temp))+ geom_point(alpha=2, colour = &quot;#51A0D5&quot;)+ labs(x = &quot;Temperature&quot;, y = &quot;Urban index&quot;, title = &quot;Manchester urban and temperature relationship&quot;)+ geom_smooth(method=&#39;lm&#39;, se=FALSE)+ theme_classic()+ theme(plot.title = element_text(hjust = 0.5)) # interactive plot ggplotly(heat) ## `geom_smooth()` using formula &#39;y ~ x&#39; It’s a masterpiece! How about plotting the whole dataset rather than a random subset… computeddatafull &lt;- LST%&gt;% stack(.,NDBI)%&gt;% as.data.frame()%&gt;% na.omit()%&gt;% # take a random subset dplyr::rename(Temp=&quot;layer.1&quot;, NDBI=&quot;layer.2&quot;) hexbins &lt;- ggplot(computeddatafull, aes(x=NDBI, y=Temp)) + geom_hex(bins=100, na.rm=TRUE) + labs(fill = &quot;Count per bin&quot;)+ geom_smooth(method=&#39;lm&#39;, se=FALSE, size=0.6)+ theme_bw() ggplotly(hexbins) 7.13 Statistical summary To see if our varaibles are related let’s run some basic correlation library(rstatix) Correlation &lt;- computeddatafull %&gt;% cor_test(Temp, NDBI, use = &quot;complete.obs&quot;, method = c(&quot;pearson&quot;)) Correlation ## # A tibble: 1 × 8 ## var1 var2 cor statistic p conf.low conf.high method ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Temp NDBI 0.66 394. 0 0.660 0.665 Pearson Let’s walk through the results here… statistic value (or t, or test statistic), we can work out the critical t value using: abs(qt(0.05/2, 198268)) ## [1] 1.959976 Within this formula 0.05 is the confidence level (95%) 2 means a 2 sided test 198268 is the degrees of freedom (df), being the number of values we have -2 computeddatafull %&gt;% pull(Temp)%&gt;% length() ## [1] 198270 length(computeddatafull) ## [1] 2 Here, as our t values is &gt; than the critial value we can say that there is a relationship between the datasets. However, we would normally report the p-value…which we can get from.. p-value: tells us wheather there is a statistically significant correlation between the datasets and if that we can reject the null hypothesis if p&lt;0.05 (there is a 95% chance that the relationship is real). cor: Product moment correlation coefficient conf.low and con.high intervals: 95% confident that the population correlation coeffieicent is within this interval As p&lt;0.05 is shows that are variables are have a statistically significant correlation… so as urban area (assuming the index in representative) per pixel increases so does temperature…therefore we can reject our null hypothesis… but remember that this does not imply causation!! If you want more information on statistics in R go and read YaRrr! A Pirate’s Guide to R, chapter 13 on hypothesis tests. 7.14 Considerations If you wanted to explore this type of analysis further then you would need to consider the following: Other methods for extracting temperature from Landsat data Validation of your temperature layer (e.g. weather station data) The formula used to calculate emissivity — there are many The use of raw satellite data as opposed to remove the effects of the atmosphere. Within this practical we have only used relative spatial indexes (e.g. NDVI). However, if you were to use alternative methods it might be more appropraite to use surface reflectance data (also provided by USGS). 7.15 Extension Already an expert with raster data and R? Here we have just looked at one temperature image and concluded that urban area and temperature are realted, but does that hold true for other time periods? If you found this practical straightforward source some Landsat data for an area of interest and create some R code to explore the temporal relationship between urban area and temperature. …Or run the analysis with different data and methods. Data: MODIS daily LST: https://modis.gsfc.nasa.gov/data/dataprod/mod11.php MODIS imagery: https://modis.gsfc.nasa.gov/ Methods: Supervised or unsupervised landcover classificaiton: https://rspatial.org/rs/5-supclassification.html# Here you could classify an image into several landcover classes and explore their relationship with temperature 7.16 References Thanks to CASA gradaute student Matt Ng for providing the outline to the start of this practical Avdan, U. and Jovanovska, G., 2016. Algorithm for automated mapping of land surface temperature using LANDSAT 8 satellite data. Journal of Sensors, 2016. Guha, S., Govil, H., Dey, A. and Gill, N., 2018. Analytical study of land surface temperature with NDVI and NDBI using Landsat 8 OLI and TIRS data in Florence and Naples city, Italy. European Journal of Remote Sensing, 51(1), pp.667-678. Weng, Q., Lu, D. and Schubring, J., 2004. Estimation of land surface temperature–vegetation abundance relationship for urban heat island studies. Remote sensing of Environment, 89(4), pp.467-483. Young, N.E., Anderson, R.S., Chignell, S.M., Vorster, A.G., Lawrence, R. and Evangelista, P.H., 2017. A survival guide to Landsat preprocessing. Ecology, 98(4), pp.920-932. Zha, Y., Gao, J. and Ni, S., 2003. Use of normalized difference built-up index in automatically mapping urban areas from TM imagery. International journal of remote sensing, 24(3), pp.583-594. 7.17 Remote sensing background (optional) Landsat sensors capture reflected solar energy, convert these data to radiance, then rescale this data into a Digital Number (DN), the latter representing the intensity of the electromagnetic radiation per pixel. The range of possible DN values depends on the sensor radiometric resolution. For example Landsat Thematic Mapper 5 (TM) measures between 0 and 255 (termed 8 bit), whilst Landsat 8 OLI measures between 0 and 65536 (termed 12 bit). These DN values can then be converted into Top of Atmosphere (TOA) radiance and TOA reflectance through available equations and known constants that are preloaded into certain software. The former is how much light the instrument sees in meaningful units whilst the latter removes the effects of the light source. However, TOA reflectance is still influenced by atmospheric effects. These atmospheric effects can be removed through atmospheric correction achievable in software such as ENVI and QGIS to give surface reflectance representing a ratio of the amount of light leaving a target to the amount of light striking it. We must also consider the spectral resolution of satellite imagery, Landsat 8 OLI has 11 spectral bands and as a result is a multi-spectral sensor. As humans we see in the visible part of the electromagnetic spectrum (red-green-blue) — this would be three bands of satellite imagery — however satellites can take advantage of the rest of the spectrum. Each band of Landsat measures in a certain part of the spectrum to produce a DN value. We can then combine these values to produce ‘colour composites’. So a ‘true’ colour composite is where red, green and blue Landsat bands are displayed (the visible spectrum). Based on the differing DN values obtained, we can pick out the unique signatures (values of all spectral bands) of each land cover type, termed spectral signature. For more information read Young et al. (2017) A survival guide to Landsat preprocessing 7.18 Feedback Was anything that we explained unclear this week or was something really clear…let us know using the feedback form. It’s anonymous and we’ll use the responses to clear any issues up in the future / adapt the material. "],["online-mapping-descriptive-statistics.html", "Chapter 8 Online mapping / descriptive statistics 8.1 Homework 8.2 Recommended listening  8.3 Part A spatial descriptive statistics 8.4 Part B Online mapping 8.5 Feedback", " Chapter 8 Online mapping / descriptive statistics This practical is formed of two parts, you can pick one you are more intersted in or complete both. Part A looks at some more spatial descriptive statistics Part B focuses on online mapping 8.1 Homework Outside of our schedulded sessions you should be doing around 12 hours of extra study per week. Feel free to follow your own GIS interests, but good places to start include the following: Assignment From weeks 6-9, learn and practice analysis from the course and identify appropriate techniques (from wider research) that might be applicable/relevant to your data. Conduct an extensive methodological review – this could include analysis from within academic literature and/or government departments (or any reputable source). Reading For k-means clustering and exploratory data analysis read Chapter 12 “K-Means Clustering” from Exploratory Data Analysis with R by Peng (2016). For interative maps re-read Chapter 8: “Making maps with R” Geocomputation with R by Lovelace, Nowosad and Muenchow (2020), especially setion 8.4. Remember this is just a starting point, explore the reading list, practical and lecture for more ideas. 8.2 Recommended listening  Some of these practicals are long, take regular breaks and have a listen to some of our fav tunes each week. Andy Adam Bit different from me this week - I’m not all about drum and bass (although I mostly am). Stumbled across these recently and I should have known about them for much longer. The Joy Formidable - this is a 10th Anniversary revisit of their first EP and is ace. If you like Welsh, you’re in for a treat! 8.3 Part A spatial descriptive statistics 8.3.1 Learning objectives By the end of this practical you should be able to: Create descriptive plots (histograms and boxplots) to help understand the frequency distributions of your data Write custom functions to process your data Produce a location quotient map to highlight interesting (above and below average) patterns in your data Write a function in R to produce a range of different maps based on user inputs Perform a very basic cluster analysis and output the results of a basic geodemographic classification 8.3.2 Getting Started Before we begin this week’s practical, we need to load our packages and carry out some data preparation… library(highcharter) library(tidyverse) library(downloader) library(rgdal) library(sf) library(ggplot2) library(reshape2) library(plotly) library(raster) library(downloader) library(rgdal) There is a problem with our London Wards data — we are missing some data relating to housing tenure. The housing tenure data in this file comes from the 2011 Census and visiting http://www.nomisweb.co.uk/ and interrogating Table KS402EW (the Tenure table), we can discover that data for the percentage of shared owners and those living in accommodation rent free are missing. Rather than making you go off to Nomisweb and fetch this data, because I’m really nice, I’ve posted on GitHub a file containing this and extra categorical, ratio and geographical data that we will need to add to our existing London data file. To download this consult How to download data and files from GitHub, i’d used Option 1 and it’s the prac8_data folder you want to download. We can easily join this new data to our original data in R. LondonWards &lt;- st_read(here::here(&quot;prac8_data&quot;, &quot;New_ward_data&quot;, &quot;NewLondonWard.shp&quot;)) ## Reading layer `NewLondonWard&#39; from data source ## `C:\\Users\\Andy\\OneDrive - University College London\\Teaching\\CASA0005\\2020_2021\\CASA0005repo\\prac8_data\\New_ward_data\\NewLondonWard.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 625 features and 76 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 503575 ymin: 155850.8 xmax: 561956.7 ymax: 200933.6 ## Projected CRS: OSGB 1936 / British National Grid extradata &lt;- read_csv(here::here(&quot;prac8_data&quot;, &quot;LondonAdditionalDataFixed.csv&quot;)) ## Rows: 625 Columns: 11 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (5): WardName, WardCode, Wardcode, Candidate, InnerOuter ## dbl (6): PctSharedOwnership2011, PctRentFree2011, x, y, AvgGCSE2011, UnauthA... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. LondonWardsleftjoin &lt;- LondonWards %&gt;% left_join(.,extradata, by = c(&quot;WD11CD&quot; = &quot;Wardcode&quot;)) #LondonWardsSF &lt;- merge(LondonWards, extradata, by.x = &quot;WD11CD&quot;, by.y = &quot;Wardcode&quot;) 8.3.3 Main Tasks 8.3.4 Task 1 - Descriptive Statistics Using the lecture notes for guidance, you should generate the following graphs and descriptive statistics using standard functions and ggplot2 in R. Each element should be copied and saved to a word document or something similar: Generate the following from your LondonWardsSF data frame: A simple histogram for a scale/ratio variable of your choice A simple histogram for a scale/ratio variable of your with a different frequency bin-width The same histogram with vertical lines for the mean, median and mode (the mode will be the mid value for the bin with the largest count) and the inter-quartile range. hint – use summary(table$variable) to find the values if you are not sure The same histogram with three different kernel density smoothed frequency gradients A boxplot of the same variable A faceted grid of histograms with for every variable in your London Wards data file. In order to do this, you will need to remove Factor (non-numeric) variables from your dataset and re-shape your data using the melt() function in the reshape2 package (hint – check the help file for melt.data.frame() to understand what the code below is doing). The code below will help you: #check which variables are numeric first Datatypelist &lt;- LondonWardsleftjoin %&gt;% st_drop_geometry()%&gt;% summarise_all(class) %&gt;% pivot_longer(everything(), names_to=&quot;All_variables&quot;, values_to=&quot;Variable_class&quot;) #make groups based on types of variables Groups &lt;- LondonWardsleftjoin %&gt;% st_drop_geometry()%&gt;% dplyr::select(is.numeric)%&gt;% pivot_longer(everything(), names_to=&quot;All_variables&quot;, values_to=&quot;val&quot;)%&gt;% mutate(All_variables = tolower(All_variables))%&gt;% mutate(group = case_when(str_detect(All_variables, &quot;age&quot;) ~ &quot;Age&quot;, str_detect(All_variables, &quot;employ|income|job|jsa&quot;) ~ &quot;Employment&quot;, str_detect(All_variables, &quot;house|rent|detatched|flat|terrace|owned|social|private|share|tax|mortgage&quot;) ~ &quot;Housing&quot;, TRUE~&quot;Other&quot;)) Agehist &lt;- Groups%&gt;% filter(group==&quot;Age&quot;)%&gt;% ggplot(., aes(x=val)) + geom_histogram(aes(x = val, y = ..density..))+ geom_density(colour=&quot;red&quot;, size=1, adjust=1)+ facet_wrap(~All_variables, scales = &#39;free&#39;) To change which group we are plotting, simply alter the filter() argument. Make a note of which variables appear normally distributed and which appear to be skewed. What do the histograms for nominal and ordinal data look like? Try performing a log10() transformation on the x variables and plotting a similar facet grid of histograms –– what does this do to some of the skewed variables? For example… Agehist &lt;- Groups%&gt;% filter(group==&quot;Age&quot;)%&gt;% ggplot(., aes(x=log10(val))) + geom_histogram(aes(x = log10(val), y = ..density..))+ geom_density(colour=&quot;red&quot;, size=1, adjust=1)+ facet_wrap(~All_variables, scales = &#39;free&#39;) Create a 2D histogram and 2D kernel density estimate of ward centroids in London using the Eastings and Northings data in the x and y columns of your dataset. For example: Londonpoint &lt;- ggplot(LondonWardsleftjoin, aes(x=x.y,y=y.y))+ geom_point()+ coord_equal() Londonpoint Londonpoint&lt;-ggplot(LondonWardsleftjoin, aes(x=x.y,y=y.y))+ stat_bin2d(bins=10) Londonpoint Londonpoint&lt;-ggplot(LondonWardsleftjoin, aes(x=x.y,y=y.y))+geom_point()+coord_equal() Londonpoint Londonpoint+stat_density2d(aes(fill = ..level..), geom=&quot;polygon&quot;) 8.3.5 Extension 1 If you really want to go down the road of carrying out KDE in a range of different ways, then this Kernel Density Estimation tutorial — perhaps try it with some of the Blue Plaques data from previous weeks. 8.3.6 Task 2 - Function to recode data In the lecture, it was mentioned that sometimes we should recode variables to reduce the amount of information contained in order that different tests can be carried out on the data. Here we will recode some of our scale/ratio data into some nominal/weak-ordinal data to carry out some basic analysis on. A function to recode data in our dataset might look like the one below: newvar&lt;-0 recode&lt;-function(variable,high,medium,low){ newvar[variable&lt;=high]&lt;-&quot;High&quot; newvar[variable&lt;=medium]&lt;-&quot;Medium&quot; newvar[variable&lt;=low]&lt;-&quot;Low&quot; return(newvar) } 8.3.7 What’s going on in this function? First we initialise a new variable called newvar and set it to = 0. We then define a new function called recode. This takes in 4 pieces of information: A variable (called variable but I could have called it anything) and three values called high, medium and low. It outputs a value to the new string variable newvar based on the values of high, medium and low that are given to the function. To create the function in R, highlight the all of the code in the function and then run the whole block (ctrl-Return in R-Studio). You will see that the function is stored in the workspace. We can now use this function to recode any of our continuous variables into high, medium and low values based on the values we enter into the function. We are going to recode the Average GCSE Score variable into High, Medium and Low values – High will be anything above the 3rd Quartile, Low will be anything below the 1st Quartile and Medium – anything in between. Note, if your data doesn’t have the 2013 GCSE scores but 2014, it will have different figures to these figures below and you will need to call the column by the column header you have attach(LondonWards) #Check the name of your column, there could be a slight error and it might be called &#39;AvgGCSED201&#39; summary(AvgGCSE201) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 245.0 332.3 343.7 345.8 358.3 409.1 Create a new column in your data frame and fill it with recoded data for the Average GCSE Score in 2013. To do this, pass the AvgGCSE2013 variable to the recode() function, along with and the three values for high, medium and low. You should create a new variable called gcse_recode and use the function to fill it with values If you wanted to be really fancy, you could try altering the function to calculate these “High”, “Medium” and “Low” LondonWards &lt;- LondonWards %&gt;% mutate(GCSE_recode = recode(AvgGCSE201,409.1,358.3,332.3)) #or LondonWards$GCSE_recode &lt;- recode(AvgGCSE201,409.1,358.3,332.3) You should also create a second re-coded variable from the unauthorised absence variable using the same function – call this variable unauth_recode and again, used the 3rd and 1st quartiles to define your high, medium and low values. On to another function. This time, we will calculate some location quotients for housing tenure in London. If you remember, a location quotient is simply the ratio of a local distribution to the ratio of a global distribution. In our case, our global distribution will be London. #Location Quotient function 1 LQ1&lt;-function(pctVariable){ pctVariable /mean(pctVariable) } #Location Quotient function 2 LQ2&lt;-function(variable,rowtotal){ localprop&lt;-variable/rowtotal globalprop&lt;-sum(variable)/sum(rowtotal) return(localprop/globalprop) } The two functions above calculate the same Location Quotient, but the first one works on variables which have already been converted into row percentages, the second will work on raw variables where an additional column for the row totals is stored in a separate column – e.g. “age 0-15”, “age 16-64” and “age 65 plus” all sum to the “Pop2013” column in our data London Wards data set: head(LondonWards[,1:7]) ## Simple feature collection with 6 features and 7 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 507996.8 ymin: 170317.9 xmax: 533838 ymax: 182206.1 ## Projected CRS: OSGB 1936 / British National Grid ## WD11CD WD11CDO WD11NM WD11NMW WardName WardCode ## 1 E09000001 00AA City of London &lt;NA&gt; City of London 00AA ## 2 E05000352 00ATGE Feltham West &lt;NA&gt; Hounslow - Feltham West 00ATGE ## 3 E05000353 00ATGF Hanworth &lt;NA&gt; Hounslow - Hanworth 00ATGF ## 4 E05000354 00ATGG Hanworth Park &lt;NA&gt; Hounslow - Hanworth Park 00ATGG ## 5 E05000355 00ATGH Heston Central &lt;NA&gt; Hounslow - Heston Central 00ATGH ## 6 E05000356 00ATGJ Heston East &lt;NA&gt; Hounslow - Heston East 00ATGJ ## Wardcode1 geometry ## 1 &lt;NA&gt; MULTIPOLYGON (((532134.9 18... ## 2 E05000352 MULTIPOLYGON (((509740 1736... ## 3 E05000353 MULTIPOLYGON (((513585.1 17... ## 4 E05000354 MULTIPOLYGON (((512142.6 17... ## 5 E05000355 MULTIPOLYGON (((513098.5 17... ## 6 E05000356 MULTIPOLYGON (((513467.2 17... Calculate Location Quotients for the 5 Housing tenure variables (Owner Occupied, Private Rent, Social Rent, Shared Ownership, Rent Free) in your data set using either of the functions above. Save these as 5 new variables in your dataset. *Hint – use the function to create the variable directly, for example: #this is pseudo code, but you should see how this works dataframe$newLQVariable &lt;- LQ1(originalPercentageVariable) #or dataframe$newLQVariable &lt;- LQ2(originalVariable,rowTotalVariable) 8.3.8 Task 3 – Mapping Location Quotients You should now try and create a map or series of maps of your housing tenure location quotients using tmap or ggplot. Try to create a map by referring back earlier practicals in this course and follow the steps from there (or, indeed, use your memory) 8.3.9 Task 4 – Creating a Basic Geodemographic Classification As we saw in the lecture, geodemographic classifications are widely used to classify areas according to the characteristics of the population that inhabits them. All geodemographic classifications are created using cluster analysis algorithms. Many of these algorithms exist, but one of the most commonly used is k-means. One of the pitfalls of these algorithms is that they will always find a solution, whether the variables have been selected appropriately or standardised correctly. This means that it’s very easy to create a classification which is misleading. All of that said, it is useful to see how straightforward it is to create a classification yourself to describe some spatial data you have. In a cluster analysis, you should select variables that are: Ranged on the same scale Normally distributed Not highly correlated To make this task easier, we will just select two variables to make our classification from. In a real geodemographic classification, hundreds of variables are often used. LondonWardsData &lt;- LondonWards %&gt;% #drop geometry st_drop_geometry()%&gt;% #display list of variables summarise_all(class) %&gt;% pivot_longer(everything(), names_to=&quot;All_variables&quot;, values_to=&quot;Variable_class&quot;) slice_head(LondonWardsData, n=5) ## # A tibble: 5 × 2 ## All_variables Variable_class ## &lt;chr&gt; &lt;chr&gt; ## 1 WD11CD character ## 2 WD11CDO character ## 3 WD11NM character ## 4 WD11NMW character ## 5 WardName character # Create a new data frame just containing the two variables we are interested in mydata &lt;- LondonWards %&gt;% st_drop_geometry()%&gt;% dplyr::select(c(PctOwned20, PctNoEngli)) #– check variable distributions first histplot &lt;- ggplot(data=mydata, aes(x=PctOwned20)) histplot +geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. histplot &lt;- ggplot(data=mydata, aes(x= PctNoEngli)) histplot +geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Let’s make our k-means find 3 clusters with 25 iterations. The graphics below by Allison Horst will help explain the process… fit &lt;- mydata %&gt;% kmeans(., 3, nstart=25) Now let’s get out cluster means using tidy() from the tidymodels package. Tidy creates a tibble that summarizes the model. Then plot them and then add them to our London wards… # get cluster means library(tidymodels) ## ── Attaching packages ────────────────────────────────────── tidymodels 0.2.0 ── ## ✔ broom 0.8.0 ✔ rsample 0.1.1 ## ✔ dials 1.0.0 ✔ tune 0.2.0 ## ✔ infer 1.0.2 ✔ workflows 0.2.6 ## ✔ modeldata 0.1.1 ✔ workflowsets 0.2.1 ## ✔ parsnip 0.2.1 ✔ yardstick 1.0.0 ## ✔ recipes 0.2.0 ## ── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ── ## ✖ recipes::check() masks devtools::check() ## ✖ nlme::collapse() masks dplyr::collapse() ## ✖ scales::discard() masks purrr::discard() ## ✖ raster::extract() masks tidyr::extract() ## ✖ plotly::filter() masks dplyr::filter(), stats::filter() ## ✖ recipes::fixed() masks stringr::fixed() ## ✖ dplyr::lag() masks stats::lag() ## ✖ tune::parameters() masks dials::parameters(), spatstat.core::parameters() ## ✖ dials::prune() masks rpart::prune() ## ✖ .GlobalEnv::recode() masks dplyr::recode() ## ✖ MASS::select() masks raster::select(), plotly::select(), dplyr::select() ## ✖ yardstick::spec() masks readr::spec() ## ✖ recipes::step() masks stats::step() ## ✖ parsnip::translate() masks rgeos::translate() ## ✖ recipes::update() masks raster::update(), stats::update() ## • Use suppressPackageStartupMessages() to eliminate package startup messages centroid &lt;- tidy(fit)%&gt;% #print the results of the cluster groupings print()%&gt;% dplyr::select(PctOwned20, PctNoEngli) ## # A tibble: 3 × 5 ## PctOwned20 PctNoEngli size withinss cluster ## &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 48.9 14.7 247 21793. 1 ## 2 72.4 6.38 191 17086. 2 ## 3 27.5 17.0 187 13365. 3 # as we only have variable two dimensions we can plot the clusters on a graph p &lt;- ggplot(mydata,aes(PctOwned20, PctNoEngli))+ geom_point(aes(colour=factor(fit$cluster)))+ geom_point(data=centroid,aes(PctOwned20, PctNoEngli), size=7, shape=18)+ theme(legend.position=&quot;none&quot;) LondonWards &lt;- fit %&gt;% # augment(., LondonWards)%&gt;% dplyr::select(WD11CD, .cluster)%&gt;% #make sure the .cluster column is numeric mutate(across(.cluster, as.numeric))%&gt;% # join the .cluster to our sf layer left_join(LondonWards, ., by = c(&quot;WD11CD&quot; = &quot;WD11CD&quot;)) #now map our geodeomographic classification map &lt;- ggplot(LondonWards) + geom_sf(mapping = aes(fill=.cluster))+ scale_fill_continuous(breaks=c(1,2,3)) map Now of course this is just the most basic of classifications, but you can easily see how you could include more variables or different variables to create a different classification - this is perhaps something you could try. I haven’t even gone into using different clustering algorithms, how to decide on the appropriate number of clusters, using silhoutte plots to assess the strength of the clusters or creating pen-portraits using the variable z-scores for each cluster - this is practically a whole course in its own right… or indeed a dissertation topic! 8.4 Part B Online mapping 8.4.1 Learning objectives By the end of this practical you should be able to: Describe and explain different methods for producing online maps Create interactive maps using RPubs, RMarkdown site generator and Shiny Critically appraise the appropriateness of mapping techniques based on the dataset and purpose of the output map 8.4.2 Introduction In this practical we are going to preliminary stages of a mini-investigation. Since 2015 the law has capped short-term lets in London at 90 nights per year. However, this is very hard to enforce due to a lack of data and extensive evidence required to prove that the limit has been exceeded. This has been recently reflected in the Housing Research Note 2020/04: Short-term and holiday letting in London by the Greater London Authority (GLA): “there are signs that short-term letting platforms are becoming increasingly commercialised and there are concerns that removing housing supply from the market to offer it for short-term letting could be exacerbating London’s housing shortage.” The author, Georgie Cosh, was also kind enough to share some of the code used for this report. Guess what! They used R! Have a look at their code in the R file called GLA_airbnb_analysis in the prac8_data folder. Whilst Air bnb have implemented a system the removes listings once they have been rented for 90 days per year unless an appropraite permit is in place we want to interactively visualise the the number of air bnb lettings (and hotels for comparison) per borough as a starting point. This could then be used to undertake further investigation into boroughs with high short term lets, for example exploring other websites to see if the properties are listed and jointly exceed 90 days or optimising localised monitoring. As these rules only apply to entire homes we will only extract only these, and for monitoring purposes (e.g. random annual inspections) those are availbale for 365 days of the year. We will now explore several ways to do this… The report by Cosh (2020) goes a bit further than this and implements an occupancy model (based on a number of assumptions) to estimate the number of nights a Air bnb is rented out for, so check it out, perhaps an idea for your final project. 8.4.3 RPubs One of the most straight forward publishing tools is RPubs. It takes an .Rmd and directly uploads it to rpubs.com — all files are publically available on this website. To start with you need to make a free account. Go to: https://rpubs.com/users/new and register Create a new project in RStudio and open a new R Markdown file (File &gt; New File &gt; R Markdown) You’ll see that the file is automatically populated with some information, have a read through it then click the Knit icon … Let’s make some changes to your .Rmd. Delete all the text and code except from header information (that is enclosed by three dashes at the top of the file) Insert a new code chunk (go back to RMarkdown if you need a refresher)… …Add add some code of your choice from either a previous practical or your own work. As it’s a new project you’ll have to either copy the data into your project folder or set the working directory setwd(). If it’s all online data that you’ve loaded directly from the web into R, this shouldn’t be an issue. I’m going to use the interactive map we made in practical 5 (the Advanced interactive map section)…..Here is the code i’ve put in my chunk: library(sf) library(tmap) library(leafpop) library(leaflet) library(tmaptools) library(tidyverse) OSM &lt;- st_read(here::here(&quot;prac5_data&quot;, &quot;greater-london-latest-free.shp&quot;, &quot;gis_osm_pois_a_free_1.shp&quot;)) %&gt;% st_transform(., 27700) %&gt;% #select hotels only filter(fclass == &#39;hotel&#39;) Londonborough &lt;- st_read(here::here(&quot;Prac1_data&quot;, &quot;statistical-gis-boundaries-london&quot;, &quot;ESRI&quot;, &quot;London_Borough_Excluding_MHW.shp&quot;))%&gt;% st_transform(., 27700) Airbnb &lt;- read_csv(&quot;prac5_data/listings.csv&quot;) %&gt;% st_as_sf(., coords = c(&quot;longitude&quot;, &quot;latitude&quot;), crs = 4326) %&gt;% st_transform(., 27700)%&gt;% #select entire places that are available all year filter(room_type == &#39;Entire home/apt&#39; &amp; availability_365 ==&#39;365&#39;) # make a function for the join # hint all you have to do is replace data1 and data2 # with the data you want to use Joinfun &lt;- function(data1, data2){ output&lt;- data1%&gt;% st_join(Londonborough,.)%&gt;% add_count(GSS_CODE, name=&quot;hotels_in_borough&quot;) return(output) } # use the function for hotels Hotels &lt;- Joinfun(OSM, Londonborough) # then for airbnb Airbnb &lt;- Joinfun(Airbnb, Londonborough) # now try to arrange the plots with tmap breaks = c(0, 5, 12, 26, 57, 286) #change the column name from hotels_in_borough for the legend Hotels &lt;- Hotels %&gt;% dplyr::rename(`Accomodation count` = hotels_in_borough) Airbnb &lt;- Airbnb %&gt;% dplyr::rename(`Accomodation count` = hotels_in_borough) Airbnb_count &lt;- Airbnb %&gt;% count(GSS_CODE) Hotels_count &lt;- Hotels %&gt;% count(NAME) #join data Joined &lt;- Airbnb_count%&gt;% st_join(., Hotels_count, join = st_equals)%&gt;% st_transform(., 4326)%&gt;% rename(`Airbnb count` = `n.x`, `GSS Code`= GSS_CODE, `Borough`=NAME, `Hotel count` = `n.y`) popupairbnb &lt;-Joined %&gt;% st_drop_geometry()%&gt;% dplyr::select(`Airbnb count`, Borough)%&gt;% popupTable() popuphotel &lt;-Joined %&gt;% st_drop_geometry()%&gt;% dplyr::select(`Hotel count`, Borough)%&gt;% popupTable() tmap_mode(&quot;view&quot;) # set the colour palettes using our previously defined breaks pal1 &lt;- Joined %&gt;% colorBin(palette = &quot;YlOrRd&quot;, domain=.$`Airbnb count`, bins=breaks) pal1 &lt;-colorBin(palette = &quot;YlOrRd&quot;, domain=Joined$`Airbnb count`, bins=breaks) pal2 &lt;- Joined %&gt;% colorBin(palette = &quot;YlOrRd&quot;, domain=.$`Hotel count`, bins=breaks) map&lt;- leaflet(Joined) %&gt;% # add basemap options addTiles(group = &quot;OSM (default)&quot;) %&gt;% addProviderTiles(providers$Stamen.Toner, group = &quot;Toner&quot;) %&gt;% addProviderTiles(providers$Stamen.TonerLite, group = &quot;Toner Lite&quot;) %&gt;% addProviderTiles(providers$CartoDB.Positron, group = &quot;CartoDB&quot;)%&gt;% #add our polygons, linking to the tables we just made addPolygons(color=&quot;white&quot;, weight = 2, opacity = 1, dashArray = &quot;3&quot;, popup = popupairbnb, fillOpacity = 0.7, fillColor = ~pal2(`Airbnb count`), group = &quot;Airbnb&quot;)%&gt;% addPolygons(fillColor = ~pal2(`Hotel count`), weight = 2, opacity = 1, color = &quot;white&quot;, dashArray = &quot;3&quot;, popup = popupairbnb, fillOpacity = 0.7,group = &quot;Hotels&quot;)%&gt;% # add a legend addLegend(pal = pal2, values = ~`Hotel count`, group = c(&quot;Airbnb&quot;,&quot;Hotel&quot;), position =&quot;bottomleft&quot;, title = &quot;Accomodation count&quot;) %&gt;% # specify layers control addLayersControl( baseGroups = c(&quot;OSM (default)&quot;, &quot;Toner&quot;, &quot;Toner Lite&quot;, &quot;CartoDB&quot;), overlayGroups = c(&quot;Airbnb&quot;, &quot;Hotels&quot;), options = layersControlOptions(collapsed = FALSE) ) # plot the map map Add some text at the start of your .Rmd you can include titles and subtitle using # followed by a space, a second level subtitle would be ##, and third ### # Title ## Second sub title ### Third sub title Save the file, Knitt it to HTML, this should be default and specified in the header — enclosed by three dashes. Once knitted you can easily publish the file to Ppubs using the Publish icon either in the viewer pane or the toolbar area (by run) Now how about adding a few design features…i’ve changed my header section to… --- title: &quot;publishexample&quot; output: html_document: theme: yeti smart: true highlight: textmate toc: true number_sections: true toc_float: collapsed: false smooth_scroll: true --- Knit and then publish again…you’ll notice a few aesthetic changes To learn more about these go explore: https://bookdown.org/yihui/rmarkdown/html-document.html http://www.datadreaming.org/post/r-markdown-theme-gallery/ https://cran.r-project.org/web/packages/prettydoc/vignettes/architect.html And for more code chunk control.. https://bookdown.org/yihui/rmarkdown/r-code.html https://rmarkdown.rstudio.com/lesson-3.html 8.4.4 RMarkdown site generator 8.4.4.1 Set the file structure RPubs are useful but what if you wanted to make a full site with different tabs for introduction, methodology, results and recommedations…one way is to use the RMarkdown site generator hosted on GitHub RMarkdown site generator is useful as it does not require any third-party add ons like blogdown which is reliant on the hugo site generator To make a site you’ll need the following to be within your project: A configuration file with the filename _site.yml An index.Rmd Any other .Rmd files you want to create into pages on the site For the site to work you only require (a) and (b)….but that would be a pretty boring site… In your new project add two new RMarkdown files called: _site.yml index.Rmd In the _site.yml remove all code and add the following name: &quot;Hello world&quot; output_dir: &quot;.&quot; navbar: title: &quot;My example website&quot; left: - text: &quot;Home&quot; href: index.html - text: &quot;About&quot; href: publishexample.html 8.4.4.2 Link to GitHub There are two ways to do this…. 8.4.4.2.1 GitHub first This is the ‘easy’ way as you woould repeat the steps in Practical 4 by firstly making a new repository on GitHub then loading a new project in RStudio, linking that to GitHub and copying all your files into your new project from the exisiting one. 8.4.4.2.2 GitHub last So if you already have a RStudio project…like we do…we can link this to GitHub but the steps are a bit more invovled and there are several ways to acheive it — as with most things in R. Make a Git repo in RStudio. Go to Tools &gt; Project Options &gt; Git/SVN and select Git under Version control system and initialize a new repository, then restart RStudio. The Git tab should appear.. Next we need to make a new repository on GitHub. Go to GitHub, login and make a new repository. Make sure that it is empty with no README.. you should have something similar to this appear: Clone the repository by copying the HTTPS Make one local commit. Under the Git tab &gt; Diff &gt; Stage the files &gt; Add a commit message and click commit Now we need to connect our local repository to the GitHub one. So Under the Git tab you’ll the new brach button (two purple boxes linked to a white box)… Click it &gt; Add Remote. Paste in the URL use the remote name origin and the branch name of master — which you can get from the GitHub Quick setup screen after creating your repo. Check sync the branch with the remote &gt; click create then select overwrite Push the files to your GitHub and they will appear on your GitHub repo Next we need to actually build the site…there are a few ways to do this…Go to the Git tab you should see the Build tab, if you can’t then go to Tools &gt; Project Options &gt; Build Tools and select website under Project build tools. Now click Build Website under the build tab Alternatively you write the following in the console rmarkdown::render_site() If you wanted to just build a page from your site — say if you have made a rather big site with lots of analysis use: rmarkdown::render_site(&quot;index.Rmd&quot;) Stage, commit and then push the files to your GitHub. I had some issues staging the site_libs folder in the Git tab. I fixed it by closing and reloading my R project then clicking the cog symbol (under Git tab) &gt; Shell and typing git add . If you get an error message about the index file being locked… go and delete it and try again. If you can’t delete restart the machine and try again. You will find it in the .git folder within your project. Once git add . runs you should see all the files staged, be able to commit and then push the changes to GitHub Help: https://stackoverflow.com/questions/5834014/lf-will-be-replaced-by-crlf-in-git-what-is-that-and-is-it-important https://stackoverflow.com/questions/9282632/git-index-lock-file-exists-when-i-try-to-commit-but-cannot-delete-the-file So your ‘built’ website is up on GitHub, but you need to tell it where to build the site from…Go to your GitHub repo &gt; Settings, scroll down to GitHub pages and select the Source as the master branch Click on the link that is provided where your site is published and you should have a website with two tabs. Here is what mine looks like: For more information on hosting your code from RStudio on GitHub check out the book Happy Git and GitHub for the useR My RMarkdown site can be found at this GitHub pages link, but note that i’ve added a Shiny tab…which is covered in an optional extra. At this stage, it’s important to highlight the need for sensible representations of data and analysis. This especially true with the advent of GitHub and journals publishing data and code meaning it is almost impossible to present false representations of analysis. 8.4.5 Warning Whilst it might seem tempting to use the most advanced interactive maps for your the assignments within this module and course it is important to think and reflect upon the appropriateness of the mapped output. You should ask yourself the following questions: What am i trying to show with this map Will interative elements aid this in anyway or just confuse users Is there a more concise way to display this data Do i need all this information — is it all relevant to the message you are trying to portray with the map In all these examples i’ve used the same data (Hotels and Airbnbs in London boroughs), however as i’m only showing two datasets could this be represeted without all this complexity?— in this case the answer really depends on the audience you are tyring to get something across to. For example, for use in an academic journal, as there are only two data sets being mapped a static map like we produced in the Map making practical would be more appropraite. However an interative map (similar to what we have produced) might be more useful for incorpation on a website… The take home message from this is to critically think about the best way to map and disseminate your data/results. 8.4.6 Advanced online publishing Already familiar with RPubs, RMarkdown site generator or even Shiny? Try and and produce an online document using either: bookdown, flexdashboard, blogdown or shinydashboard. These are listed in order of difficutly from my experience. Hint this document is made using bookdown, so checkout my GitHub for how i set it up Bookdown, minimal bookdown example If you want to extend bookdown or automate the process of building, have a look at continuous integration using github actions Flexdashboard Blogdown Interactive Shiny dashboards 8.5 Feedback Was anything that we explained unclear this week or was something really clear…let us know using the feedback form. It’s anonymous and we’ll use the responses to clear any issues up in the future / adapt the material. "],["gwr-and-spatially-lagged-regression.html", "Chapter 9 GWR and spatially lagged regression 9.1 Learning objectives 9.2 Homework 9.3 Recommended listening  9.4 Introduction 9.5 Analysing GCSE exam performance - testing a research hypothesis 9.6 Spatial Regression Models 9.7 Task 3 - Spatial Non-stationarity and Geographically Weighted Regression Models (GWR) 9.8 Feedback", " Chapter 9 GWR and spatially lagged regression 9.1 Learning objectives By the end of this practical you should be able to: Explain hypothesis testing Execute regression in R Descrbie the assumptions associated with regression models Explain steps to deal with spatially autocorrelated (spatial similarlity of nearby observations) residuals. 9.2 Homework Outside of our schedulded sessions you should be doing around 12 hours of extra study per week. Feel free to follow your own GIS interests, but good places to start include the following: Assignment From weeks 6-9, learn and practice analysis from the course and identify appropriate techniques (from wider research) that might be applicable/relevant to your data. Conduct an extensive methodological review – this could include analysis from within academic literature and/or government departments (or any reputable source). Reading This week: Chapter 2 “Linear Regression” from Hands-On Machine Learning with R by Boehmke &amp; Greenwell (2020). Chapter 5 and 6 “Basic Regression and”Multiple Regression” from Modern Dive by Ismay and Kim (2019). Chapter 9 Spatial regression models from Crime Mapping in R by Juanjo Medina and Reka Solymosi (2019). Remember this is just a starting point, explore the reading list, practical and lecture for more ideas. 9.3 Recommended listening  Some of these practicals are long, take regular breaks and have a listen to some of our fav tunes each week. Andy Haim. Can all play loads of instuments and just switch during live sets. Adam Music this week - time for some big, dirty rock and roll. The Wildhearts have only gone and released a massive live album - oh yes! 9.4 Introduction In this practical you will be introduced to a suite of different models that will allow you to test a variety of research questions and hypotheses through modelling the associations between two or more spatially reference variables. In the worked example, we will explore the factors that might affect the average exam scores of 16 year-old across London. GSCEs are the exams taken at the end of secondary education and here have been aggregated for all pupils at their home addresses across the City for Ward geographies. The London Data Store collates a range of other variables for each Ward and so we will see if any of these are able to help explain the patterns of exam performance that we see. This practical will walk you through the common steps that you should go through when building a regression model using spatial data to test a stated research hypothsis; from carrying out some descriptive visualisation and summary statistics, to interpreting the results and using the outputs of the model to inform your next steps. 9.4.1 Setting up your Data First, let’s set up R and read in some data to enable us to carry out our analysis. #library a bunch of packages we may (or may not) use - install them first if not installed already. library(tidyverse) library(tmap) library(geojsonio) library(plotly) library(rgdal) library(broom) library(mapview) library(crosstalk) library(sf) library(sp) library(spdep) library(car) library(fs) library(janitor) Read some ward data in #download a zip file containing some boundaries we want to use download.file(&quot;https://data.london.gov.uk/download/statistical-gis-boundary-files-london/9ba8c833-6370-4b11-abdc-314aa020d5e0/statistical-gis-boundaries-london.zip&quot;, destfile=&quot;prac9_data/statistical-gis-boundaries-london.zip&quot;) Get the zip file and extract it listfiles&lt;-dir_info(here::here(&quot;prac9_data&quot;)) %&gt;% dplyr::filter(str_detect(path, &quot;.zip&quot;)) %&gt;% dplyr::select(path)%&gt;% pull()%&gt;% #print out the .gz file print()%&gt;% as.character()%&gt;% utils::unzip(exdir=here::here(&quot;prac9_data&quot;)) Look inside the zip and read in the .shp #look what is inside the zip Londonwards&lt;-dir_info(here::here(&quot;prac9_data&quot;, &quot;statistical-gis-boundaries-london&quot;, &quot;ESRI&quot;))%&gt;% #$ means exact match dplyr::filter(str_detect(path, &quot;London_Ward_CityMerged.shp$&quot;))%&gt;% dplyr::select(path)%&gt;% pull()%&gt;% #read in the file in st_read() ## Reading layer `London_Ward_CityMerged&#39; from data source ## `C:\\Users\\Andy\\OneDrive - University College London\\Teaching\\CASA0005\\2020_2021\\CASA0005repo\\prac9_data\\statistical-gis-boundaries-london\\ESRI\\London_Ward_CityMerged.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 625 features and 7 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 503568.2 ymin: 155850.8 xmax: 561957.5 ymax: 200933.9 ## Projected CRS: OSGB 1936 / British National Grid #check the data qtm(Londonwards) Now we are going to read in some data from the London Data Store #read in some attribute data LondonWardProfiles &lt;- read_csv(&quot;https://data.london.gov.uk/download/ward-profiles-and-atlas/772d2d64-e8c6-46cb-86f9-e52b4c7851bc/ward-profiles-excel-version.csv&quot;, col_names = TRUE, locale = locale(encoding = &#39;Latin1&#39;)) #check all of the columns have been read in correctly Datatypelist &lt;- LondonWardProfiles %&gt;% summarise_all(class) %&gt;% pivot_longer(everything(), names_to=&quot;All_variables&quot;, values_to=&quot;Variable_class&quot;) Datatypelist 9.4.1.1 Cleaning the data as you read it in Examining the dataset as it is read in above, you can see that a number of fields in the dataset that should have been read in as numeric data, have actually been read in as character (text) data. If you examine your data file, you will see why. In a number of columns where data are missing, rather than a blank cell, the values ‘n/a’ have been entered in instead. Where these text values appear amongst numbers, the software will automatically assume the whole column is text. To deal with these errors, we can force read_csv to ignore these values by telling it what values to look out for that indicate missing data #We can use readr to deal with the issues in this dataset - which are to do with text values being stored in columns containing numeric values #read in some data - couple of things here. Read in specifying a load of likely &#39;n/a&#39; values, also specify Latin1 as encoding as there is a pound sign (£) in one of the column headers - just to make things fun! LondonWardProfiles &lt;- read_csv(&quot;https://data.london.gov.uk/download/ward-profiles-and-atlas/772d2d64-e8c6-46cb-86f9-e52b4c7851bc/ward-profiles-excel-version.csv&quot;, na = c(&quot;&quot;, &quot;NA&quot;, &quot;n/a&quot;), locale = locale(encoding = &#39;Latin1&#39;), col_names = TRUE) #check all of the columns have been read in correctly Datatypelist &lt;- LondonWardProfiles %&gt;% summarise_all(class) %&gt;% pivot_longer(everything(), names_to=&quot;All_variables&quot;, values_to=&quot;Variable_class&quot;) Datatypelist Now you have read in both your boundary data and your attribute data, you need to merge the two together using a common ID. In this case, we can use the ward codes to achieve the join #merge boundaries and data LonWardProfiles &lt;- Londonwards%&gt;% left_join(., LondonWardProfiles, by = c(&quot;GSS_CODE&quot; = &quot;New code&quot;)) #let&#39;s map our dependent variable to see if the join has worked: tmap_mode(&quot;view&quot;) qtm(LonWardProfiles, fill = &quot;Average GCSE capped point scores - 2014&quot;, borders = NULL, fill.palette = &quot;Blues&quot;) 9.4.1.2 Additional Data In addition to our main datasets, it might also be useful to add some contextual data. While our exam results have been recorded at the home address of students, most students would have attended one of the schools in the City. Let’s add some schools data as well. #might be a good idea to see where the secondary schools are in London too london_schools &lt;- read_csv(&quot;https://data.london.gov.uk/download/london-schools-atlas/57046151-39a0-45d9-8dc0-27ea7fd02de8/all_schools_xy_2016.csv&quot;) #from the coordinate values stored in the x and y columns, which look like they are latitude and longitude values, create a new points dataset lon_schools_sf &lt;- st_as_sf(london_schools, coords = c(&quot;x&quot;,&quot;y&quot;), crs = 4326) lond_sec_schools_sf &lt;- lon_schools_sf %&gt;% filter(PHASE==&quot;Secondary&quot;) tmap_mode(&quot;view&quot;) qtm(lond_sec_schools_sf) 9.5 Analysing GCSE exam performance - testing a research hypothesis To explore the factors that might influence GCSE exam performance in London, we are going to run a series of different regression models. A regression model is simply the expression of a linear relationship between our outcome variable (Average GCSE score in each Ward in London) and another variable or several variables that might explain this outcome. 9.5.1 Research Question and Hypothesis Examining the spatial distribution of GSCE point scores in the map above, it is clear that there is variation across the city. My research question is: What are the factors that might lead to variation in Average GCSE point scores across the city? My research hypothesis that I am going to test is that there are other observable factors occurring in Wards in London that might affect the average GCSE scores of students living in those areas. In inferential statistics, we cannot definitively prove a hypothesis is true, but we can seek to disprove that there is absolutely nothing of interest occurring or no association between variables. The null hypothesis that I am going to test empirically with some models is that there is no relationship between exam scores and other observed variables across London. 9.5.2 Regression Basics For those of you who know a bit about regression, you might want to skip down to the next section. However, if you are new to regression or would like a refresher, read on… The linear relationship in a regression model is probably most easily explained using a scatter plot… q &lt;- qplot(x = `Unauthorised Absence in All Schools (%) - 2013`, y = `Average GCSE capped point scores - 2014`, data=LonWardProfiles) #plot with a regression line - note, I&#39;ve added some jitter here as the x-scale is rounded q + stat_smooth(method=&quot;lm&quot;, se=FALSE, size=1) + geom_jitter() Here, I have plotted the average GCSE point score for each Ward in London against another variable in the dataset that I think might be influential: the % of school days lost to unauthorised absences in each ward. Remember that my null hypothesis would be that there is no relationship between GCSE scores and unauthorised absence from school. If this null hypothesis was true, then I would not expect to see any pattern in the cloud of points plotted above. As it is, the scatter plot shows that, generally, as the \\(x\\) axis independent variable (unauthorised absence) goes up, our \\(y\\) axis dependent variable (GCSE point score) goes down. This is not a random cloud of points, but something that indicates there could be a relationshp here and so I might be looking to reject my null hypothesis. Some conventions - In a regression equation, the dependent variable is always labelled \\(y\\) and shown on the \\(y\\) axis of a graph, the predictor or independent variable(s) is(are) always shown on the \\(x\\) axis. I have added a blue line of best-fit - this is the line that can be drawn by minimising the sum of the squared differences between the line and the residuals. The residuals are all of the dots not falling exactly on the blue line. An algorithm known as ‘ordinary least squares’ (OLS) is used to draw this line and it simply tries a selection of different lines until the sum of the squared divations between all of the residuals and the blue line is minimised, leaving the final solution. As a general rule, the better the blue line is at summarising the relationship between \\(y\\) and \\(x\\), the better the model. The equation for the blue line in the graph above can be written: (1)\\[y_i = \\beta_0 + \\beta_1x_i + \\epsilon_i\\] where: \\(\\beta_0\\) is the intercept (the value of \\(y\\) when \\(x = 0\\) - somewhere around 370 on the graph above); \\(\\beta_1\\) is sometimes referred to as the ‘slope’ parameter and is simply the change in the value of \\(y\\) for a 1 unit change in the value of \\(x\\) (the slope of the blue line) - reading the graph above, the change in the value of \\(y\\) reading between 1.0 and 2.0 on the \\(x\\) axis looks to be around -40. \\(\\epsilon_i\\) is a random error term (positive or negative) that should sum to 0 - esentially, if you add all of the vertical differences between the blue line and all of the residuals, it should sum to 0. Any value of \\(y\\) along the blue line can be modelled using the corresponding value of \\(x\\) and these parameter values. Examining the graph above we would expect the average GCSE point score for a student living in a Ward where 0.5% of school days per year were missed, to equal around 350, but we can confirm this by plugging the \\(\\beta\\) parameter values and the value of \\(x\\) into equation (1): 370 + (-40*0.5) + 0 ## [1] 350 9.5.3 Running a Regression Model in R In the graph above, I used a method called ‘lm’ in the stat_smooth() function in ggplot2 to draw the regression line. ‘lm’ stands for ‘linear model’ and is a standard function in R for running linear regression models. Use the help system to find out more about lm - ?lm Below is the code that could be used to draw the blue line in our scatter plot. Note, the tilde ~ symbol means “is modelled by”. First though, we’re going to clean up all our data names with Janitor then select what we want. #run the linear regression model and store its outputs in an object called model1 Regressiondata&lt;- LonWardProfiles%&gt;% clean_names()%&gt;% dplyr::select(average_gcse_capped_point_scores_2014, unauthorised_absence_in_all_schools_percent_2013) #now model model1 &lt;- Regressiondata %&gt;% lm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013, data=.) Let’s have a closer look at our model… #show the summary of those outputs summary(model1) ## ## Call: ## lm(formula = average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013, ## data = .) ## ## Residuals: ## Min 1Q Median 3Q Max ## -59.753 -10.223 -1.063 8.547 61.842 ## ## Coefficients: ## Estimate Std. Error t value ## (Intercept) 371.471 2.165 171.6 ## unauthorised_absence_in_all_schools_percent_2013 -41.237 1.927 -21.4 ## Pr(&gt;|t|) ## (Intercept) &lt;2e-16 *** ## unauthorised_absence_in_all_schools_percent_2013 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 16.39 on 624 degrees of freedom ## Multiple R-squared: 0.4233, Adjusted R-squared: 0.4224 ## F-statistic: 458 on 1 and 624 DF, p-value: &lt; 2.2e-16 9.5.3.1 Interpreting and using the model outputs In running a regression model, we are effectively trying to test (disprove) our null hypothesis. If our null hypothsis was true, then we would expect our coefficients to = 0. In the output summary of the model above, there are a number of features you should pay attention to: Coefficient Estimates - these are the \\(\\beta_0\\) (intercept) and \\(\\beta_1\\) (slope) parameter estimates from Equation 1. You will notice that at \\(\\beta_0 = 371.471\\) and \\(\\beta_1 = -41.237\\) they are pretty close to the estimates of 370 and -40 that we read from the graph earlier, but more precise. Coefficient Standard Errors - these represent the average amount the coefficient varies from the average value of the dependent variable (its standard deviation). So, for a 1% increase in unauthorised absence from school, while the model says we might expect GSCE scores to drop by -41.2 points, this might vary, on average, by about 1.9 points. As a rule of thumb, we are looking for a lower value in the standard error relative to the size of the coefficient. Coefficient t-value - this is the value of the coefficient divided by the standard error and so can be thought of as a kind of standardised coefficient value. The larger (either positive or negative) the value the greater the relative effect that particular independent variable is having on the dependent variable (this is perhaps more useful when we have several independent variables in the model) . Coefficient p-value - Pr(&gt;|t|) - the p-value is a measure of significance. There is lots of debate about p-values which I won’t go into here, but essentially it refers to the probability of getting a coefficient as large as the one observed in a set of random data. p-values can be thought of as percentages, so if we have a p-value of 0.5, then there is a 5% chance that our coefficient could have occurred in some random data, or put another way, a 95% chance that out coefficient could have only occurred in our data. As a rule of thumb, the smaller the p-value, the more significant that variable is in the story and the smaller the chance that the relationship being observed is just random. Generally, statisticians use 5% or 0.05 as the acceptable cut-off for statistical significance - anything greater than that we should be a little sceptical about. In r the codes ***, **, **, . are used to indicate significance. We generally want at least a single * next to our coefficient for it to be worth considering. R-Squared - This can be thought of as an indication of how good your model is - a measure of ‘goodness-of-fit’ (of which there are a number of others). \\(r^2\\) is quite an intuitite measure of fit as it ranges between 0 and 1 and can be thought of as the % of variation in the dependent variable (in our case GCSE score) explained by variation in the independent variable(s). In our example, an \\(r^2\\) value of 0.42 indicates that around 42% of the variation in GCSE scores can be explained by variation in unathorised absence from school. In other words, this is quite a good model. The \\(r^2\\) value will increase as more independent explanatory variables are added into the model, so where this might be an issue, the adjusted r-squared value can be used to account for this affect 9.5.3.2 broom The output from the linear regression model is messy and like all things R mess can be tidied, in this case with a broom! Or the package broom which is also party of the package tidymodels. Here let’s load broom and tidy our output…you will need to either install tidymodels or broom. The tidy() function will just make a tibble or the statistical findings from the model! library(broom) tidy(model1) ## # A tibble: 2 × 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 371. 2.16 172. 0 ## 2 unauthorised_absence_in_all_schools_per… -41.2 1.93 -21.4 1.27e-76 We can also use glance() from broom to get a bit more summary information, such as \\(r^2\\) and the adjusted r-squared value. glance(model1) ## # A tibble: 1 × 12 ## r.squared adj.r.squared sigma statistic p.value df logLik AIC BIC ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.423 0.422 16.4 458. 1.27e-76 1 -2638. 5282. 5296. ## # … with 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt; But wait? Didn’t we try to model our GCSE values based on our unauthorised absence variable? Can we see those predictions for each point, yes, yes we can…with the tidypredict_to_column() function from tidypredict, which adds the fit column in the following code. library(tidypredict) Regressiondata %&gt;% tidypredict_to_column(model1) ## Simple feature collection with 626 features and 3 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 503568.2 ymin: 155850.8 xmax: 561957.5 ymax: 200933.9 ## Projected CRS: OSGB 1936 / British National Grid ## First 10 features: ## average_gcse_capped_point_scores_2014 ## 1 321.3 ## 2 337.5 ## 3 342.7 ## 4 353.3 ## 5 372.3 ## 6 339.8 ## 7 307.1 ## 8 361.6 ## 9 347.0 ## 10 336.4 ## unauthorised_absence_in_all_schools_percent_2013 ## 1 0.8 ## 2 0.7 ## 3 0.5 ## 4 0.4 ## 5 0.7 ## 6 0.9 ## 7 0.8 ## 8 0.6 ## 9 0.7 ## 10 0.5 ## geometry fit ## 1 POLYGON ((516401.6 160201.8... 338.4815 ## 2 POLYGON ((517829.6 165447.1... 342.6052 ## 3 POLYGON ((518107.5 167303.4... 350.8525 ## 4 POLYGON ((520480 166909.8, ... 354.9762 ## 5 POLYGON ((522071 168144.9, ... 342.6052 ## 6 POLYGON ((522007.6 169297.3... 334.3579 ## 7 POLYGON ((517175.3 164077.3... 338.4815 ## 8 POLYGON ((517469.3 166878.5... 346.7289 ## 9 POLYGON ((522231.1 166015, ... 342.6052 ## 10 POLYGON ((517460.6 167802.9... 350.8525 9.5.4 Bootstrap resampling If we only fit our model once, how can we be confident about that estiamte? Bootstrap resampling is where we take the original dataset and select random data points from within it, but in order to keep it the same size as the original dataset some records are duplicated. This is known as bootstrap resampling by replacement. So first let’s again get rid of all the coloumns we aren’t using in this model using as they will just slow us down. At the moment we only care about average GCSE scores and unauthorised absecne in schools. Bootstrapdata&lt;- LonWardProfiles%&gt;% clean_names()%&gt;% dplyr::select(average_gcse_capped_point_scores_2014, unauthorised_absence_in_all_schools_percent_2013) Next we are going to create our samples using the function bootstraps(). First we set the seed (to any number), which just means are results will be the same if we are to re-run this analysis, if we don’t then as we are randomly replacing data the next time we do run the code the results could change. Here we have created 1000 versions of our original data (times=1000). apparent means we are using our entire dataset and the full dataset will be kept in our GSCE_boot variable. set.seed(number) just makes sure we get the same result here each time as it could vary. library(rsample) set.seed(99) GCSE_boot &lt;-st_drop_geometry(Bootstrapdata) %&gt;% bootstraps(times = 1000, apparent = TRUE) slice_tail(GCSE_boot, n=5) ## # A tibble: 5 × 2 ## splits id ## &lt;list&gt; &lt;chr&gt; ## 1 &lt;split [626/215]&gt; Bootstrap0997 ## 2 &lt;split [626/215]&gt; Bootstrap0998 ## 3 &lt;split [626/233]&gt; Bootstrap0999 ## 4 &lt;split [626/234]&gt; Bootstrap1000 ## 5 &lt;split [626/626]&gt; Apparent So when we look in GSCE_boot we have 1000 rows, plus our apparent data. Here we are now going to run the linear regression model for each of our bootstrap resampled instances. To do this we are going to use the map() function from the purrr package that is also part of the tidyverse. This lets us apply a function (so our regression formula) to a list (so our splits that we calculated from bootstrap resampling) We need to map over and then given the function to what we are mapping over. So we are mapping (or changing) our splits (from the bootstrap resampled) then apply our regression formula to each split. To make sure we can save the output we will create a new column called model with the mutate() function, remember this just lets us add a column to an existing table. GCSE_models &lt;- GCSE_boot %&gt;% #make new column mutate( #column name is model that contains... model = map(splits, ~ lm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013, data = .))) # let&#39;s look at the first model results GCSE_models$model[[1]] ## ## Call: ## lm(formula = average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013, ## data = .) ## ## Coefficients: ## (Intercept) ## 372.53 ## unauthorised_absence_in_all_schools_percent_2013 ## -41.48 #if you wanted all of them it&#39;s #GCSE_models$model However, this is a very ugly output and pretty hard to understand. Now remember when we just went through the magic of broom? You might have thought that it didn’t do very much! This is where it can really be of use. We want to tidy up our models results so we can actually use them. Firstly let’s add a new coloumn with mutate (coef_info) then take our model coloumn and using the map() function again tidy the outputs (saving the result into that new coef_info column). GCSE_models_tidy &lt;- GCSE_models %&gt;% mutate( coef_info = map(model, tidy)) So this has just added the information about our coefficents to a new column in the original table, but what if we actually want to extract this information, well we can just use unnest() from the tidyr package (also part of the tidyverse) that takes a list-column and makes each element its own row. I know it’s a list column as if you just explore GCSE_models_tidy (just run that in the console) you will see that under coef_info column title it says list. GCSE_coef &lt;- GCSE_models_tidy %&gt;% unnest(coef_info) GCSE_coef ## # A tibble: 2,002 × 8 ## splits id model term estimate std.error statistic p.value ## &lt;list&gt; &lt;chr&gt; &lt;lis&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 &lt;split [626/234]&gt; Bootstra… &lt;lm&gt; (Int… 373. 1.92 194. 0 ## 2 &lt;split [626/234]&gt; Bootstra… &lt;lm&gt; unau… -41.5 1.70 -24.4 4.72e-93 ## 3 &lt;split [626/230]&gt; Bootstra… &lt;lm&gt; (Int… 374. 2.17 173. 0 ## 4 &lt;split [626/230]&gt; Bootstra… &lt;lm&gt; unau… -42.5 1.96 -21.6 7.17e-78 ## 5 &lt;split [626/220]&gt; Bootstra… &lt;lm&gt; (Int… 372. 2.16 172. 0 ## 6 &lt;split [626/220]&gt; Bootstra… &lt;lm&gt; unau… -42.3 1.91 -22.1 1.39e-80 ## 7 &lt;split [626/243]&gt; Bootstra… &lt;lm&gt; (Int… 372. 2.08 179. 0 ## 8 &lt;split [626/243]&gt; Bootstra… &lt;lm&gt; unau… -42.6 1.86 -22.9 9.17e-85 ## 9 &lt;split [626/222]&gt; Bootstra… &lt;lm&gt; (Int… 370. 2.27 163. 0 ## 10 &lt;split [626/222]&gt; Bootstra… &lt;lm&gt; unau… -39.7 2.00 -19.8 2.45e-68 ## # … with 1,992 more rows If you look in the tibble GCSE_coef you will notice under the column heading term that we have intercept and unathorised absence values, here we just want to see the variance of coefficients for unauthorised absence, so let’s filter it… coef &lt;- GCSE_coef %&gt;% filter(term == &quot;unauthorised_absence_in_all_schools_percent_2013&quot;) coef ## # A tibble: 1,001 × 8 ## splits id model term estimate std.error statistic p.value ## &lt;list&gt; &lt;chr&gt; &lt;lis&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 &lt;split [626/234]&gt; Bootstra… &lt;lm&gt; unau… -41.5 1.70 -24.4 4.72e-93 ## 2 &lt;split [626/230]&gt; Bootstra… &lt;lm&gt; unau… -42.5 1.96 -21.6 7.17e-78 ## 3 &lt;split [626/220]&gt; Bootstra… &lt;lm&gt; unau… -42.3 1.91 -22.1 1.39e-80 ## 4 &lt;split [626/243]&gt; Bootstra… &lt;lm&gt; unau… -42.6 1.86 -22.9 9.17e-85 ## 5 &lt;split [626/222]&gt; Bootstra… &lt;lm&gt; unau… -39.7 2.00 -19.8 2.45e-68 ## 6 &lt;split [626/224]&gt; Bootstra… &lt;lm&gt; unau… -40.2 1.89 -21.3 3.20e-76 ## 7 &lt;split [626/226]&gt; Bootstra… &lt;lm&gt; unau… -45.1 1.89 -23.9 5.59e-90 ## 8 &lt;split [626/223]&gt; Bootstra… &lt;lm&gt; unau… -41.5 1.84 -22.6 4.60e-83 ## 9 &lt;split [626/226]&gt; Bootstra… &lt;lm&gt; unau… -40.1 1.94 -20.7 4.59e-73 ## 10 &lt;split [626/232]&gt; Bootstra… &lt;lm&gt; unau… -41.1 2.07 -19.8 4.02e-68 ## # … with 991 more rows Now let’d have a look at the histogram of our coefficients to see the distribution…. coef %&gt;% ggplot(aes(x=estimate)) + geom_histogram(position=&quot;identity&quot;, alpha=0.5, bins=15, fill=&quot;lightblue2&quot;, col=&quot;lightblue3&quot;)+ geom_vline(aes(xintercept=mean(estimate)), color=&quot;blue&quot;, linetype=&quot;dashed&quot;)+ labs(title=&quot;Bootstrap resample estimates&quot;, x=&quot;Coefficient estimates&quot;, y=&quot;Frequency&quot;)+ theme_classic()+ theme(plot.title = element_text(hjust = 0.5)) Now, wouldn’t it be useful to get some confidence intervals based on our bootstrap resample. Well! we can using the int_pctl() from the rsample package, which is also part of tidymodels. Here, we give the function our models (GCSE_models_tidy), tell it what column the statstics are in (coef_info), specify the level of significance (alpha). Now if you recall we set the apparent argument to true earlier on and this is because this is a requirement of int_pctl() library(rsample) int_pctl(GCSE_models_tidy, coef_info, alpha = 0.05) ## # A tibble: 2 × 6 ## term .lower .estimate .upper .alpha .method ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 (Intercept) 367. 371. 376. 0.05 percen… ## 2 unauthorised_absence_in_all_schools_pe… -45.2 -41.2 -37.3 0.05 percen… A change in 1% of unathorised absence reduces the average GCSE point score between between 37.1 and 45.2 points (this is our confidence interval) with a 95% confidence level. we can also change alpha to 0.01, which would be the 99% confidence level, but you’d expect the confidence interval range to be greater. Here our confidence level means that if we ran the same regression model again with different sample data we could be 95% sure that those values would be within our range here. Confidence interval = the range of values that a future estimate will be betweeen Confidence level = the perctange certainty that a future value will be between our confidence interval values Now lets add our predictions to our original data for a visual comparison, we will do this using the augment() function from the package broom, again we will need to use unnest() too. GCSE_aug &lt;- GCSE_models_tidy %&gt;% #sample_n(5) %&gt;% mutate(augmented = map(model, augment))%&gt;% unnest(augmented) There are so many rows in this tibble as the statistics are produced for each point within our original dataset and then added as an additional row. However, note that the statistics are the same within each bootstrap, we will have a quick look into this now. So we know from our London Ward Profiles layer that we have 626 data points, check this with: length(LonWardProfiles$`Average GCSE capped point scores - 2014`) ## [1] 626 Now, let’s have a look at our first bootstrap… firstboot&lt;-filter(GCSE_aug,id==&quot;Bootstrap0001&quot;) firstbootlength &lt;- firstboot %&gt;% dplyr::select(average_gcse_capped_point_scores_2014)%&gt;% pull()%&gt;% length() #nrow(firstboot) Ok, so how do we know that our coefficient is the same for all 626 points within our first bootstrap? Well we can check all of them, but this would just print the coefficent info for all 262…. firstboot$coef_info Another way is just to ask what are the unique values within our coefficient info? uniquecoefficent &lt;- firstboot %&gt;% #select(average_gcse_capped_point_scores_2014) %&gt;% dplyr::select(coef_info)%&gt;% unnest(coef_info)%&gt;% distinct() uniquecoefficent ## # A tibble: 2 × 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 373. 1.92 194. 0 ## 2 unauthorised_absence_in_all_schools_per… -41.5 1.70 -24.4 4.72e-93 #or also this would work #unique(firstboot$coef_info) Right, now it would be really useful if we could plot our original data, but instead of fitting a line of best fit between it we use all the lines from the bootstrap resamples to show the possible variance. ggplot(GCSE_aug, aes(unauthorised_absence_in_all_schools_percent_2013, average_gcse_capped_point_scores_2014))+ # we want our lines to be from the fitted column grouped by our bootstrap id geom_line(aes(y = .fitted, group = id), alpha = .2, col = &quot;cyan3&quot;) + # remember out apparent data is the original within the bootstrap geom_point(data=filter(GCSE_aug,id==&quot;Apparent&quot;))+ #add some labels to x and y labs(x=&quot;unauthorised absence in all schools 2013 (%)&quot;, y=&quot;Average GCSE capped point scores 2014&quot;) #save the file if you need to #ggsave(&quot;insert_filepath and name&quot;) You’ll notice that this plot is slightly different to the one we first produced in Regression Basics as we’ve used geom_point() not geom_jitter() the latter adds a small amount of random variation to the points (not the data). If change in to geom_point() you will get the same plot as we just produced (apart from the bootstrap fitted lines obviously). 9.5.5 Assumptions Underpinning Linear Regression 9.5.6 Assumption 1 - There is a linear relationship between the dependent and independent variables The best way to test for this assumption is to plot a scatter plot similar to the one created earlier. It may not always be practical to create a series of scatter plots, so one quick way to check that a linear relationship is probable is to look at the frequency distributions of the variables. If they are normally distributed, then there is a good chance that if the two variables are in some way correlated, this will be a linear relationship. For example, look at the frequency distributions of our two variables earlier: # use Janitor to clean up the names. LonWardProfiles &lt;- LonWardProfiles %&gt;% clean_names() #let&#39;s check the distribution of these variables first ggplot(LonWardProfiles, aes(x=average_gcse_capped_point_scores_2014)) + geom_histogram(aes(y = ..density..), binwidth = 5) + geom_density(colour=&quot;red&quot;, size=1, adjust=1) ggplot(LonWardProfiles, aes(x=unauthorised_absence_in_all_schools_percent_2013)) + geom_histogram(aes(y = ..density..), binwidth = 0.1) + geom_density(colour=&quot;red&quot;, size=1, adjust=1) We would describe both of these distribution as being relatively ‘normally’ or gaussian disributed, and thus more likely to have a linear correlation (if they are indeed associated). Contrast this with the median house price variable: ggplot(LonWardProfiles, aes(x=median_house_price_2014)) + geom_histogram() We would describe this as a not normal and/or positively ‘skewed’ distribution, i.e. there are more observations towards the lower end of the average house prices observed in the city, however there is a long tail to the distribution, i.e. there are a small number of wards where the average house price is very large indeed. If we plot the raw house price variable against GCSE scores, we get the following scatter plot: qplot(x = median_house_price_2014, y = average_gcse_capped_point_scores_2014, data=LonWardProfiles) This indicates that we do not have a linear relationship, indeed it suggests that this might be a curvilinear relationship. 9.5.6.1 Transforming variables One way that we might be able to achieve a linear relationship between our two variables is to transform the non-normally distributed variable so that it is more normally distributed. There is some debate as to whether this is a wise thing to do as, amongst other things, the coefficients for transformed variables are much harder to interpret, however, we will have a go here to see if it makes a difference. Tukey’s ladder of transformations You might be asking how we could go about transforming our variables. In 1977, Tukey described a series of power transformations that could be applied to a variable to alter its frequency distribution. In regression analysis, you analysts will frequently take the log of a variable to change its distribution, but this is a little crude and may not result in a completely normal distribution. For example, we can take the log of the house price variable: ggplot(LonWardProfiles, aes(x=log(median_house_price_2014))) + geom_histogram() This looks a little more like a normal distribution, but it is still a little skewed. Fortunately in R, we can use the symbox() function in the car package to try a range of transfomations along Tukey’s ladder: symbox(~median_house_price_2014, LonWardProfiles, na.rm=T, powers=seq(-3,3,by=.5)) Observing the plot above, it appears that raising our house price variable to the power of -1 should lead to a more normal distribution: ggplot(LonWardProfiles, aes(x=(median_house_price_2014)^-1)) + geom_histogram() qplot(x = (median_house_price_2014)^-1, y = average_gcse_capped_point_scores_2014, data=LonWardProfiles) Compare this with the logged transformation: qplot(x = log(median_house_price_2014), y = average_gcse_capped_point_scores_2014, data=LonWardProfiles) 9.5.6.2 Should I transform my variables? The decision is down to you as the modeller - it might be that a transformation doesn’t succeed in normalising the distribtuion of your data or that the interpretation after the transformation is problematic, however it is important not to violate the assumptions underpinning the regression model or your conclusions may be on shaky ground. 9.5.7 Assumption 2 - The residuals in your model should be normally distributed This assumption is easy to check. When we ran our Model1 earlier, one of the outputs stored in our Model 1 object is the residual value for each case (Ward) in your dataset. We can access these values using augment() from broom which will add model output to the original GCSE data… We can plot these as a histogram and see if there is a normal distribution: #save the residuals into your dataframe model_data &lt;- model1 %&gt;% augment(., Regressiondata) #plot residuals model_data%&gt;% dplyr::select(.resid)%&gt;% pull()%&gt;% qplot()+ geom_histogram() Examining the histogram above, we can be happy that our residuals look to be relatively normally distributed. 9.5.8 Assumption 3 - No Multicolinearity in the independent variables Now, the regression model we have be experimenting with so far is a simple bivariate (two variable) model. One of the nice things about regression modelling is while we can only easily visualise linear relationships in a two (or maximum 3) dimension scatter plot, mathematically, we can have as many dimensions / variables as we like. As such, we could extend model 1 into a multiple regression model by adding some more explanatory variables that we think could affect GSCE scores. Let’s try the log or ^-1 transformed house price variable from earlier (the rationalle being that higher house prices indicate more affluence and therefore, potentially, more engagement with education): Regressiondata2&lt;- LonWardProfiles%&gt;% clean_names()%&gt;% dplyr::select(average_gcse_capped_point_scores_2014, unauthorised_absence_in_all_schools_percent_2013, median_house_price_2014) model2 &lt;- lm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014), data = Regressiondata2) #show the summary of those outputs tidy(model2) ## # A tibble: 3 × 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 202. 20.1 10.0 4.79e-22 ## 2 unauthorised_absence_in_all_schools_per… -36.2 1.92 -18.9 3.71e-63 ## 3 log(median_house_price_2014) 12.8 1.50 8.50 1.37e-16 glance(model2) ## # A tibble: 1 × 12 ## r.squared adj.r.squared sigma statistic p.value df logLik AIC BIC ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.483 0.482 15.5 291. 4.78e-90 2 -2604. 5215. 5233. ## # … with 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt; #and for future use, write the residuals out model_data2 &lt;- model2 %&gt;% augment(., Regressiondata2) # also add them to the shapelayer LonWardProfiles &lt;- LonWardProfiles %&gt;% mutate(model2resids = residuals(model2)) Examining the output above, it is clear that including median house price into our model improves the fit from an \\(r^2\\) of around 42% to an \\(r^2\\) of 48%. Median house price is also a statistically significant variable. But do our two explanatory variables satisfy the no-multicoliniarity assumption? If not and the variables are highly correlated, then we are effectively double counting the influence of these variables and overstating their explanatory power. To check this, we can compute the product moment correlation coefficient between the variables, using the corrr() pacakge, that’s part of tidymodels. In an ideal world, we would be looking for something less than a 0.8 correlation library(corrr) Correlation &lt;- LonWardProfiles %&gt;% st_drop_geometry()%&gt;% dplyr::select(average_gcse_capped_point_scores_2014, unauthorised_absence_in_all_schools_percent_2013, median_house_price_2014) %&gt;% mutate(median_house_price_2014 =log(median_house_price_2014))%&gt;% correlate() %&gt;% # just focus on GCSE and house prices focus(-average_gcse_capped_point_scores_2014, mirror = TRUE) #visualise the correlation matrix rplot(Correlation) Looking at either the correlation matrix or the correlation plot of that matrix, it’s easy to see that there is a low correlation (around 30%) between our two independent variables. Multiple linear regression can be explained nicely with this example from allison_horst. Let’s meet our Multiple Linear Regression teaching assistants: Here my reseach question might be What are the factors that might lead to variation in dragon weight? We might have both cateogrical predictor variaibles such as if the dragon is spotted then they might weight 0.6 more tons than on average…So if the dragon is not spotted then in the equation bellow 0.6 x (0) — 0 as it’s not spotted, it would be 1 if spotted is 0 so the weight would be 2.4 tonnes. But we could also have a continuous predictor variable …here a 1 foot taller dragon would have an addtional 0.3 tonnes on average, as the equation would be 2.4 + 0.3(1)… We can use these equations to make predicitons about a new dragon…here the dragon is striped, so spotted equals 0, and it’s height is 5.1. So that gives us 2.4 + (0.3*5.1) which equals 3.9 tonnes. However, we need to check the residuals — difference between the predicted weight and acutal weight…here it’s 0.3 tonnes as the actual weight of the dragon was 4.2 tonnes. Then for all the dragons we need to make sure these resisuals are normally distributed, but you should also check all the other assumptions (1-5) shown within this practical and give brief evdience in reports that they are all valid. 9.5.8.1 Variance Inflation Factor (VIF) Another way that we can check for Multicolinearity is to examine the VIF for the model. If we have VIF values for any variable exceeding 10, then we may need to worry and perhaps remove that variable from the analysis: vif(model2) ## unauthorised_absence_in_all_schools_percent_2013 ## 1.105044 ## log(median_house_price_2014) ## 1.105044 Both the correlation plots and examination of VIF indicate that our multiple regression model meets the assumptions around multicollinearity and so we can proceed further. If we wanted to add more variables into our model, it would be useful to check for multicollinearity amongst every variable we want to include, we can do this by computing a correlation matrix for the whole dataset or checking the VIF after running the model: position &lt;- c(10:74) Correlation_all&lt;- LonWardProfiles %&gt;% st_drop_geometry()%&gt;% dplyr::select(position)%&gt;% correlate() rplot(Correlation_all) 9.5.9 Assumption 4 - Homoscedasticity Homoscedasticity means that the errors/residuals in the model exhibit constant / homogenous variance, if they don’t, then we would say that there is hetroscedasticity present. Why does this matter? Andy Field does a much better job of explaining this than I could ever do here - https://www.discoveringstatistics.com/tag/homoscedasticity/ - but essentially, if your errors do not have constant variance, then your parameter estimates could be wrong, as could the estimates of their significance. The best way to check for homo/hetroscedasticity is to plot the residuals in the model against the predicted values. We are looking for a cloud of points with no apparent patterning to them. #print some model diagnositcs. par(mfrow=c(2,2)) #plot to 2 by 2 array plot(model2) In the series of plots above, the first plot (residuals vs fitted), we would hope to find a random cloud of points with a straight horizontal red line. Looking at the plot, the curved red line would suggest some hetroscedasticity, but the cloud looks quite random. Similarly we are looking for a random cloud of points with no apparent patterning or shape in the third plot of standardised residuals vs fitted values. Here, the cloud of points also looks fairly random, with perhaps some shaping indicated by the red line. 9.5.10 Assumption 5 - Independence of Errors This assumption simply states that the residual values (errors) in your model must not be correlated in any way. If they are, then they exhibit autocorrelation which suggests that something might be going on in the background that we have not sufficiently accounted for in our model. 9.5.10.1 Standard Autocorrelation If you are running a regression model on data that do not have explicit space or time dimensions, then the standard test for autocorrelation would be the Durbin-Watson test. This tests whether residuals are correlated and produces a summary statistic that ranges between 0 and 4, with 2 signifiying no autocorrelation. A value greater than 2 suggesting negative autocorrelation and and value of less than 2 indicating postitve autocorrelation. In his excellent text book, Andy Field suggests that you should be concerned with Durbin-Watson test statistics &lt;1 or &gt;3. So let’s see: #run durbin-watson test DW &lt;- durbinWatsonTest(model2) tidy(DW) ## # A tibble: 1 × 5 ## statistic p.value autocorrelation method alternative ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1.61 0 0.193 Durbin-Watson Test two.sided As you can see, the DW statistics for our model is 1.61, so some indication of autocorrelation, but perhaps nothing to worry about. HOWEVER We are using spatially referenced data and as such we should check for spatial-autocorrelation. The first test we should carry out is to map the residuals to see if there are any apparent obvious patterns: #now plot the residuals tmap_mode(&quot;view&quot;) #qtm(LonWardProfiles, fill = &quot;model1_resids&quot;) tm_shape(LonWardProfiles) + tm_polygons(&quot;model2resids&quot;, palette = &quot;RdYlBu&quot;) + tm_shape(lond_sec_schools_sf) + tm_dots(col = &quot;TYPE&quot;) Looking at the map above, there look to be some blue areas next to other blue areas and some red/orange areas next to other red/orange areas. This suggests that there could well be some spatial autocorrelation biasing our model, but can we test for spatial autocorrelation more systematically? Yes - and some of you will remember this from the practical two weeks ago. We can calculate a number of different statistics to check for spatial autocorrelation - the most common of these being Moran’s I. Let’s do that now. #calculate the centroids of all Wards in London coordsW &lt;- LonWardProfiles%&gt;% st_centroid()%&gt;% st_geometry() ## Warning in st_centroid.sf(.): st_centroid assumes attributes are constant over ## geometries of x plot(coordsW) #Now we need to generate a spatial weights matrix (remember from the lecture a couple of weeks ago). We&#39;ll start with a simple binary matrix of queen&#39;s case neighbours LWard_nb &lt;- LonWardProfiles %&gt;% poly2nb(., queen=T) #or nearest neighbours knn_wards &lt;-coordsW %&gt;% knearneigh(., k=4) ## Warning in knearneigh(., k = 4): knearneigh: identical points found ## Warning in knearneigh(., k = 4): knearneigh: kd_tree not available for identical ## points LWard_knn &lt;- knn_wards %&gt;% knn2nb() #plot them plot(LWard_nb, st_geometry(coordsW), col=&quot;red&quot;) plot(LWard_knn, st_geometry(coordsW), col=&quot;blue&quot;) #add a map underneath plot(LonWardProfiles) ## Warning: plotting the first 9 out of 74 attributes; use max.plot = 74 to plot ## all #create a spatial weights matrix object from these weights Lward.queens_weight &lt;- LWard_nb %&gt;% nb2listw(., style=&quot;C&quot;) Lward.knn_4_weight &lt;- LWard_knn %&gt;% nb2listw(., style=&quot;C&quot;) Now run a moran’s I test on the residuals, first using queens neighbours Queen &lt;- LonWardProfiles %&gt;% st_drop_geometry()%&gt;% dplyr::select(model2resids)%&gt;% pull()%&gt;% moran.test(., Lward.queens_weight)%&gt;% tidy() Then nearest k-nearest neighbours Nearest_neighbour &lt;- LonWardProfiles %&gt;% st_drop_geometry()%&gt;% dplyr::select(model2resids)%&gt;% pull()%&gt;% moran.test(., Lward.knn_4_weight)%&gt;% tidy() Queen ## # A tibble: 1 × 7 ## estimate1 estimate2 estimate3 statistic p.value method alternative ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 0.268 -0.0016 0.000533 11.7 9.29e-32 Moran I test und… greater Nearest_neighbour ## # A tibble: 1 × 7 ## estimate1 estimate2 estimate3 statistic p.value method alternative ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 0.292 -0.0016 0.000718 10.9 3.78e-28 Moran I test und… greater Observing the Moran’s I statistic for both Queen’s case neighbours and k-nearest neighbours of 4, we can see that the Moran’s I statistic is somewhere between 0.27 and 0.29. Remembering that Moran’s I ranges from between -1 and +1 (0 indicating no spatial autocorrelation) we can conclude that there is some weak to moderate spatial autocorrelation in our residuals. This means that despite passing most of the assumptions of linear regression, we could have a situation here where the presence of some spatial autocorrelation could be leading to biased estimates of our parameters and significance values. 9.6 Spatial Regression Models 9.6.1 Dealing with Spatially Autocorrelated Residuals - Spatial Lag and Spatial Error models 9.6.1.1 The Spatial Lag (lagged dependent variable) model In the example models we ran above we were testing the null-hypothesis that there is no relationship between the average GCSE scores recorded for secondary school pupils in different Wards in London and other explanatory variables. Running regression models that tested the effects of absence from school and average house price, early indications were that we could reject this null-hypothsis as the regression models ran indicated that close to 50% of the variation in GCSE scores could be explained by variations in unauthorised absence from school and average house prices. However, running a Moran’s I test on the residuals from the model suggested that there might be some spatial autocorreation occurring suggesting that places where the model over-predicted GCSE scores (those shown in blue in the map above with negative residuals) and under-predicted (those shown in red/orange) occasionally were near to each other. Overlaying the locations of secondary schools in London onto the map reveals why this could be the case. Many of the schools in London lie on or near the bounaries of the wards that pupils will live in. Therefore, it is likely that pupils attending a school could come from a number of neighbouring wards. As such the average GCSE score in one ward could be related to that in another as the pupils living in these wards may be attending the same school. This could be the source of the autocorrelation. Ward and Gleditsch (2008) describe this situation (where the value of our \\(y\\) dependent variable - GCSE scores - may be influenced by neighbouring values) and suggest the way to deal with it is to incorporate a spatially-lagged version of this variable amongst the independent variables on the right-hand side of the equation. In this case, Equation 1 would be updated to look like this: (2)\\[y_i = \\beta_0 + \\beta_1x_i + \\rho w_i.y_i + \\epsilon_i\\] In this equation, \\(w\\) is the spatial weights matrix you generated and \\(w_i\\) is vector of all neighbouring areas (in our case, Wards) for any Ward \\(y_i\\). In this model, a positive value for the \\(\\rho w_i.y_i\\) parameter would indicate that the average value for GCSE scores is expected to be higher if, on average, Wards neighbouring also have higher GCSE score values. For more details on running a spatially lagged regression model and interpreting the outputs, see the chapter on spatially lagged models by Ward and Gleditsch (2008) available online here: https://methods.sagepub.com/book/spatial-regression-models/n2.xml Let’s run the original model again to remind ourselves of the paramters: #Original Model model2 &lt;- lm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014), data = LonWardProfiles) tidy(model2) ## # A tibble: 3 × 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 202. 20.1 10.0 4.79e-22 ## 2 unauthorised_absence_in_all_schools_per… -36.2 1.92 -18.9 3.71e-63 ## 3 log(median_house_price_2014) 12.8 1.50 8.50 1.37e-16 Now run a spatially-lagged regression model with a queen’s case weights matrix library(spatialreg) slag_dv_model2_queen &lt;- lagsarlm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014), data = LonWardProfiles, nb2listw(LWard_nb, style=&quot;C&quot;), method = &quot;eigen&quot;) #what do the outputs show? tidy(slag_dv_model2_queen) ## # A tibble: 4 × 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 rho 5.16e-3 0.00759 0.679 4.97e- 1 ## 2 (Intercept) 2.02e+2 20.1 10.1 0 ## 3 unauthorised_absence_in_all_schools_per… -3.62e+1 1.91 -18.9 0 ## 4 log(median_house_price_2014) 1.26e+1 1.53 8.21 2.22e-16 #glance() gives model stats but this need something produced from a linear model #here we have used lagsarlm() glance(slag_dv_model2_queen) ## # A tibble: 1 × 6 ## r.squared AIC BIC deviance logLik nobs ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 0.484 5217. 5239. 150150. -2604. 626 t&lt;-summary(slag_dv_model2_queen) Running the spatially-lagged model with a Queen’s case spatial weights matrix reveals that in this example, there is an insignificant and small effect associated with the spatially lagged dependent variable. However, a different conception of neighbours we might get a different outcome Here: Rho is our spatial lag that measures the variable in the surrounding spatial areas as defined by the spatial weight matrix. We use this as an extra explanatory variable to account for clustering (identified by Moran’s I) Likelihood ratio (LR) test shows if the addition of the lag is an improvement and if that’s significant Lagrange Multiplier (LM) is a test for the absence of spatial autocorrelation in the lag model residuals. If significant then you can reject the Null (no spatial autocorrelation) and accept the alternative (is spatial autocorrelcation) Warning do not compare the coefficients of this to regular OLS — see Fitting and interpreting a spatially lagged model #run a spatially-lagged regression model slag_dv_model2_knn4 &lt;- lagsarlm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014), data = LonWardProfiles, nb2listw(LWard_knn, style=&quot;C&quot;), method = &quot;eigen&quot;) #what do the outputs show? tidy(slag_dv_model2_knn4) ## # A tibble: 4 × 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 rho 0.374 0.0409 9.14 0 ## 2 (Intercept) 116. 20.1 5.76 8.39e- 9 ## 3 unauthorised_absence_in_all_schools_per… -28.5 1.97 -14.5 0 ## 4 log(median_house_price_2014) 9.29 1.48 6.28 3.36e-10 Using the 4 nearest neighbours instead of just considering all adjcent zones in the spatial weights matrix, the size and significance of the spatially lagged term changes quite dramatically. In the 4 nearest neighbour model it is both quite large, postitive and statistically significant (&lt;0.05), conversely the effects of unauthorised absence and median house-price are reduced. What this means is that in our study area, the average GCSE score recorded in Wards across the city varies partially with the average GCSE score found in neighbouring Wards. Given the distribution of schools in the captial in relation to where pupils live, this makes sense as schools might draw pupils from a few close neighbouring wards rather than all neighbour bordering a particular Ward. Effectively, by ignoring the effects of spatial autocorrelation in the original OLS model, the impacts of unauthorised absence and affluence (as represented by average house price) were slightly overplayed. We can also now check that the residuals from the spatially lagged model are now no-longer exhibiting spatial autocorrelation: #write out the residuals LonWardProfiles &lt;- LonWardProfiles %&gt;% mutate(slag_dv_model2_knn_resids = residuals(slag_dv_model2_knn4)) KNN4Moran &lt;- LonWardProfiles %&gt;% st_drop_geometry()%&gt;% dplyr::select(slag_dv_model2_knn_resids)%&gt;% pull()%&gt;% moran.test(., Lward.knn_4_weight)%&gt;% tidy() KNN4Moran ## # A tibble: 1 × 7 ## estimate1 estimate2 estimate3 statistic p.value method alternative ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 0.0468 -0.0016 0.000717 1.81 0.0353 Moran I test unde… greater 9.6.1.2 The Spatial Error Model Another way of coneptualising spatial dependence in regression models is not through values of the dependent variable in some areas affecting those in neighbouring areas (as they do in the spatial lag model), but in treating the spatial autocorrelation in the residuals as something that we need to deal with, perhaps reflecting some spatial autocorrelation amongst unobserved independent variables or some other mis-specification of the model. Ward and Gleditsch (2008) characterise this model as seeing spatial autocorrelation as a nuisance rather than being particularly informative, however it can still be handled within the model, albeit slightly differently. The spatial error model can be written: (3)\\[y_i = \\beta_0 + \\beta_1x_i + \\lambda w_i.\\xi_i + \\epsilon_i\\] where \\(\\lambda\\) is a measure of the spatial autocorrelation of the residuals for neighbouring residuals and \\(\\xi_i\\) is the spatial component of the error term If there is no spatial autocorrelation in the residuals, we would expect the \\(\\lambda\\) parameter to = 0 and the other parameters in the regression equation would be the same as in the OLS regression. For more detail on the spatial error model, see Ward and Gleditsch (2008) - https://methods.sagepub.com/Book/spatial-regression-models/n3.xml We can run a spatial error model on the same data below: sem_model1 &lt;- errorsarlm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014), data = LonWardProfiles, nb2listw(LWard_knn, style=&quot;C&quot;), method = &quot;eigen&quot;) tidy(sem_model1) ## # A tibble: 4 × 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 154. 28.2 5.44 5.28e- 8 ## 2 unauthorised_absence_in_all_schools_per… -32.3 2.22 -14.5 0 ## 3 log(median_house_price_2014) 16.2 2.12 7.62 2.55e-14 ## 4 lambda 0.475 0.0451 10.5 0 Comparing the results of the spatial error model with the spatially lagged model and the original OLS model, the suggestion here is that the spatially correlated errors in residuals lead to an over-estimate of the importance of unauthorised absence in the OLS model and an under-estimate of the importance of affluence, represented by median house prices. Conversely, the spatial error model estimates higher parameter values for both variables when compared to the spatially lagged model. Both the \\(\\lambda\\) parameter in the spatial error model and the \\(\\rho\\) parameter in the spatially lagged model are larger than their standard errors, so we can conclude that spatial dependence should be borne in mind when interpreteing the results of this regression model. 9.6.2 Spatial regression model in R We will now read in some extra data which we will use shortly extradata &lt;- read_csv(&quot;https://www.dropbox.com/s/qay9q1jwpffxcqj/LondonAdditionalDataFixed.csv?raw=1&quot;) #add the extra data too LonWardProfiles &lt;- LonWardProfiles%&gt;% left_join(., extradata, by = c(&quot;gss_code&quot; = &quot;Wardcode&quot;))%&gt;% clean_names() #print some of the column names LonWardProfiles%&gt;% names()%&gt;% tail(., n=10) ## [1] &quot;ward_code&quot; &quot;pct_shared_ownership2011&quot; ## [3] &quot;pct_rent_free2011&quot; &quot;candidate&quot; ## [5] &quot;inner_outer&quot; &quot;x&quot; ## [7] &quot;y&quot; &quot;avg_gcse2011&quot; ## [9] &quot;unauth_absence_schools11&quot; &quot;geometry&quot; 9.6.3 Extending your regression model - Dummy Variables What if instead of fitting one line to our cloud of points, we could fit several depending on whether the Wards we were analysing fell into some or other group. What if the relationship between attending school and achieving good exam results varied between inner and outer London, for example. Could we test for that? Well yes we can - quite easily in fact. If we colour the points representing Wards for Inner and Outer London differently, we can start to see that there might be something interesting going on. Using 2011 data (as there are not the rounding errors that there are in the more recent data), there seems to be a stronger relationship between absence and GCSE scores in Outer London than Inner London. We can test for this in a standard linear regression model. p &lt;- ggplot(LonWardProfiles, aes(x=unauth_absence_schools11, y=average_gcse_capped_point_scores_2014)) p + geom_point(aes(colour = inner_outer)) Dummy variables are always categorical data (inner or outer London, or red / blue etc.). When we incorporate them into a regression model, they serve the purpose of splitting our analysis into groups. In the graph above, it would mean, effectively, having a separate regression line for the red points and a separate line for the blue points. Let’s try it! #first, let&#39;s make sure R is reading our InnerOuter variable as a factor #see what it is at the moment... isitfactor &lt;- LonWardProfiles %&gt;% dplyr::select(inner_outer)%&gt;% summarise_all(class) isitfactor ## Simple feature collection with 2 features and 1 field ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 503568.2 ymin: 155850.8 xmax: 561957.5 ymax: 200933.9 ## Projected CRS: OSGB 1936 / British National Grid ## inner_outer geometry ## 1 character POLYGON ((528100.9 160037.3... ## 2 character POLYGON ((528100.9 160037.3... # change to factor LonWardProfiles&lt;- LonWardProfiles %&gt;% mutate(inner_outer=as.factor(inner_outer)) #now run the model model3 &lt;- lm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014) + inner_outer, data = LonWardProfiles) tidy(model3) ## # A tibble: 4 × 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 97.6 24.1 4.06 5.62e- 5 ## 2 unauthorised_absence_in_all_schools_per… -30.1 2.03 -14.8 7.02e-43 ## 3 log(median_house_price_2014) 19.8 1.74 11.4 2.09e-27 ## 4 inner_outerOuter 10.9 1.51 7.24 1.30e-12 So how can we interpret this? Well, the dummy variable is statistically significant and the coefficient tells us the difference between the two groups (Inner and Outer London) we are comparing. In this case, it is telling us that living in a Ward in outer London will improve your average GCSE score by 10.93 points, on average, compared to if you lived in Inner London. The R-squared has increased slightly, but not by much. You will notice that despite there being two values in our dummy variable (Inner and Outer), we only get one coefficient. This is because with dummy variables, one value is always considered to be the control (comparison/reference) group. In this case we are comparing Outer London to Inner London. If our dummy variable had more than 2 levels we would have more coefficients, but always one as the reference. The order in which the dummy comparisons are made is determined by what is known as a ‘contrast matrix’. This determines the treatment group (1) and the control (reference) group (0). We can view the contrast matrix using the contrasts() function: contrasts(LonWardProfiles$inner_outer) ## Outer ## Inner 0 ## Outer 1 If we want to change the reference group, there are various ways of doing this. We can use the contrasts() function, or we can use the relevel() function. Let’s try it: LonWardProfiles &lt;- LonWardProfiles %&gt;% mutate(inner_outer = relevel(inner_outer, ref=&quot;Outer&quot;)) model3 &lt;- lm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014) + inner_outer, data = LonWardProfiles) tidy(model3) ## # A tibble: 4 × 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 109. 23.2 4.68 3.53e- 6 ## 2 unauthorised_absence_in_all_schools_per… -30.1 2.03 -14.8 7.02e-43 ## 3 log(median_house_price_2014) 19.8 1.74 11.4 2.09e-27 ## 4 inner_outerInner -10.9 1.51 -7.24 1.30e-12 You will notice that the only thing that has changed in the model is that the coefficient for the inner_outer variable now relates to Inner London and is now negative (meaning that living in Inner London is likely to reduce your average GCSE score by 10.93 points compared to Outer London). The rest of the model is exactly the same. 9.6.4 TASK: Investigating Further - Adding More Explanatory Variables into a multiple regression model Now it’s your turn. You have been shown how you could begin to model average GCSE scores across London, but the models we have built so far have been fairly simple in terms of explanatory variables. You should try and build the optimum model of GCSE performance from your data in your LondonWards dataset. Experiment with adding different variables - when building a regression model in this way, you are trying to hit a sweet spot between increasing your R-squared value as much as possible, but with as few explanatory variables as possible. 9.6.4.1 A few things to watch out for… You should never just throw variables at a model without a good theoretical reason for why they might have an influence. Choose your variables carefully! Be prepared to take variables out of your model either if a new variable confounds (becomes more important than) earlier variables or turns out not to be significant. For example, let’s try adding the rate of drugs related crime (logged as it is a positively skewed variable, where as the log is normal) and the number of cars per household… are these variables significant? What happens to the spatial errors in your models? 9.7 Task 3 - Spatial Non-stationarity and Geographically Weighted Regression Models (GWR) Here’s my final model from the last section: #select some variables from the data file myvars &lt;- LonWardProfiles %&gt;% dplyr::select(average_gcse_capped_point_scores_2014, unauthorised_absence_in_all_schools_percent_2013, median_house_price_2014, rate_of_job_seekers_allowance_jsa_claimants_2015, percent_with_level_4_qualifications_and_above_2011, inner_outer) #check their correlations are OK Correlation_myvars &lt;- myvars %&gt;% st_drop_geometry()%&gt;% dplyr::select(-inner_outer)%&gt;% correlate() #run a final OLS model model_final &lt;- lm(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014) + inner_outer + rate_of_job_seekers_allowance_jsa_claimants_2015 + percent_with_level_4_qualifications_and_above_2011, data = myvars) tidy(model_final) ## # A tibble: 6 × 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 240. 27.9 8.59 7.02e-17 ## 2 unauthorised_absence_in_all_schools_per… -23.6 2.16 -10.9 1.53e-25 ## 3 log(median_house_price_2014) 8.41 2.26 3.72 2.18e- 4 ## 4 inner_outerInner -10.4 1.65 -6.30 5.71e-10 ## 5 rate_of_job_seekers_allowance_jsa_claim… -2.81 0.635 -4.43 1.12e- 5 ## 6 percent_with_level_4_qualifications_and… 0.413 0.0784 5.27 1.91e- 7 LonWardProfiles &lt;- LonWardProfiles %&gt;% mutate(model_final_res = residuals(model_final)) par(mfrow=c(2,2)) plot(model_final) qtm(LonWardProfiles, fill = &quot;model_final_res&quot;) final_model_Moran &lt;- LonWardProfiles %&gt;% st_drop_geometry()%&gt;% dplyr::select(model_final_res)%&gt;% pull()%&gt;% moran.test(., Lward.knn_4_weight)%&gt;% tidy() final_model_Moran ## # A tibble: 1 × 7 ## estimate1 estimate2 estimate3 statistic p.value method alternative ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 0.224 -0.0016 0.000718 8.42 1.91e-17 Moran I test und… greater Now, we probably could stop at running a spatial error model at this point, but it could be that rather than spatial autocorrelation causing problems with our model, it might be that a “global” regression model does not capture the full story. In some parts of our study area, the relationships between the dependent and independent variable may not exhibit the same slope coefficient. While, for example, increases in unauthorised absence usually are negatively correlated with GCSE score (students missing school results in lower exam scores), in some parts of the city, they could be positively correlated (in affluent parts of the city, rich parents may enrol their children for just part of the year and then live elsewhere in the world for another part of the year, leading to inflated unauthorised absence figures. Ski holidays are cheaper during the school term, but the pupils will still have all of the other advantages of living in a well off household that will benefit their exam scores. If this occurs, then we have ‘non-stationarity’ - this is when the global model does not represent the relationships between variables that might vary locally. This part of the practical will only skirt the edges of GWR, for much more detail you should visit the GWR website which is produced and maintained by Prof Chris Brunsdon and Dr Martin Charlton who originally developed the technique - http://gwr.nuim.ie/ There are various packages which will carry out GWR in R, for this pracical we we use spgwr (mainly because it was the first one I came across), although you could also use GWmodel or gwrr. I should also acknowledge the guide on GWR produced by the University of Bristol, which was a great help when producing this exercise. However, to use spgwr we need to convert our data from sf to sp format, this is simply done using as(data, \"Spatial\")… !!!HERE!!! library(spgwr) st_crs(LonWardProfiles) = 27700 ## Warning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for ## that LonWardProfilesSP &lt;- LonWardProfiles %&gt;% as(., &quot;Spatial&quot;) st_crs(coordsW) = 27700 ## Warning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for ## that coordsWSP &lt;- coordsW %&gt;% as(., &quot;Spatial&quot;) coordsWSP ## class : SpatialPoints ## features : 626 ## extent : 505215.1, 557696.2, 157877.7, 199314 (xmin, xmax, ymin, ymax) ## crs : +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +units=m +no_defs #calculate kernel bandwidth GWRbandwidth &lt;- gwr.sel(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014) + inner_outer + rate_of_job_seekers_allowance_jsa_claimants_2015 + percent_with_level_4_qualifications_and_above_2011, data = LonWardProfilesSP, coords=coordsWSP, adapt=T) ## Warning in gwr.sel(average_gcse_capped_point_scores_2014 ~ ## unauthorised_absence_in_all_schools_percent_2013 + : data is Spatial* object, ## ignoring coords argument ## Adaptive q: 0.381966 CV score: 124832.2 ## Adaptive q: 0.618034 CV score: 126396.1 ## Adaptive q: 0.236068 CV score: 122752.4 ## Adaptive q: 0.145898 CV score: 119960.5 ## Adaptive q: 0.09016994 CV score: 116484.6 ## Adaptive q: 0.05572809 CV score: 112628.7 ## Adaptive q: 0.03444185 CV score: 109427.7 ## Adaptive q: 0.02128624 CV score: 107562.9 ## Adaptive q: 0.01315562 CV score: 108373.2 ## Adaptive q: 0.02161461 CV score: 107576.6 ## Adaptive q: 0.0202037 CV score: 107505.1 ## Adaptive q: 0.01751157 CV score: 107333 ## Adaptive q: 0.01584775 CV score: 107175.5 ## Adaptive q: 0.01481944 CV score: 107564.8 ## Adaptive q: 0.01648327 CV score: 107187.9 ## Adaptive q: 0.01603246 CV score: 107143.9 ## Adaptive q: 0.01614248 CV score: 107153.1 ## Adaptive q: 0.01607315 CV score: 107147.2 ## Adaptive q: 0.01596191 CV score: 107143 ## Adaptive q: 0.01592122 CV score: 107154.4 ## Adaptive q: 0.01596191 CV score: 107143 #run the gwr model gwr.model = gwr(average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + log(median_house_price_2014) + inner_outer + rate_of_job_seekers_allowance_jsa_claimants_2015 + percent_with_level_4_qualifications_and_above_2011, data = LonWardProfilesSP, coords=coordsWSP, adapt=GWRbandwidth, hatmatrix=TRUE, se.fit=TRUE) ## Warning in gwr(average_gcse_capped_point_scores_2014 ~ ## unauthorised_absence_in_all_schools_percent_2013 + : data is Spatial* object, ## ignoring coords argument ## Warning in proj4string(data): CRS object has comment, which is lost in output; in tests, see ## https://cran.r-project.org/web/packages/sp/vignettes/CRS_warnings.html ## Warning in sqrt(betase): NaNs produced ## Warning in sqrt(betase): NaNs produced ## Warning in showSRID(uprojargs, format = &quot;PROJ&quot;, multiline = &quot;NO&quot;, prefer_proj ## = prefer_proj): Discarded datum Unknown based on Airy 1830 ellipsoid in Proj4 ## definition #print the results of the model gwr.model ## Call: ## gwr(formula = average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + ## log(median_house_price_2014) + inner_outer + rate_of_job_seekers_allowance_jsa_claimants_2015 + ## percent_with_level_4_qualifications_and_above_2011, data = LonWardProfilesSP, ## coords = coordsWSP, adapt = GWRbandwidth, hatmatrix = TRUE, ## se.fit = TRUE) ## Kernel function: gwr.Gauss ## Adaptive quantile: 0.01596191 (about 9 of 626 data points) ## Summary of GWR coefficient estimates at data points: ## Warning in print.gwr(x): NAs in coefficients dropped ## Min. 1st Qu. ## X.Intercept. -345.01649 -14.73075 ## unauthorised_absence_in_all_schools_percent_2013 -47.06120 -31.08397 ## log.median_house_price_2014. -0.55994 11.18979 ## inner_outerInner -24.36827 -10.44459 ## rate_of_job_seekers_allowance_jsa_claimants_2015 1.43895 10.72734 ## percent_with_level_4_qualifications_and_above_2011 -0.06701 0.49946 ## Median 3rd Qu. ## X.Intercept. 81.81663 179.15965 ## unauthorised_absence_in_all_schools_percent_2013 -14.04901 -5.00033 ## log.median_house_price_2014. 18.00032 22.78750 ## inner_outerInner -6.58838 -3.33210 ## rate_of_job_seekers_allowance_jsa_claimants_2015 16.11748 26.08932 ## percent_with_level_4_qualifications_and_above_2011 0.72555 1.07515 ## Max. Global ## X.Intercept. 318.94967 239.9383 ## unauthorised_absence_in_all_schools_percent_2013 6.79870 -23.6167 ## log.median_house_price_2014. 44.78874 8.4136 ## inner_outerInner 3.98708 -10.3690 ## rate_of_job_seekers_allowance_jsa_claimants_2015 52.82565 -2.8135 ## percent_with_level_4_qualifications_and_above_2011 3.04231 0.4127 ## Number of data points: 626 ## Effective number of parameters (residual: 2traceS - traceS&#39;S): 160.9269 ## Effective degrees of freedom (residual: 2traceS - traceS&#39;S): 465.0731 ## Sigma (residual: 2traceS - traceS&#39;S): 12.35905 ## Effective number of parameters (model: traceS): 116.0071 ## Effective degrees of freedom (model: traceS): 509.9929 ## Sigma (model: traceS): 11.80222 ## Sigma (ML): 10.65267 ## AICc (GWR p. 61, eq 2.33; p. 96, eq. 4.21): 5026.882 ## AIC (GWR p. 96, eq. 4.22): 4854.513 ## Residual sum of squares: 71038.1 ## Quasi-global R2: 0.7557128 The output from the GWR model reveals how the coefficients vary across the 625 Wards in our London Study region. You will see how the global coefficients are exactly the same as the coefficients in the earlier lm model. In this particular model (yours will look a little different if you have used different explanatory variables), if we take unauthorised absence from school, we can see that the coefficients range from a minimum value of -47.06 (1 unit change in unauthorised absence resulting in a drop in average GCSE score of -47.06) to +6.8 (1 unit change in unauthorised absence resulting in an increase in average GCSE score of +6.8). For half of the wards in the dataset, as unauthorised absence rises by 1 point, GCSE scores will decrease between -30.80 and -14.34 points (the inter-quartile range between the 1st Qu and the 3rd Qu). You will notice that the R-Squared value has improved - this is not uncommon for GWR models, but it doesn’t necessarily mean they are definitely better than global models. The small number of cases under the kernel means that GW models have been criticised for lacking statistical robustness. Coefficient ranges can also be seen for the other variables and they suggest some interesting spatial patterning. To explore this we can plot the GWR coefficients for different variables. Firstly we can attach the coefficients to our original dataframe - this can be achieved simply as the coefficients for each ward appear in the same order in our spatial points dataframe as they do in the original dataframe. results &lt;- as.data.frame(gwr.model$SDF) names(results) ## [1] &quot;sum.w&quot; ## [2] &quot;X.Intercept.&quot; ## [3] &quot;unauthorised_absence_in_all_schools_percent_2013&quot; ## [4] &quot;log.median_house_price_2014.&quot; ## [5] &quot;inner_outerInner&quot; ## [6] &quot;rate_of_job_seekers_allowance_jsa_claimants_2015&quot; ## [7] &quot;percent_with_level_4_qualifications_and_above_2011&quot; ## [8] &quot;X.Intercept._se&quot; ## [9] &quot;unauthorised_absence_in_all_schools_percent_2013_se&quot; ## [10] &quot;log.median_house_price_2014._se&quot; ## [11] &quot;inner_outerInner_se&quot; ## [12] &quot;rate_of_job_seekers_allowance_jsa_claimants_2015_se&quot; ## [13] &quot;percent_with_level_4_qualifications_and_above_2011_se&quot; ## [14] &quot;gwr.e&quot; ## [15] &quot;pred&quot; ## [16] &quot;pred.se&quot; ## [17] &quot;localR2&quot; ## [18] &quot;rate_of_job_seekers_allowance_jsa_claimants_2015_EDF&quot; ## [19] &quot;X.Intercept._se_EDF&quot; ## [20] &quot;unauthorised_absence_in_all_schools_percent_2013_se_EDF&quot; ## [21] &quot;log.median_house_price_2014._se_EDF&quot; ## [22] &quot;inner_outerInner_se_EDF&quot; ## [23] &quot;rate_of_job_seekers_allowance_jsa_claimants_2015_se_EDF&quot; ## [24] &quot;percent_with_level_4_qualifications_and_above_2011_se_EDF&quot; ## [25] &quot;pred.se.1&quot; #attach coefficients to original SF LonWardProfiles2 &lt;- LonWardProfiles %&gt;% mutate(coefUnauthAbs = results$unauthorised_absence_in_all_schools_percent_2013, coefHousePrice = results$log.median_house_price_2014., coefJSA = rate_of_job_seekers_allowance_jsa_claimants_2015, coefLev4Qual = percent_with_level_4_qualifications_and_above_2011) tm_shape(LonWardProfiles2) + tm_polygons(col = &quot;coefUnauthAbs&quot;, palette = &quot;RdBu&quot;, alpha = 0.5) Now how would you plot the House price coeffeicent, Job seekers allowance and level 4 qualification coefficient? Taking the first plot, which is for the unauthorised absence coefficients, we can see that for the majority of boroughs in London, there is the negative relationship we would expect - i.e. as unauthorised absence goes up, exam scores go down. For three boroughs (Westminster, Kensington &amp; Chelsea and Hammersmith and Fulham, as well as an area near Bexleyheath in South East London - some of the richest in London), however, the relationship is positive - as unauthorised school absence increases, so does average GCSE score. This is a very interesting pattern and counterintuitive pattern, but may partly be explained the multiple homes owned by many living in these boroughs (students living in different parts of the country and indeed the world for significant periods of the year), foreign holidays and the over representation of private schooling of those living in these areas. If this is not the case and unauthorised absence from school is reflecting the unauthorised absence of poorer students attending local, inner city schools, then high GCSE grades may also reflect the achievements of those who are sent away to expensive fee-paying schools elsewhere in the country and who return to their parental homes later in the year. Either way, these factors could explain these results. Of course, these results may not be statistically significant across the whole of London. Roughly speaking, if a coefficient estimate is more than 2 standard errors away from zero, then it is “statistically significant”. To calculate standard errors, for each variable you can use a formula similar to this: #run the significance test sigTest = abs(gwr.model$SDF$&quot;log.median_house_price_2014.&quot;)-2 * gwr.model$SDF$&quot;log.median_house_price_2014._se&quot; #store significance results LonWardProfiles2 &lt;- LonWardProfiles2 %&gt;% mutate(GWRUnauthSig = sigTest) If this is greater than zero (i.e. the estimate is more than two standard errors away from zero), it is very unlikely that the true value is zero, i.e. it is statistically significant (at nearly the 95% confidence level) You should now calculate these for each variable in your GWR model and See if you can plot them on a map, for example: tm_shape(LonWardProfiles2) + tm_polygons(col = &quot;GWRUnauthSig&quot;, palette = &quot;RdYlBu&quot;) From the results of your GWR exercise, what are you able to conclude about the geographical variation in your explanatory variables when predicting your dependent variable? 9.8 Feedback Was anything that we explained unclear this week or was something really clear…let us know using the feedback form. It’s anonymous and we’ll use the responses to clear any issues up in the future / adapt the material. "],["advanced-r-maup-and-more-regression.html", "Chapter 10 Advanced R, MAUP and more regression 10.1 Learning outcomes 10.2 Homework 10.3 Recommended listening  10.4 Introduction 10.5 MAUP 10.6 Regression relationships 10.7 Advanced regression 10.8 More resources 10.9 Extension 10.10 Acknowledgement 10.11 Feedback", " Chapter 10 Advanced R, MAUP and more regression 10.1 Learning outcomes Describe, explain and visualise the MAUP problem Design and use loops and functions Execute linear, Ridge and LASSO regression to predict values (e.g. future or missing) Critically evaluate different regression approaches 10.2 Homework Outside of our schedulded sessions you should be doing around 12 hours of extra study per week. Feel free to follow your own GIS interests, but good places to start include the following: Assignment From weeks 10 until the assignment deadline, undertake your analysis, then write up your discussion and conclusion (that includes recommendations). Before submission Check that your assignment follows the standard model of scientific investigation. You may need to update your introduction and literature review based on the analysis you undertook to ensure a seamless narrative throughout. Reading This week: For advanced R coding Chapter 5 “Control flow” from Advacned R by Hadley Wickham. For more advanced R inclduing functions Chapter 10 “Scripts, algorithms and functions” from Geocomputation with R by Lovelace, Nowosad and Muenchow (2020). For Ridge and LASSO regression Chapter 4 “Linear models III: shrinkage, multivariate response, and big data” from Predictive Modeling by Portugués (2020). Remember this is just a starting point, explore the reading list, practical and lecture for more ideas. 10.3 Recommended listening  Some of these practicals are long, take regular breaks and have a listen to some of our fav tunes each week. Andy Adam6 letters: LSB, DRS. Oh yes! 10.4 Introduction The Modifiable Areal Unit Problem (MAUP) represents the related effects of scale and aggregation on all geographic data and analysis. It was first deomstrated by the geographer Stan Openshaw in 1984 who showed that as you aggregated results to diffrent spatial units the reults could be manipulated to show different outcomes. Throughout this practical book we’ve considered London boroughs, but would any of the results change if we considered the data at ward level? Are we hiding any trends because we have just used the borough data that summed all of the wards within the borough? It’s important to consider what is the most appropriate spatial unit for your analysis and provide appropriate reasoning. Even this is pretty straightforward (e.g. the data was only provided at the borough level) you must contextualise this and describe any potential limitations of it. In this practical i will firstly demonstrate the MAUP in action using some more advanced R code. Then we will have a look at some techniques to model and validate data. Here we will be using London brough and ward data from practical 1. As we’re getting better with R, we will try to automate almost everthing — meaning that if you gave this code to someone else they could just run it without any data files and generate the same result. The only thing we won’t automate later on is loading an excel file… i did find a function online that would let us read it from the interweb but it was more hassle than it was worth. I don’t know why the data isn’t just also distributed as a .csv. 10.5 MAUP 10.5.1 Get the data Download and unzip the London statistical gis boundaries. # make a temp file to store the .zip in download.file(&quot;https://data.london.gov.uk/download/statistical-gis-boundary-files-london/9ba8c833-6370-4b11-abdc-314aa020d5e0/statistical-gis-boundaries-london.zip&quot;, destfile=&quot;prac10_data/statistical-gis-boundaries-london.zip&quot;) library(tidyverse) library(fs) listfiles&lt;-dir_info(here::here(&quot;prac10_data&quot;)) %&gt;% dplyr::filter(str_detect(path, &quot;statistical-gis-boundaries-london.zip&quot;)) %&gt;% dplyr::select(path)%&gt;% pull()%&gt;% #print out the .gz file print()%&gt;% as.character()%&gt;% utils::unzip(exdir=here::here(&quot;prac10_data&quot;)) ## C:/Users/Andy/OneDrive - University College London/Teaching/CASA0005/2020_2021/CASA0005repo/prac10_data/statistical-gis-boundaries-london.zip Using a recent update we could also change this a bit with the pins() package that downloads and caches the url and automatically checks for file changes, only re-downloading if needed! library(pins) pinexample&lt;-pins::pin(&quot;https://data.london.gov.uk/download/statistical-gis-boundary-files-london/9ba8c833-6370-4b11-abdc-314aa020d5e0/statistical-gis-boundaries-london.zip&quot;) pins() also lets you share data easily, have a look the RStudio pins blog post for more information. Take the downloaded data and filter it based on the filename that contains: Borough OR Ward_ AND .shp using grepl() boroughsandwards&lt;-dir_info(here::here(&quot;prac9_data&quot;, &quot;statistical-gis-boundaries-london&quot;, &quot;ESRI&quot;))%&gt;% #$ means exact match dplyr::filter(str_detect(path, &quot;London_Ward_CityMerged.shp$|London_Borough_Excluding_MHW.shp$&quot;))%&gt;% dplyr::select(path)%&gt;% pull() Now read in both of the files using map() that applies a function (here st_read() from the sf package) to a list. map() comes from the purrr package which extends R’s functional programming ability. library(sf) boroughsandwardssf&lt;-map(boroughsandwards, st_read) ## Reading layer `London_Borough_Excluding_MHW&#39; from data source ## `C:\\Users\\Andy\\OneDrive - University College London\\Teaching\\CASA0005\\2020_2021\\CASA0005repo\\prac9_data\\statistical-gis-boundaries-london\\ESRI\\London_Borough_Excluding_MHW.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 33 features and 7 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 503568.2 ymin: 155850.8 xmax: 561957.5 ymax: 200933.9 ## Projected CRS: OSGB 1936 / British National Grid ## Reading layer `London_Ward_CityMerged&#39; from data source ## `C:\\Users\\Andy\\OneDrive - University College London\\Teaching\\CASA0005\\2020_2021\\CASA0005repo\\prac9_data\\statistical-gis-boundaries-london\\ESRI\\London_Ward_CityMerged.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 625 features and 7 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 503568.2 ymin: 155850.8 xmax: 561957.5 ymax: 200933.9 ## Projected CRS: OSGB 1936 / British National Grid To map or access each individual shapefile it’s just… library(tmap) tmap_mode(&quot;plot&quot;) qtm(boroughsandwardssf[[2]]) # or change to 1 Get the data for Airbnb Airbnb &lt;- read_csv(&quot;http://data.insideairbnb.com/united-kingdom/england/london/2022-03-09/data/listings.csv.gz&quot;) And for OSM we’ll download it from geofabrik, you can also use the OSM Application Programming Interface (API) but there is a limit on the number of points downloadable per call so you’d have to do something a bit more complicated to get the whole of London…however, I have provided an example of the api call. library(memisc) download.file(&quot;http://download.geofabrik.de/europe/great-britain/england/greater-london-latest-free.shp.zip&quot;, mode=&#39;wb&#39;, destfile=&quot;prac10_data/geofabrik.zip&quot;) listfiles&lt;-dir_info(here::here(&quot;prac10_data&quot;)) %&gt;% dplyr::filter(str_detect(path, &quot;geofabrik.zip&quot;)) %&gt;% dplyr::select(path)%&gt;% pull()%&gt;% #print out the .gz file print()%&gt;% as.character()%&gt;% utils::unzip(exdir=here::here(&quot;prac10_data&quot;, &quot;geofabrik&quot;)) Example of using the API…. library(osmar) src &lt;- osmsource_api(url = &quot;https://api.openstreetmap.org/api/0.6/&quot;) # 1000 refers to distance from centre point bb &lt;- center_bbox(-0.112510,51.507627, 1000, 1000) LDN &lt;- get_osm(bb, source = src) plot(LDN) # extract just highwways ways &lt;- find(LDN, way(tags(k == &quot;highway&quot;))) hway &lt;- find_down(LDN, way(ways)) hway &lt;- subset(LDN, ids = hway) 10.5.2 Project the data Next up we need to project our .shp data …we could project our data individually using: st_transform(boroughsandwardssf[[1]], 27700) st_transform(boroughsandwardssf[[2]], 27700) or use map() again… boroughsandwardssf&lt;- map(boroughsandwardssf, crs=27700, st_transform) # change the airbnb data to spatial Airbnb &lt;- Airbnb %&gt;% st_as_sf(., coords = c(&quot;longitude&quot;, &quot;latitude&quot;), crs = 4326)%&gt;% # project it too - remember that 27700 is # British National Grid st_transform(., 27700) 10.5.3 Functions Now remember our function we made for joining our Airbnb data (or Hotels) to the London boroughs layer… let’s make the function again… Joinfun &lt;- function(data1, data2){ output&lt;- data1%&gt;% st_join(data2,.)%&gt;% add_count(GSS_CODE, name=&quot;airbnbs&quot;) return(output) } 10.5.4 Loops Ok, but we want to get a count of Airbnb points per London ward and Borough…how can we do that?…well manually of course…like this… Airbnbborough &lt;- Joinfun(Airbnb, boroughsandwardssf[[1]]) Airbnbward &lt;- Joinfun(Airbnb, boroughsandwardssf[[2]]) But we can also automate this using a loop (either a while or for loop). I’ve used a while loop here as when i did my MSc you weren’t able to put a for loop inside a for loop. I beleive that has now changed but because of that one day i had to spend changing everything i always default to using a while loop. Tell us what a loop is already? A loop let’s you go over something adding 1 (or any value) each time…for example let’s look a basic loop. You need to run everything in the loop at once from the while to the }. If you make just a normal Rscript you can set breakpoints — the code will the stop each time it hits the breakpoint within the loop. You can’t do this at the moment with RMarkdown code chunks, i normally develop the loop outside of it looping then put it all together. # set up a variable basicloop &lt;- 1 # so while our variable is less than #6 run the following code within the {} while (basicloop &lt; 6) { #print the varaible (starts at 1) print(basicloop) # then add 1 to the variable basicloop = basicloop+1 # go back to the start of the loop #and if it is still &lt;6 run again } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 That loop outputs the values of 1-5, as we started with a value of 1, then added 1 to make 2. It remained below 6 so the code ran again printing the 2 then added 1 again to make 3 and so on. As we specified less than 6 it stopped there.. We can also save these results to diffrent variables but we need to make a list (or dataframe/ whatever you need) to start with to save them in # here is my empty list emptylist &lt;- list() basicloop &lt;- 1 while (basicloop &lt; 6) { print(basicloop) emptylist[[basicloop]] &lt;- basicloop basicloop &lt;- basicloop+1 } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 Here we are using the variable basicloop to index our emptylist.. so everytime we add 1 it changes the index value….have a look what i mean… emptylist ## [[1]] ## [1] 1 ## ## [[2]] ## [1] 2 ## ## [[3]] ## [1] 3 ## ## [[4]] ## [1] 4 ## ## [[5]] ## [1] 5 emptylist[[1]] ## [1] 1 emptylist[[2]] ## [1] 2 Right, so how are we going to apply this to our data. We have two .shp files (boroughs and wards) in a list that we want to apply our function to.. Firstly let’s set up the length to stop at, make an empty list and a starting point. As our data is in a list we just want the length of that (as a number).. # get the length - add 1 as we are using less than boroughlen&lt;-length(boroughsandwardssf)+1 # empty list hold&lt;-list() # here is our starting point variable i&lt;-1 Now here is the loop.. # while i is less than boroughlength # max of boroughlength is 3 while (i &lt; boroughlen){ # put the output in our varible # use the function for boroughs and then wards hold[[i]] &lt;- Joinfun(Airbnb, boroughsandwardssf[[i]]) # add one to the index i&lt;-i+1 } # make a quick thematic map to have a look justairbnbborough&lt;-hold[[1]]%&gt;% dplyr::select(GSS_CODE, airbnbs)%&gt;% st_drop_geometry()%&gt;% distinct(GSS_CODE, airbnbs)%&gt;% left_join(boroughsandwardssf[[1]], ., by = c(&quot;GSS_CODE&quot; = &quot;GSS_CODE&quot;)) justairbnward&lt;-hold[[2]]%&gt;% dplyr::select(GSS_CODE, airbnbs)%&gt;% st_drop_geometry()%&gt;% distinct(GSS_CODE, airbnbs)%&gt;% left_join(boroughsandwardssf[[2]], ., by = c(&quot;GSS_CODE&quot; = &quot;GSS_CODE&quot;)) qtm(justairbnbborough, fill = &quot;airbnbs&quot;) qtm(justairbnward, fill = &quot;airbnbs&quot;) When should i use a loop? Well that’s a hard question…generally loops used to be considered inefficient in R, but i’m yet to come across a method that will let you increment one varibale whilst keeping another consistent …by this i mean like what we did in our loop. We changed what spatial data was joined with the Airbnb data — the Airbnb data remained the same. There are a few other functions like mapply(), sapply() and tapply() that work in the same format as lapply() but to my knowledge they still will increment all of the variables at the same time. In terms of code clarity i’m going to refer to section 21.5 on iteration in Wickham $ Grolemund (2017)… “Some people will tell you to avoid for loops because they are slow. They’re wrong! (Well at least they’re rather out of date, as for loops haven’t been slow for many years). The chief benefits of using ‘other functions’ is not speed, but clarity: they make your code easier to write and to read”. That said, within this course you are not marked on how ‘good’ or ‘efficient’ your code is. Sure, i want you to write great code, but if you are writing code for your assigment or any future project really, my advice is the same. Get something that works and addresses the mark scheme (read the mark scheme!) and then if you have time, improve it later on. There is also a section later on about writing advanced code in the assignment. 10.5.5 Advanced mapping (again) Right, so we can sort of see the difference between the spatial levels (boroughs and wards) but let’s take a closer look within Westminster… here is the ‘preamble’ for the leaflet map …basically all the stuff we need to set it up… library(classInt) library(leaflet) library(leafpop) # extract only westminster from boroughs Borough &lt;- hold[[1]] %&gt;% filter(NAME==&quot;Westminster&quot;)%&gt;% # we need to set the projection to WGS84 # to use with leaflet st_transform(., crs=4326)%&gt;% #at the moment each airbnb is a row for the borough #we just one one row that has number of airbnbs group_by(., GSS_CODE, NAME)%&gt;% summarise(airbnbs = unique(airbnbs)) wardsatborough &lt;- hold[[2]] %&gt;% filter(BOROUGH==&quot;Westminster&quot;)%&gt;% # we need to set the projection to WGS84 # to use with leaflet st_transform(., crs=4326)%&gt;% #at the moment each airbnb is a row for the wards #we just one one row that has number of airbnbs group_by(., GSS_CODE, NAME)%&gt;% summarise(airbnbs = unique(airbnbs)) # set our breaks for the map breaks1&lt;-classIntervals(hold[[1]]$airbnbs, n=5, style = &quot;quantile&quot;) breaks2&lt;-classIntervals(wardsatborough$airbnbs, n=5, style = &quot;quantile&quot;) # use the breaks to set our colour palettes pal &lt;- colorBin(palette = &quot;YlOrRd&quot;, domain=hold[[1]]$airbnbs, bins=breaks1$brks) pal2 &lt;- colorBin(palette = &quot;YlOrRd&quot;, domain=wardsatborough$airbnbs, bins=breaks2$brks) # we want a popup of information too # here we make a new varaible with no #spatial info (remove geometry) wardinfo &lt;-wardsatborough %&gt;% st_drop_geometry()%&gt;% dplyr::rename(Ward = NAME, Airbnbs = airbnbs)%&gt;% dplyr::select(Ward, Airbnbs)%&gt;% popupTable() boroughinfo &lt;-wardsatborough %&gt;% st_drop_geometry()%&gt;% dplyr::rename(Borough = NAME, Airbnbs = airbnbs)%&gt;% dplyr::select(Borough, Airbnbs)%&gt;% popupTable() Now let’s map it using what we just specified… i’ve added a few more features than were in the Map making practical wardandboroughs&lt;- leaflet() %&gt;% # add basemap options addProviderTiles(providers$Stamen.TonerLite, group = &quot;Toner Lite&quot;) %&gt;% addTiles(group = &quot;OSM&quot;) %&gt;% #add our Borough polygons, linking to the tables we just made addPolygons(data=Borough, color=&quot;white&quot;, weight = 2, opacity = 1, dashArray = &quot;3&quot;, fillOpacity = 0.7, popup = boroughinfo, fillColor = ~pal(Borough$airbnbs), group = &quot;Borough&quot;)%&gt;% #add our ward polygons, linking to the tables we just made addPolygons(data=wardsatborough, color=&quot;white&quot;, weight = 2, opacity = 1, dashArray = &quot;3&quot;, fillOpacity = 0.7, popup = wardinfo, fillColor = ~pal2(wardsatborough$airbnbs), group = &quot;Wards&quot;)%&gt;% # add a legend for wards addLegend(pal = pal2, values = wardsatborough$airbnbs, group=c(&quot;Wards&quot;), position =&quot;bottomleft&quot;, title =&quot;Accom count&quot;)%&gt;% # add a legend for boroughs addLegend(pal = pal, values = Borough, group=c(&quot;Borough&quot;), title =&quot;Accom count&quot;, position =&quot;bottomleft&quot;)%&gt;% # specify layers control addLayersControl( baseGroups = c(&quot;Toner Lite&quot;, &quot;OSM&quot;), overlayGroups = c(&quot;Borough&quot;, &quot;Wards&quot;), options = layersControlOptions(collapsed = FALSE))%&gt;% hideGroup(c(&quot;Borough&quot;)) # show us the map wardandboroughs Have a look around the map…Westminster borough uses a scale considering all other London borough values, whilst the ward scale is specific to Westminster. Use the following code to explore the values… # range of Airbnbs per ward in Westminster Range&lt;-wardsatborough %&gt;% summarise(Max = max(airbnbs), Min = min (airbnbs)) 10.6 Regression relationships Warning The data used within this practical is purely for demonstration purposes! 10.6.1 Preprocessing In this part of the practical we’re going to try and model the relationship between the Airbnb counts at ward level and other variables. Our mini investagion here would be to see if it’s possible to produce a statisitcally valid and rigorous model for predicting Airbnb values at the ward level. This type of analysis might be useful if you had missing or limited data at one spatial level (e.g. wards) but had a more complete dataset at a larger spatial scale (e.g. boroughs). Essentially, we’re trying to use the data at the borough level to give us an estiamte of the data at the ward level. Obviously this isn’t an issue for us here but if you ever use survey data or any kind of count data (e.g. health) if may well be limited to specific areas… This section will also show you how to make/ use different regression models in R. Regression aims to find a mathematical equation to predict a value (in this case Airbnb at ward level) from one (or more) predictor variables (e.g. borough data). So we’ll use values of X (borough data) to predict values of Y (ward data)… This can be represented with the equation: \\[Y = \\beta_{1} + \\beta_{2} X + \\epsilon\\] Where \\(\\beta_{1}\\) is the intercept (expected value of Y when X=0, also called bias in machine learning), \\(\\beta_{2}\\) is the slope of the line and \\(\\epsilon\\) is the error term, the part that the model is unable to explain (and variables are not included)…Here we would call the intercept and slop coefficients. To start with we’re going to crop our wards data to our boroughs data. In the borough data you can see the river Thames which isn’t in the wards data. I don’t think this is technically required, but it’s good practice to make sure you datasets align and if they don’t to do something about it… library(tmaptools) cropped &lt;- justairbnbborough %&gt;% crop_shape(justairbnward,., polygon = TRUE) # something like this would just extract the # values within the shape, but not clip like a cookie cutter # we want to use the borough layer to cut out the river from # the wards layer ###test &lt;- hold[[2]][hold[[1]],] # check it worked, you should be #able to see the river plot(st_geometry(cropped)) Now we need to join our wards data and borough data togther to give us a borough value for each ward within… # join wards and boroughs joined &lt;- justairbnbborough %&gt;% st_join(., justairbnward, join=st_contains)%&gt;% rename(., Boroughcount = airbnbs.x, Wardcount = airbnbs.y) 10.6.2 Scatter plot To start with let’s just visualise the relationship between the borough an ward count using a scatter plot. If you have multiple predictor variables (explied later on) a plot will be drawn for each of them… p &lt;- ggplot(joined, aes(Boroughcount, Wardcount))+ geom_point()+ xlab(&quot;Borough count&quot;)+ ylab(&quot;Ward count&quot;) The scatter plot shows some kind of linear relationship. The point variation around borough count is beacuse for each borough the wards will have a range of values…like we saw in the interactive map…Westminster borough had a value of 9410 and the wards ranged from 159 to 1215 10.6.3 Outliers Generally any point that is outside 1.5* the interquartile-range (or IQR) is considered an outlier (a data point that differs significantly from all others) and you could use something like the methods here to remove and replace them…the IQR is the distance between the 25th and 75th percentile.. par(mfrow=c(1, 2)) # divide graph area in 2 columns boxplot(joined$Boroughcount, main=&quot;Boroughs&quot;) boxplot(joined$Wardcount, main=&quot;Wards&quot;) Warning The data used within this practical is purely for demonstration purposes! These box plots indicate that our data is not normally distributed so you might want to refer to the assumptions in last week’s practical if you were to do this propperly. 10.6.4 Correlation Correlation let’s use see the level of linear dependence between two varaibles between -1 and 1. High values (towards 1) mean that for every x instance there is an increase in y. Low values (towards -1) mean the opposite. library(corrr) Correlation &lt;- joined %&gt;% st_drop_geometry()%&gt;% dplyr::select(Boroughcount, Wardcount)%&gt;% correlate() %&gt;% print() ## # A tibble: 2 × 3 ## term Boroughcount Wardcount ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Boroughcount NA 0.780 ## 2 Wardcount 0.780 NA Looks, like we’ve got a strong relationship. 10.6.5 Linear model Now let’s use a linear model to establish a relationship between predictor and response with the function lm(). Here we are calling the lm()(then stating the Formula, then the data) library(broom) linearMod &lt;- lm(Wardcount ~ Boroughcount, data=joined) tidy(linearMod) ## # A tibble: 2 × 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) -7.86 4.86 -1.62 1.07e- 1 ## 2 Boroughcount 0.0543 0.00185 29.3 1.40e-114 So from this output we have the coefficients of intercept and Boroughcount, going back to our formula from earlier this would mean… \\[Wardcount = -3.8188 + 0.0541*Boroughcount\\] 10.6.6 Linear model outputs Coefficient Estimates Our intercept, the expected value of Y when X=0 is -3.8 and slope is 0.054. Standard error The coefficient standard error represents the average amount that coeffieint estimates vary from the average of our response. It basically shows the expected range if we were to model again and again. So here, for a 1% increase in the number of Airbnbs per ward by 0.05, but this might vary by 0.001. Ideally the standard error is lower than the size of the coeffeicient (0.001 is lower the 0.05) p-value A linear model is only statistically significant when both p-values are &lt;0.05 within the summary call. There are two values as one if for the coefficient (is the specific coefficient significant) and the other is for the model (is the model significant). Here as they both are, this would allow us to accept the alternative hypothesis that the coefficients are not equal to 0 (and therefore there is a relationship between the independent and dependent variabile). R-squared R squared represents the proportion of variance of the dependent variable that is explained by the independent. It is different from correlation as that is the strength of the relationship!!! R squared is often referred to as ‘goodness-of-fit’. Here 61% of the variance in Airbnb ward count can be explained by the varaition in Airbnb borough count. But there are a few issues with R squared — every time you add a predictor to the model R squared will increase and if there are too many predictors it will model random noise Adjusted R squared Adjusted R squared consideres the number of variables within the model, increasing only if the new term assits by more than just chance. t Coefficient t shows how many standard deviations the coefficient estaimte is away from 0 — the further away means the more likely we can reject the null hypothesis. It is calcaulted by dividing the value of the coeffeicient by the standard error Residual error Residual standard error is a measure of the quality of fit of the linear regression line. It is an average of the error that the points differ out from the line. F F-statistcs, basically, the futher from 1 the better it is. See this guide for more information on the outputs Remember the formula produced from the regression equation, well we can also extract this automatically …to make that original formula in RMarkdown I used this (not within a code chunk)…. $$Wardcount = -3.8188 + 0.0541*Boroughcount$$ But we can also extract it directly using a new package from GitHub… # load remotes so we can get the new package library(remotes) # get the new package equatiomatic() remotes::install_github(&quot;datalorax/equatiomatic&quot;) # load it library(equatiomatic) # extract the info to make the equation extract_eq(linearMod) \\[ \\operatorname{Wardcount} = \\alpha + \\beta_{1}(\\operatorname{Boroughcount}) + \\epsilon \\] Play around with line length and use the actual coefficient names extract_eq(linearMod, use_coefs = TRUE, wrap=TRUE, terms_per_line = 2) \\[ \\begin{aligned} \\operatorname{\\widehat{Wardcount}} &amp;= -7.86 + 0.05(\\operatorname{Boroughcount}) \\end{aligned} \\] This would produce the following in RMarkdown…. \\[ \\begin{aligned} \\text{Wardcount} &amp;= -3.82 + 0.05(\\text{Boroughcount})\\ + \\\\ &amp;\\quad \\epsilon \\end{aligned} \\] Have a look here for more information on using equatiomatic(). 10.6.7 Validation We’ve made a regression model using all of our data but there is now no way to test its validity…what if we take 20% as a test sample and use the remaining 80% to train it… joinedID &lt;- joined %&gt;% st_drop_geometry()%&gt;% mutate(Wardcount = replace_na(Wardcount, 0))%&gt;% mutate(id = row_number()) # Create training 80% index train &lt;- joinedID %&gt;% sample_frac(.70) # Create test set test &lt;- anti_join(joinedID, train, by = &#39;id&#39;) Now let’s build the model… # build the model lmMod &lt;- lm(Wardcount ~ Boroughcount, data=train) # use the model to make some predicitons with our test data library(caret) predictions &lt;- lmMod %&gt;% predict(test) # get R2, RMSE and MAE stats&lt;-data.frame(R2 = R2(predictions, test$Wardcount), RMSE = RMSE(predictions, test$Wardcount), MAE = MAE(predictions, test$Wardcount)) t ## $type ## [1] &quot;lag&quot; ## ## $dvars ## [1] 3 0 ## ## $rho ## rho ## 0.00515683 ## ## $coefficients ## (Intercept) ## 202.34273 ## unauthorised_absence_in_all_schools_percent_2013 ## -36.17560 ## log(median_house_price_2014) ## 12.58783 ## ## $rest.se ## (Intercept) ## 20.098676 ## unauthorised_absence_in_all_schools_percent_2013 ## 1.913596 ## log(median_house_price_2014) ## 1.532730 ## ## $LL ## [,1] ## [1,] -2603.509 ## ## $s2 ## [1] 239.8558 ## ## $SSE ## [1] 150149.8 ## ## $parameters ## [1] 5 ## ## $logLik_lm.model ## &#39;log Lik.&#39; -2603.74 (df=4) ## ## $AIC_lm.model ## [1] 5215.479 ## ## $method ## [1] &quot;eigen&quot; ## ## $call ## lagsarlm(formula = average_gcse_capped_point_scores_2014 ~ unauthorised_absence_in_all_schools_percent_2013 + ## log(median_house_price_2014), data = LonWardProfiles, listw = nb2listw(LWard_nb, ## style = &quot;C&quot;), method = &quot;eigen&quot;) ## ## $residuals ## 1 2 3 4 5 6 ## -11.73596188 -0.63367392 -4.47433117 1.05446013 29.15335285 2.24902862 ## 7 8 9 10 11 12 ## -26.04107211 17.49757641 6.20390185 -11.27659527 -20.34103735 21.22211842 ## 13 14 15 16 17 18 ## -5.23278885 20.80499949 5.52027405 27.02634870 3.05977914 1.05963172 ## 19 20 21 22 23 24 ## 13.00380955 -1.31276626 6.02027518 14.49871272 10.08022960 -5.01419859 ## 25 26 27 28 29 30 ## 11.25844001 8.18449918 8.39518643 -0.97833562 1.35512117 5.84356494 ## 31 32 33 34 35 36 ## 24.36933763 -13.28311774 -7.71192814 15.62712259 -4.70575162 -14.18589368 ## 37 38 39 40 41 42 ## -11.74168137 3.14444057 6.02401011 9.05385707 13.00023605 5.86640792 ## 43 44 45 46 47 48 ## 5.77720242 26.77569553 -12.53706722 12.28006770 0.39409040 2.13279085 ## 49 50 51 52 53 54 ## 14.55879605 23.63618774 -3.10838711 12.50485863 13.35240463 -23.41062118 ## 55 56 57 58 59 60 ## -0.17617091 4.32527534 0.94332276 1.88269173 -2.33442524 0.90872880 ## 61 62 63 64 65 66 ## -10.22774422 -1.45359853 5.62429294 -13.42480188 2.35698770 -7.08197093 ## 67 68 69 70 71 72 ## 4.15516674 12.65958747 34.68404506 0.81886559 -8.17850936 -2.12733278 ## 73 74 75 76 77 78 ## -3.78843487 4.49161244 26.43232854 13.28627188 16.62704835 16.41800806 ## 79 80 81 82 83 84 ## -3.13749891 24.49842989 4.87497974 7.48232527 -12.26161561 -14.23783225 ## 85 86 87 88 89 90 ## 0.49204980 -27.38220170 -9.41819058 -9.09676623 19.04159349 -14.26257866 ## 91 92 93 94 95 96 ## -5.14806595 -18.09914157 18.10471774 4.49869983 -23.81521703 -5.39536194 ## 97 98 99 100 101 102 ## -1.13169931 -12.27866617 3.10485601 7.88675828 10.29082601 -10.49954891 ## 103 104 105 106 107 108 ## 11.84127927 1.26669641 -3.90708623 -0.18167234 -26.51923634 -19.22363401 ## 109 110 111 112 113 114 ## 0.64691258 -15.15456773 -15.77603648 -7.22908316 -15.93473561 -3.22566210 ## 115 116 117 118 119 120 ## -8.34262931 4.62823504 -5.50442756 -35.62135928 -5.15278054 -18.68032511 ## 121 122 123 124 125 126 ## -9.19974144 -16.18254267 0.33302710 8.73664089 -19.34332437 -8.70599129 ## 127 128 129 130 131 132 ## -14.56345206 -11.06120452 -20.38402010 6.15954251 -11.45029964 8.17507594 ## 133 134 135 136 137 138 ## -2.34716913 -3.67695219 -12.02074889 3.77804302 -3.67035497 -12.53693550 ## 139 140 141 142 143 144 ## 11.81400534 -5.46388704 4.63616909 -10.15217090 -3.01939119 -2.55665210 ## 145 146 147 148 149 150 ## -4.76869556 -0.38301327 7.32765800 -4.70588040 9.34299217 -7.59391929 ## 151 152 153 154 155 156 ## 9.35807409 -6.14061331 1.63166188 -20.45263569 -0.01966676 12.85690648 ## 157 158 159 160 161 162 ## -8.60261314 17.03117618 11.83044250 9.51725704 -0.39801217 -4.58395893 ## 163 164 165 166 167 168 ## 10.03851371 -2.93515090 -12.87180862 -5.21244079 2.50688738 -18.05673508 ## 169 170 171 172 173 174 ## 14.13926036 -8.12925755 -3.58840627 -6.33080059 -5.25393078 6.85679756 ## 175 176 177 178 179 180 ## 1.26183159 -22.08363968 -7.10247612 -26.28876766 5.31501433 25.84206943 ## 181 182 183 184 185 186 ## -12.41408445 -13.06714215 17.90416472 -21.31596282 -21.54087347 -10.64975492 ## 187 188 189 190 191 192 ## -4.66893454 -5.51807410 8.62098628 8.26492515 7.63956672 -8.51361154 ## 193 194 195 196 197 198 ## 5.69751711 17.57164132 19.56895517 11.30224668 -4.60742469 26.37547928 ## 199 200 201 202 203 204 ## -8.20531617 22.02881634 10.13406331 20.35606769 11.10469064 0.65883544 ## 205 206 207 208 209 210 ## -5.76308185 -3.30617216 24.35579540 28.42876343 1.59128766 24.02661651 ## 211 212 213 214 215 216 ## -5.99698366 0.36273529 -10.22450619 -5.66661097 -39.83547997 -14.37639212 ## 217 218 219 220 221 222 ## -31.46491922 -14.23016264 -24.04502527 -18.02507332 -19.70110107 -5.76660004 ## 223 224 225 226 227 228 ## -6.68044566 -15.24376368 -3.60437641 -6.78826782 -24.00693189 -15.93894984 ## 229 230 231 232 233 234 ## -3.36772289 -5.09756179 -15.11679903 -4.23930242 -8.35121675 2.82986457 ## 235 236 237 238 239 240 ## -8.26575530 -18.70659173 -1.63958172 -18.43150433 -3.14638306 -4.64890703 ## 241 242 243 244 245 246 ## 1.01545737 0.22420050 6.22456167 -1.51936363 -1.10154799 -4.89699119 ## 247 248 249 250 251 252 ## 3.86203453 -18.43948834 2.82418276 -8.71139524 -13.23177072 -23.30562773 ## 253 254 255 256 257 258 ## -15.31497895 -7.45819671 -19.38795372 -5.82334621 8.73681650 -11.27202743 ## 259 260 261 262 263 264 ## -20.89339412 -15.86032416 -17.42659969 -2.16888100 -12.67528983 -0.99558746 ## 265 266 267 268 269 270 ## -17.61840778 1.46212387 4.24021234 -7.49150807 31.41163606 -15.11718233 ## 271 272 273 274 275 276 ## 33.27890475 -5.16620960 -12.48535561 9.55096517 -7.06138517 5.60431683 ## 277 278 279 280 281 282 ## 3.35892855 10.00613367 -0.24279715 1.98749487 -0.99644942 -0.54977223 ## 283 284 285 286 287 288 ## 23.51786606 -2.30559168 -15.64141691 13.19804320 0.01126631 -0.81575397 ## 289 290 291 292 293 294 ## 11.31061415 13.35048667 -13.86711366 -21.26905716 -0.71288623 -13.96565102 ## 295 296 297 298 299 300 ## -16.16338836 2.54222262 3.47695493 3.63282562 11.86117056 10.37041425 ## 301 302 303 304 305 306 ## -9.36264754 -20.19023204 -2.78808326 -5.22584620 -25.54417888 -28.87770772 ## 307 308 309 310 311 312 ## 4.14588146 9.01415391 3.66790032 14.16444846 2.17223518 7.78877776 ## 313 314 315 316 317 318 ## 11.89991997 23.51794698 31.86682124 3.87704507 11.56594306 12.90897733 ## 319 320 321 322 323 324 ## 5.73957259 11.11235307 24.77414899 22.24195226 20.82083758 -10.99367660 ## 325 326 327 328 329 330 ## 19.66040334 18.95442353 25.41577070 -11.81306636 7.01775661 -17.10079414 ## 331 332 333 334 335 336 ## 6.80494684 4.63342283 2.23394188 5.07547816 -14.97450090 -9.66970674 ## 337 338 339 340 341 342 ## -19.71794256 -10.53193502 -4.33114260 0.82801409 -10.45460599 -4.28383786 ## 343 344 345 346 347 348 ## 2.41787591 -4.97556371 18.42750211 7.13359125 -11.77887435 10.66181322 ## 349 350 351 352 353 354 ## 40.56106239 12.76204678 6.55339481 -2.16504356 -1.52874585 4.94747420 ## 355 356 357 358 359 360 ## -8.59497373 -1.29714051 40.31281834 25.27361555 22.91177309 25.16685391 ## 361 362 363 364 365 366 ## 9.98942220 31.06581369 35.24481803 4.85074919 24.54272088 1.12289317 ## 367 368 369 370 371 372 ## 0.96825270 18.64692189 27.99446427 20.52227619 5.07219387 -2.09228129 ## 373 374 375 376 377 378 ## -3.41449599 40.15841240 9.62032259 4.73407489 17.16410095 19.35905009 ## 379 380 381 382 383 384 ## 0.73783294 25.93772874 10.87822198 3.86412067 7.27400610 50.16773122 ## 385 386 387 388 389 390 ## 27.32249097 10.38446062 -11.01458560 27.19198822 27.91159637 -5.22586753 ## 391 392 393 394 395 396 ## 27.34186939 3.24150333 19.66271096 26.75345428 50.92266834 -0.92910221 ## 397 398 399 400 401 402 ## -24.31384241 23.25958375 -12.67373112 6.70616222 19.04183916 18.74842967 ## 403 404 405 406 407 408 ## 25.05794652 -14.59823707 17.99894235 -21.67937223 27.05931216 -15.83465174 ## 409 410 411 412 413 414 ## 11.06564499 19.36677736 -13.98385562 34.83100039 10.99389882 1.09206598 ## 415 416 417 418 419 420 ## 25.32526231 -11.41034389 5.79232533 -5.54307054 3.02869003 -3.19831014 ## 421 422 423 424 425 426 ## 16.16215882 2.36589496 -2.36024521 10.17405144 -18.16495203 0.08926718 ## 427 428 429 430 431 432 ## -1.12565968 -24.56425017 6.72597293 -17.78311518 -1.80251214 -13.30756198 ## 433 434 435 436 437 438 ## -5.90182639 -7.80659479 -28.07372838 5.76823976 3.19063626 2.39416441 ## 439 440 441 442 443 444 ## 9.48745872 -4.78512520 0.13599272 -9.64947258 -15.19030226 -13.16475208 ## 445 446 447 448 449 450 ## -35.72663249 -61.20259401 -10.85070535 -17.09642206 -37.79569627 6.31814044 ## 451 452 453 454 455 456 ## -2.08229115 10.62135550 1.14534405 -11.12971493 -0.11774850 -4.21643266 ## 457 458 459 460 461 462 ## 8.29910220 7.77047366 -23.04566104 -0.12645349 -12.35330293 34.06448115 ## 463 464 465 466 467 468 ## -22.81987180 -9.47294159 0.83894539 4.76998759 33.50971370 1.98160671 ## 469 470 471 472 473 474 ## 22.71161839 24.51677998 -4.54515347 -19.05028143 16.86104145 16.85691143 ## 475 476 477 478 479 480 ## -15.84812969 13.77540090 -16.55340673 -73.47435662 -0.09901596 26.93075230 ## 481 482 483 484 485 486 ## -36.84005676 35.21358224 15.21461596 -20.46731294 8.94062306 3.56470011 ## 487 488 489 490 491 492 ## 23.93266129 -34.47872418 -15.93295818 47.57580623 -11.16449817 15.42513432 ## 493 494 495 496 497 498 ## -22.20944699 26.82011560 12.51223835 -18.33816531 -15.48073254 -1.61559747 ## 499 500 501 502 503 504 ## -36.80649549 -20.42251669 -25.45964531 8.33957330 5.22223539 -22.15398776 ## 505 506 507 508 509 510 ## -9.17455361 -21.05727871 -13.83834739 -4.45472061 8.72068702 -11.66509645 ## 511 512 513 514 515 516 ## 43.88560236 -38.53233121 -7.80382751 -15.79358103 -32.79725572 -19.20749951 ## 517 518 519 520 521 522 ## -6.65251498 -13.59965485 -12.57280738 -11.31422592 -16.89112518 -19.94004735 ## 523 524 525 526 527 528 ## 5.04703555 -7.00927945 -4.19775690 2.51985831 -32.31626952 -16.59913057 ## 529 530 531 532 533 534 ## -3.94435919 -18.30617531 -4.97839366 1.72609401 -18.73653973 -15.87830539 ## 535 536 537 538 539 540 ## 1.82041899 8.98099810 3.26844662 6.03520034 -13.75348030 -2.63317773 ## 541 542 543 544 545 546 ## -1.36510364 -12.55727762 5.37875223 -2.34989762 2.83635433 13.61196639 ## 547 548 549 550 551 552 ## -10.13476526 -4.76189208 -0.18054436 -30.12643262 -32.80858873 -3.37108218 ## 553 554 555 556 557 558 ## -30.75309504 -6.41115570 10.21877219 -1.03943734 -9.64035906 19.65603991 ## 559 560 561 562 563 564 ## 3.19740210 -16.28206448 -9.14285038 -2.04634324 -4.40025918 4.10443918 ## 565 566 567 568 569 570 ## -4.64778354 1.94520155 1.42653830 16.68775337 -11.63923034 -11.02541355 ## 571 572 573 574 575 576 ## 35.66896085 21.51339787 21.13162483 9.76625953 28.14702223 2.09536012 ## 577 578 579 580 581 582 ## 31.27281311 6.09107025 -2.14211371 8.63214659 4.52516961 -13.21552724 ## 583 584 585 586 587 588 ## -4.83347395 -5.31434388 15.08276862 4.01516210 -13.17947713 -3.34651244 ## 589 590 591 592 593 594 ## 13.94565398 18.33788883 8.94696946 -0.03845102 2.03955841 0.56050194 ## 595 596 597 598 599 600 ## 0.24119324 -3.15366854 -1.47797642 -1.83733534 18.73299779 4.68790584 ## 601 602 603 604 605 606 ## 4.23078104 5.97509012 17.00978846 7.17938596 10.97962637 11.71761426 ## 607 608 609 610 611 612 ## -8.87615176 -9.88365882 -8.85956965 -10.96334113 -1.62584505 12.51509972 ## 613 614 615 616 617 618 ## 3.45502008 7.52491449 -12.02923124 -5.92637625 -8.51107150 2.91049206 ## 619 620 621 622 623 624 ## 2.64252075 -21.41728610 -9.03842358 -10.61010909 -8.69073102 -2.48750224 ## 625 626 ## 3.55479789 3.55479789 ## ## $opt ## $opt$maximum ## [1] 0.00515683 ## ## $opt$objective ## [,1] ## [1,] -2603.509 ## ## ## $tarX ## x(Intercept) xunauthorised_absence_in_all_schools_percent_2013 ## 1 1 0.8 ## 2 1 0.7 ## 3 1 0.5 ## 4 1 0.4 ## 5 1 0.7 ## 6 1 0.9 ## 7 1 0.8 ## 8 1 0.6 ## 9 1 0.7 ## 10 1 0.5 ## 11 1 0.6 ## 12 1 0.6 ## 13 1 1.4 ## 14 1 0.6 ## 15 1 0.5 ## 16 1 0.5 ## 17 1 0.9 ## 18 1 0.7 ## 19 1 0.7 ## 20 1 1.5 ## 21 1 1.1 ## 22 1 0.9 ## 23 1 0.8 ## 24 1 1.3 ## 25 1 1.5 ## 26 1 1.6 ## 27 1 1.4 ## 28 1 1.3 ## 29 1 1.1 ## 30 1 2.1 ## 31 1 1.2 ## 32 1 1.9 ## 33 1 1.0 ## 34 1 1.6 ## 35 1 1.1 ## 36 1 1.3 ## 37 1 1.4 ## 38 1 1.3 ## 39 1 1.3 ## 40 1 1.4 ## 41 1 1.2 ## 42 1 0.7 ## 43 1 0.8 ## 44 1 0.8 ## 45 1 1.0 ## 46 1 0.3 ## 47 1 0.7 ## 48 1 0.4 ## 49 1 0.7 ## 50 1 0.3 ## 51 1 0.6 ## 52 1 0.6 ## 53 1 0.7 ## 54 1 1.4 ## 55 1 1.1 ## 56 1 0.9 ## 57 1 1.0 ## 58 1 0.7 ## 59 1 1.7 ## 60 1 1.0 ## 61 1 1.3 ## 62 1 1.7 ## 63 1 1.4 ## 64 1 1.5 ## 65 1 1.3 ## 66 1 1.1 ## 67 1 1.2 ## 68 1 1.0 ## 69 1 0.9 ## 70 1 1.0 ## 71 1 0.6 ## 72 1 1.3 ## 73 1 1.1 ## 74 1 1.3 ## 75 1 1.3 ## 76 1 1.2 ## 77 1 1.3 ## 78 1 1.1 ## 79 1 1.2 ## 80 1 1.1 ## 81 1 0.6 ## 82 1 1.0 ## 83 1 1.1 ## 84 1 1.1 ## 85 1 1.1 ## 86 1 0.7 ## 87 1 1.0 ## 88 1 0.9 ## 89 1 0.3 ## 90 1 1.3 ## 91 1 1.1 ## 92 1 1.0 ## 93 1 0.5 ## 94 1 0.8 ## 95 1 1.0 ## 96 1 0.9 ## 97 1 0.8 ## 98 1 0.7 ## 99 1 0.8 ## 100 1 1.1 ## 101 1 0.8 ## 102 1 1.0 ## 103 1 1.0 ## 104 1 1.0 ## 105 1 1.0 ## 106 1 0.4 ## 107 1 0.8 ## 108 1 1.0 ## 109 1 1.1 ## 110 1 1.0 ## 111 1 0.8 ## 112 1 1.1 ## 113 1 0.7 ## 114 1 0.5 ## 115 1 0.7 ## 116 1 0.5 ## 117 1 0.6 ## 118 1 0.9 ## 119 1 0.6 ## 120 1 1.4 ## 121 1 1.4 ## 122 1 1.6 ## 123 1 0.6 ## 124 1 1.3 ## 125 1 1.0 ## 126 1 1.6 ## 127 1 1.5 ## 128 1 1.1 ## 129 1 1.3 ## 130 1 0.7 ## 131 1 0.7 ## 132 1 0.3 ## 133 1 0.6 ## 134 1 0.7 ## 135 1 0.7 ## 136 1 0.5 ## 137 1 0.4 ## 138 1 0.6 ## 139 1 1.3 ## 140 1 1.2 ## 141 1 0.9 ## 142 1 1.2 ## 143 1 1.1 ## 144 1 1.2 ## 145 1 0.4 ## 146 1 0.8 ## 147 1 0.8 ## 148 1 0.8 ## 149 1 0.3 ## 150 1 1.0 ## 151 1 0.5 ## 152 1 0.9 ## 153 1 1.2 ## 154 1 1.0 ## 155 1 0.7 ## 156 1 0.8 ## 157 1 0.9 ## 158 1 0.7 ## 159 1 0.8 ## 160 1 0.6 ## 161 1 0.7 ## 162 1 1.2 ## 163 1 0.6 ## 164 1 0.7 ## 165 1 0.6 ## 166 1 0.7 ## 167 1 0.7 ## 168 1 1.0 ## 169 1 1.1 ## 170 1 1.5 ## 171 1 1.2 ## 172 1 1.0 ## 173 1 0.8 ## 174 1 1.0 ## 175 1 1.2 ## 176 1 1.1 ## 177 1 1.4 ## 178 1 1.2 ## 179 1 0.9 ## 180 1 1.1 ## 181 1 1.0 ## 182 1 1.1 ## 183 1 0.8 ## 184 1 1.0 ## 185 1 1.2 ## 186 1 1.2 ## 187 1 0.8 ## 188 1 1.1 ## 189 1 0.6 ## 190 1 0.9 ## 191 1 1.0 ## 192 1 1.3 ## 193 1 1.1 ## 194 1 0.7 ## 195 1 0.8 ## 196 1 0.8 ## 197 1 1.0 ## 198 1 1.2 ## 199 1 0.9 ## 200 1 0.7 ## 201 1 0.8 ## 202 1 0.8 ## 203 1 0.9 ## 204 1 0.8 ## 205 1 0.6 ## 206 1 1.2 ## 207 1 1.0 ## 208 1 0.7 ## 209 1 1.1 ## 210 1 1.3 ## 211 1 1.3 ## 212 1 1.2 ## 213 1 1.1 ## 214 1 1.2 ## 215 1 1.0 ## 216 1 1.1 ## 217 1 1.2 ## 218 1 1.3 ## 219 1 0.9 ## 220 1 1.1 ## 221 1 0.9 ## 222 1 1.2 ## 223 1 1.2 ## 224 1 1.3 ## 225 1 1.1 ## 226 1 1.1 ## 227 1 1.0 ## 228 1 1.0 ## 229 1 0.9 ## 230 1 1.0 ## 231 1 1.6 ## 232 1 0.4 ## 233 1 0.9 ## 234 1 1.1 ## 235 1 0.8 ## 236 1 1.1 ## 237 1 1.3 ## 238 1 1.1 ## 239 1 1.0 ## 240 1 1.0 ## 241 1 1.3 ## 242 1 1.2 ## 243 1 1.4 ## 244 1 1.3 ## 245 1 1.4 ## 246 1 1.5 ## 247 1 1.4 ## 248 1 1.0 ## 249 1 1.4 ## 250 1 1.1 ## 251 1 1.5 ## 252 1 0.8 ## 253 1 1.5 ## 254 1 1.4 ## 255 1 1.4 ## 256 1 1.4 ## 257 1 1.1 ## 258 1 1.1 ## 259 1 1.1 ## 260 1 1.0 ## 261 1 1.0 ## 262 1 1.2 ## 263 1 1.3 ## 264 1 1.4 ## 265 1 1.2 ## 266 1 1.5 ## 267 1 1.0 ## 268 1 1.4 ## 269 1 1.8 ## 270 1 0.8 ## 271 1 1.2 ## 272 1 1.0 ## 273 1 1.4 ## 274 1 1.7 ## 275 1 1.4 ## 276 1 1.6 ## 277 1 1.2 ## 278 1 1.6 ## 279 1 0.7 ## 280 1 1.4 ## 281 1 1.3 ## 282 1 1.5 ## 283 1 1.8 ## 284 1 1.2 ## 285 1 1.2 ## 286 1 0.7 ## 287 1 0.8 ## 288 1 1.0 ## 289 1 0.7 ## 290 1 0.5 ## 291 1 1.2 ## 292 1 1.4 ## 293 1 1.2 ## 294 1 1.0 ## 295 1 1.0 ## 296 1 0.8 ## 297 1 0.9 ## 298 1 0.7 ## 299 1 1.0 ## 300 1 0.8 ## 301 1 0.7 ## 302 1 0.5 ## 303 1 0.9 ## 304 1 0.8 ## 305 1 1.0 ## 306 1 0.8 ## 307 1 1.4 ## 308 1 0.7 ## 309 1 0.9 ## 310 1 0.9 ## 311 1 2.0 ## 312 1 1.0 ## 313 1 2.1 ## 314 1 2.2 ## 315 1 0.9 ## 316 1 1.5 ## 317 1 1.6 ## 318 1 1.7 ## 319 1 1.1 ## 320 1 0.9 ## 321 1 0.8 ## 322 1 2.1 ## 323 1 0.9 ## 324 1 0.7 ## 325 1 1.5 ## 326 1 2.0 ## 327 1 2.2 ## 328 1 1.5 ## 329 1 1.2 ## 330 1 1.1 ## 331 1 1.4 ## 332 1 1.0 ## 333 1 1.5 ## 334 1 1.5 ## 335 1 1.3 ## 336 1 1.3 ## 337 1 1.1 ## 338 1 1.0 ## 339 1 1.1 ## 340 1 1.0 ## 341 1 0.9 ## 342 1 1.0 ## 343 1 1.5 ## 344 1 1.3 ## 345 1 1.1 ## 346 1 1.2 ## 347 1 1.0 ## 348 1 1.0 ## 349 1 1.4 ## 350 1 0.8 ## 351 1 1.1 ## 352 1 1.0 ## 353 1 1.2 ## 354 1 0.8 ## 355 1 0.9 ## 356 1 1.5 ## 357 1 1.6 ## 358 1 1.5 ## 359 1 1.3 ## 360 1 1.2 ## 361 1 1.1 ## 362 1 0.7 ## 363 1 0.8 ## 364 1 0.7 ## 365 1 0.9 ## 366 1 0.9 ## 367 1 0.9 ## 368 1 0.5 ## 369 1 1.0 ## 370 1 0.6 ## 371 1 1.4 ## 372 1 1.3 ## 373 1 1.4 ## 374 1 0.9 ## 375 1 0.5 ## 376 1 0.9 ## 377 1 1.1 ## 378 1 0.8 ## 379 1 1.3 ## 380 1 0.8 ## 381 1 0.8 ## 382 1 0.5 ## 383 1 1.0 ## 384 1 0.9 ## 385 1 1.1 ## 386 1 0.9 ## 387 1 0.5 ## 388 1 0.5 ## 389 1 0.6 ## 390 1 1.0 ## 391 1 0.8 ## 392 1 1.0 ## 393 1 0.9 ## 394 1 1.0 ## 395 1 0.9 ## 396 1 0.9 ## 397 1 0.8 ## 398 1 0.5 ## 399 1 0.6 ## 400 1 0.9 ## 401 1 0.4 ## 402 1 0.6 ## 403 1 1.0 ## 404 1 1.1 ## 405 1 0.6 ## 406 1 1.2 ## 407 1 0.6 ## 408 1 0.5 ## 409 1 1.1 ## 410 1 0.7 ## 411 1 0.4 ## 412 1 0.4 ## 413 1 1.2 ## 414 1 1.4 ## 415 1 0.4 ## 416 1 0.7 ## 417 1 1.4 ## 418 1 1.2 ## 419 1 1.0 ## 420 1 1.1 ## 421 1 0.4 ## 422 1 0.8 ## 423 1 1.6 ## 424 1 1.1 ## 425 1 1.4 ## 426 1 0.8 ## 427 1 0.8 ## 428 1 0.9 ## 429 1 1.3 ## 430 1 1.0 ## 431 1 1.0 ## 432 1 0.9 ## 433 1 0.7 ## 434 1 1.0 ## 435 1 0.7 ## 436 1 0.9 ## 437 1 0.7 ## 438 1 0.7 ## 439 1 1.1 ## 440 1 0.8 ## 441 1 1.3 ## 442 1 1.3 ## 443 1 1.2 ## 444 1 1.0 ## 445 1 0.9 ## 446 1 0.9 ## 447 1 1.2 ## 448 1 1.2 ## 449 1 1.2 ## 450 1 1.1 ## 451 1 1.3 ## 452 1 1.1 ## 453 1 1.6 ## 454 1 1.3 ## 455 1 1.0 ## 456 1 1.3 ## 457 1 1.3 ## 458 1 1.1 ## 459 1 1.3 ## 460 1 1.1 ## 461 1 1.5 ## 462 1 1.4 ## 463 1 1.0 ## 464 1 1.3 ## 465 1 1.0 ## 466 1 1.1 ## 467 1 1.5 ## 468 1 0.9 ## 469 1 1.3 ## 470 1 0.5 ## 471 1 1.1 ## 472 1 1.3 ## 473 1 1.6 ## 474 1 0.9 ## 475 1 0.6 ## 476 1 0.6 ## 477 1 0.8 ## 478 1 0.5 ## 479 1 0.8 ## 480 1 1.5 ## 481 1 0.5 ## 482 1 2.1 ## 483 1 1.4 ## 484 1 0.8 ## 485 1 0.8 ## 486 1 1.1 ## 487 1 1.2 ## 488 1 1.3 ## 489 1 0.8 ## 490 1 1.0 ## 491 1 1.2 ## 492 1 1.3 ## 493 1 1.2 ## 494 1 0.9 ## 495 1 1.2 ## 496 1 1.5 ## 497 1 1.0 ## 498 1 1.3 ## 499 1 0.9 ## 500 1 1.0 ## 501 1 0.8 ## 502 1 1.0 ## 503 1 1.1 ## 504 1 0.9 ## 505 1 0.8 ## 506 1 0.9 ## 507 1 1.0 ## 508 1 1.1 ## 509 1 0.8 ## 510 1 1.0 ## 511 1 1.1 ## 512 1 0.8 ## 513 1 1.0 ## 514 1 0.9 ## 515 1 1.1 ## 516 1 0.9 ## 517 1 1.3 ## 518 1 1.3 ## 519 1 0.9 ## 520 1 0.9 ## 521 1 1.1 ## 522 1 1.0 ## 523 1 1.0 ## 524 1 1.0 ## 525 1 1.0 ## 526 1 1.3 ## 527 1 1.1 ## 528 1 1.0 ## 529 1 1.1 ## 530 1 1.4 ## 531 1 1.1 ## 532 1 0.9 ## 533 1 0.8 ## 534 1 1.6 ## 535 1 1.6 ## 536 1 1.4 ## 537 1 1.6 ## 538 1 1.0 ## 539 1 0.9 ## 540 1 1.1 ## 541 1 1.3 ## 542 1 1.6 ## 543 1 1.8 ## 544 1 1.4 ## 545 1 1.2 ## 546 1 1.3 ## 547 1 1.3 ## 548 1 1.3 ## 549 1 1.1 ## 550 1 1.2 ## 551 1 1.1 ## 552 1 1.4 ## 553 1 1.2 ## 554 1 1.3 ## 555 1 1.3 ## 556 1 1.1 ## 557 1 1.1 ## 558 1 1.3 ## 559 1 1.3 ## 560 1 0.8 ## 561 1 1.0 ## 562 1 1.2 ## 563 1 1.2 ## 564 1 1.2 ## 565 1 1.0 ## 566 1 0.7 ## 567 1 0.9 ## 568 1 1.3 ## 569 1 1.3 ## 570 1 1.5 ## 571 1 0.8 ## 572 1 1.4 ## 573 1 0.7 ## 574 1 1.2 ## 575 1 0.8 ## 576 1 1.1 ## 577 1 0.6 ## 578 1 1.9 ## 579 1 1.7 ## 580 1 1.9 ## 581 1 1.4 ## 582 1 1.6 ## 583 1 1.4 ## 584 1 1.5 ## 585 1 1.7 ## 586 1 1.9 ## 587 1 1.5 ## 588 1 1.5 ## 589 1 1.9 ## 590 1 2.0 ## 591 1 1.6 ## 592 1 1.5 ## 593 1 1.8 ## 594 1 1.7 ## 595 1 1.3 ## 596 1 1.4 ## 597 1 1.1 ## 598 1 1.2 ## 599 1 1.5 ## 600 1 1.5 ## 601 1 1.2 ## 602 1 1.4 ## 603 1 1.5 ## 604 1 1.8 ## 605 1 1.2 ## 606 1 1.2 ## 607 1 1.0 ## 608 1 1.3 ## 609 1 1.2 ## 610 1 1.3 ## 611 1 1.5 ## 612 1 1.4 ## 613 1 0.8 ## 614 1 1.4 ## 615 1 1.2 ## 616 1 1.3 ## 617 1 1.5 ## 618 1 1.5 ## 619 1 1.6 ## 620 1 1.1 ## 621 1 1.1 ## 622 1 1.2 ## 623 1 1.6 ## 624 1 1.2 ## 625 1 0.7 ## 626 1 0.7 ## xlog(median_house_price_2014) ## 1 12.66033 ## 2 12.72842 ## 3 12.79698 ## 4 12.91158 ## 5 12.98310 ## 6 13.08154 ## 7 12.64433 ## 8 12.89111 ## 9 12.88847 ## 10 12.88753 ## 11 12.89922 ## 12 13.01589 ## 13 12.74183 ## 14 13.08154 ## 15 13.00261 ## 16 13.21767 ## 17 12.83468 ## 18 12.74840 ## 19 12.79663 ## 20 12.40185 ## 21 12.73670 ## 22 12.67608 ## 23 12.88029 ## 24 12.46844 ## 25 12.37159 ## 26 12.35017 ## 27 12.36734 ## 28 12.41410 ## 29 12.76569 ## 30 12.40901 ## 31 12.42922 ## 32 12.30138 ## 33 12.67608 ## 34 12.26904 ## 35 12.75708 ## 36 12.42922 ## 37 12.42922 ## 38 12.57677 ## 39 12.38839 ## 40 12.42922 ## 41 13.00583 ## 42 12.99737 ## 43 12.76569 ## 44 12.89922 ## 45 12.50599 ## 46 13.07107 ## 47 12.64029 ## 48 12.95181 ## 49 12.88664 ## 50 13.05622 ## 51 12.69772 ## 52 13.08154 ## 53 13.09190 ## 54 12.42922 ## 55 12.67608 ## 56 12.66033 ## 57 12.59623 ## 58 12.88664 ## 59 12.42922 ## 60 12.73670 ## 61 12.42922 ## 62 12.39669 ## 63 12.34148 ## 64 12.42922 ## 65 12.33050 ## 66 12.80765 ## 67 12.54254 ## 68 12.42118 ## 69 12.75275 ## 70 12.82126 ## 71 13.55739 ## 72 12.32386 ## 73 12.42922 ## 74 12.50618 ## 75 12.42902 ## 76 12.50618 ## 77 12.75996 ## 78 12.83468 ## 79 12.61487 ## 80 12.42902 ## 81 13.38473 ## 82 13.35980 ## 83 12.45877 ## 84 12.40082 ## 85 12.32878 ## 86 12.48749 ## 87 12.42521 ## 88 12.75130 ## 89 13.32938 ## 90 12.87518 ## 91 12.42922 ## 92 12.92086 ## 93 13.32530 ## 94 12.56024 ## 95 12.61154 ## 96 12.86424 ## 97 13.12236 ## 98 12.63460 ## 99 12.81448 ## 100 13.19189 ## 101 13.03892 ## 102 12.99453 ## 103 13.56705 ## 104 13.25339 ## 105 13.15966 ## 106 12.94801 ## 107 12.38839 ## 108 12.39669 ## 109 12.42922 ## 110 12.24289 ## 111 12.32386 ## 112 12.42922 ## 113 12.59473 ## 114 12.59980 ## 115 12.51539 ## 116 12.80765 ## 117 12.54344 ## 118 12.42922 ## 119 12.67608 ## 120 12.42922 ## 121 12.28765 ## 122 12.34148 ## 123 12.52453 ## 124 12.25009 ## 125 12.64433 ## 126 12.42920 ## 127 12.32386 ## 128 12.46458 ## 129 12.51997 ## 130 12.76555 ## 131 12.64755 ## 132 13.16351 ## 133 12.72189 ## 134 13.06049 ## 135 12.62807 ## 136 12.82799 ## 137 13.12236 ## 138 12.93241 ## 139 12.54254 ## 140 12.42922 ## 141 12.52453 ## 142 12.54254 ## 143 12.42922 ## 144 12.42922 ## 145 12.89922 ## 146 12.77987 ## 147 12.74549 ## 148 12.89922 ## 149 13.16158 ## 150 12.51356 ## 151 12.96571 ## 152 12.50228 ## 153 12.85840 ## 154 13.22672 ## 155 12.90545 ## 156 12.84793 ## 157 12.57764 ## 158 12.80353 ## 159 13.12236 ## 160 12.68386 ## 161 12.98189 ## 162 12.64433 ## 163 12.98310 ## 164 12.84793 ## 165 12.87390 ## 166 12.78689 ## 167 13.06049 ## 168 12.42922 ## 169 12.76569 ## 170 12.42902 ## 171 12.58613 ## 172 12.71590 ## 173 12.48276 ## 174 12.42902 ## 175 12.42902 ## 176 13.12236 ## 177 12.62971 ## 178 12.92269 ## 179 13.42616 ## 180 13.04979 ## 181 13.00500 ## 182 12.68386 ## 183 12.99453 ## 184 13.11231 ## 185 12.63134 ## 186 13.01700 ## 187 12.81039 ## 188 12.87377 ## 189 12.94663 ## 190 12.75492 ## 191 13.22717 ## 192 12.61984 ## 193 13.13725 ## 194 13.62314 ## 195 13.17685 ## 196 12.98883 ## 197 13.02805 ## 198 13.16158 ## 199 12.89232 ## 200 13.34990 ## 201 12.81039 ## 202 12.82126 ## 203 12.72189 ## 204 12.98310 ## 205 12.81584 ## 206 12.42922 ## 207 12.76569 ## 208 12.86100 ## 209 12.83468 ## 210 12.73670 ## 211 12.75383 ## 212 12.77987 ## 213 13.14461 ## 214 12.79108 ## 215 13.33747 ## 216 12.94801 ## 217 12.94084 ## 218 12.98310 ## 219 13.11730 ## 220 12.97154 ## 221 13.45883 ## 222 12.88664 ## 223 12.76569 ## 224 12.93059 ## 225 12.97734 ## 226 13.28788 ## 227 13.32121 ## 228 12.87742 ## 229 13.11231 ## 230 12.76569 ## 231 13.27937 ## 232 13.65299 ## 233 12.88939 ## 234 13.25777 ## 235 12.95039 ## 236 12.64433 ## 237 12.75564 ## 238 12.91780 ## 239 12.78339 ## 240 12.56024 ## 241 12.84793 ## 242 12.66033 ## 243 12.66033 ## 244 12.57762 ## 245 12.57080 ## 246 13.27078 ## 247 13.12236 ## 248 12.95229 ## 249 12.93603 ## 250 12.99907 ## 251 12.48749 ## 252 12.79386 ## 253 12.39876 ## 254 12.42118 ## 255 12.86100 ## 256 12.76569 ## 257 12.73670 ## 258 12.77987 ## 259 12.50618 ## 260 12.71440 ## 261 13.02805 ## 262 12.82126 ## 263 12.57764 ## 264 12.70685 ## 265 12.39669 ## 266 12.42922 ## 267 12.90545 ## 268 12.66033 ## 269 12.58709 ## 270 12.69158 ## 271 12.57332 ## 272 12.50618 ## 273 12.84529 ## 274 12.49219 ## 275 13.01700 ## 276 12.66191 ## 277 12.96571 ## 278 12.46863 ## 279 12.75130 ## 280 12.80216 ## 281 12.49687 ## 282 12.42521 ## 283 12.32383 ## 284 12.15478 ## 285 12.42922 ## 286 12.42922 ## 287 12.54254 ## 288 12.56024 ## 289 12.54254 ## 290 12.66033 ## 291 12.35234 ## 292 12.22831 ## 293 12.10625 ## 294 12.09793 ## 295 12.15478 ## 296 12.54254 ## 297 12.46650 ## 298 12.52453 ## 299 12.49031 ## 300 12.52453 ## 301 12.54254 ## 302 12.66033 ## 303 12.42922 ## 304 12.42922 ## 305 12.41714 ## 306 12.45877 ## 307 12.68850 ## 308 12.98310 ## 309 13.06473 ## 310 12.83468 ## 311 12.42922 ## 312 12.77564 ## 313 12.25486 ## 314 12.42118 ## 315 12.79386 ## 316 12.42922 ## 317 12.42118 ## 318 12.42922 ## 319 12.67606 ## 320 13.12236 ## 321 12.75852 ## 322 12.46844 ## 323 12.79441 ## 324 12.76569 ## 325 12.48749 ## 326 12.42922 ## 327 12.28880 ## 328 12.44902 ## 329 12.71590 ## 330 12.69158 ## 331 12.56024 ## 332 12.70685 ## 333 12.71440 ## 334 12.55409 ## 335 12.68850 ## 336 12.63786 ## 337 12.90172 ## 338 12.77032 ## 339 12.79386 ## 340 12.86747 ## 341 12.73670 ## 342 12.57331 ## 343 12.69465 ## 344 12.72189 ## 345 12.64433 ## 346 12.56549 ## 347 12.75130 ## 348 13.03898 ## 349 12.81448 ## 350 12.66033 ## 351 12.61984 ## 352 12.64433 ## 353 12.63460 ## 354 12.66033 ## 355 12.73670 ## 356 12.42921 ## 357 12.17045 ## 358 12.36734 ## 359 12.62807 ## 360 12.32386 ## 361 12.59134 ## 362 12.79772 ## 363 12.87390 ## 364 12.73670 ## 365 12.81787 ## 366 12.73522 ## 367 12.42922 ## 368 13.12186 ## 369 12.94800 ## 370 12.83734 ## 371 12.86359 ## 372 12.42118 ## 373 12.40287 ## 374 12.57764 ## 375 12.87005 ## 376 12.73080 ## 377 12.42922 ## 378 12.50618 ## 379 12.38839 ## 380 12.66981 ## 381 12.61320 ## 382 12.75852 ## 383 12.45877 ## 384 12.41309 ## 385 12.51356 ## 386 12.57418 ## 387 13.30460 ## 388 13.12226 ## 389 13.02805 ## 390 12.84924 ## 391 13.03621 ## 392 13.12236 ## 393 13.34651 ## 394 13.35348 ## 395 13.80040 ## 396 13.52315 ## 397 12.72189 ## 398 13.08154 ## 399 13.01700 ## 400 12.94801 ## 401 13.22762 ## 402 13.30468 ## 403 13.39239 ## 404 14.12483 ## 405 13.02805 ## 406 12.40901 ## 407 14.24078 ## 408 13.50422 ## 409 12.67608 ## 410 13.07107 ## 411 13.12136 ## 412 13.24458 ## 413 12.54254 ## 414 12.56024 ## 415 13.16638 ## 416 13.08674 ## 417 12.42922 ## 418 12.57072 ## 419 12.86876 ## 420 12.59473 ## 421 13.24237 ## 422 13.11635 ## 423 12.54254 ## 424 12.76569 ## 425 12.83455 ## 426 13.45884 ## 427 13.24988 ## 428 12.88664 ## 429 13.11795 ## 430 13.18815 ## 431 12.99453 ## 432 12.99567 ## 433 13.15241 ## 434 13.20117 ## 435 13.29632 ## 436 12.92391 ## 437 13.11534 ## 438 13.29632 ## 439 13.12236 ## 440 13.58610 ## 441 12.89546 ## 442 13.18063 ## 443 13.35348 ## 444 13.45884 ## 445 13.76422 ## 446 13.52114 ## 447 13.62647 ## 448 14.10069 ## 449 13.59860 ## 450 13.46453 ## 451 13.51609 ## 452 13.33465 ## 453 13.12236 ## 454 12.96571 ## 455 12.99453 ## 456 13.03462 ## 457 13.44445 ## 458 13.57503 ## 459 13.23211 ## 460 13.25777 ## 461 13.86430 ## 462 14.13396 ## 463 14.11042 ## 464 13.18778 ## 465 13.81050 ## 466 13.91082 ## 467 14.50615 ## 468 14.48334 ## 469 14.07402 ## 470 13.93551 ## 471 13.56191 ## 472 13.74830 ## 473 13.37312 ## 474 13.57121 ## 475 14.09692 ## 476 14.37227 ## 477 14.27767 ## 478 14.15198 ## 479 14.04860 ## 480 13.70458 ## 481 15.06827 ## 482 13.65299 ## 483 13.91082 ## 484 13.64116 ## 485 14.21261 ## 486 13.12226 ## 487 13.79019 ## 488 13.75629 ## 489 13.52783 ## 490 13.90169 ## 491 13.20854 ## 492 13.65299 ## 493 13.66148 ## 494 13.48095 ## 495 13.12231 ## 496 13.67625 ## 497 13.55803 ## 498 12.99453 ## 499 13.51508 ## 500 13.38473 ## 501 13.05622 ## 502 13.23569 ## 503 13.43717 ## 504 13.04979 ## 505 13.60910 ## 506 13.23569 ## 507 13.34551 ## 508 13.26213 ## 509 13.76947 ## 510 13.30468 ## 511 13.98946 ## 512 13.35363 ## 513 13.34150 ## 514 13.65299 ## 515 13.21276 ## 516 13.30468 ## 517 12.94801 ## 518 12.84793 ## 519 12.82126 ## 520 13.02365 ## 521 12.83468 ## 522 12.78689 ## 523 12.86100 ## 524 12.85579 ## 525 12.80285 ## 526 12.69158 ## 527 12.58793 ## 528 12.61984 ## 529 12.93603 ## 530 12.69158 ## 531 13.10012 ## 532 13.12235 ## 533 13.14217 ## 534 13.50422 ## 535 13.01143 ## 536 13.38473 ## 537 12.91164 ## 538 13.41129 ## 539 13.12236 ## 540 13.04979 ## 541 13.36922 ## 542 13.41129 ## 543 13.21767 ## 544 13.48004 ## 545 13.11362 ## 546 13.02144 ## 547 12.92391 ## 548 13.01143 ## 549 13.17115 ## 550 13.02254 ## 551 12.99453 ## 552 13.08154 ## 553 13.04979 ## 554 12.73670 ## 555 13.09190 ## 556 13.08803 ## 557 12.97849 ## 558 12.83468 ## 559 12.73670 ## 560 12.83468 ## 561 12.85579 ## 562 13.07107 ## 563 13.06314 ## 564 13.01700 ## 565 12.93603 ## 566 13.12226 ## 567 12.94801 ## 568 12.56024 ## 569 13.50422 ## 570 12.97154 ## 571 13.04979 ## 572 12.71394 ## 573 13.24237 ## 574 13.07632 ## 575 13.61706 ## 576 12.94563 ## 577 13.34551 ## 578 12.76569 ## 579 12.75130 ## 580 12.82126 ## 581 12.82799 ## 582 12.69619 ## 583 12.76569 ## 584 12.43520 ## 585 12.49500 ## 586 12.69158 ## 587 12.43917 ## 588 12.62314 ## 589 12.42521 ## 590 12.36094 ## 591 12.38839 ## 592 12.54254 ## 593 12.54254 ## 594 12.42922 ## 595 12.42922 ## 596 12.51906 ## 597 12.42922 ## 598 12.48333 ## 599 12.42922 ## 600 12.42922 ## 601 12.42922 ## 602 12.46844 ## 603 12.42920 ## 604 12.42922 ## 605 12.65396 ## 606 12.42911 ## 607 12.34583 ## 608 12.20607 ## 609 12.29683 ## 610 12.23320 ## 611 12.21850 ## 612 12.06105 ## 613 12.65316 ## 614 12.30138 ## 615 12.23077 ## 616 12.26434 ## 617 12.25486 ## 618 12.27839 ## 619 12.27839 ## 620 12.27839 ## 621 12.36734 ## 622 12.38839 ## 623 12.39048 ## 624 12.26905 ## 625 13.54763 ## 626 13.54763 ## attr(,&quot;assign&quot;) ## [1] 1 1 1 ## ## $tary ## 1 2 3 4 5 6 7 8 ## 321.0324 336.6093 340.8668 351.4557 369.6022 336.7019 306.5258 360.4061 ## 9 10 11 12 13 14 15 16 ## 345.4616 335.2043 322.6695 365.7013 306.8562 366.1106 353.4498 377.6631 ## 17 18 19 20 21 22 23 24 ## 334.4053 338.5541 351.1055 302.8789 328.8973 343.8477 345.6174 307.2508 ## 25 26 27 28 29 30 31 32 ## 315.0692 308.1082 315.7701 310.6027 324.5970 288.4201 339.7582 275.1737 ## 33 34 35 36 37 38 39 40 ## 318.0195 314.5294 318.4278 297.5854 296.4121 316.7732 317.2815 317.2076 ## 41 42 43 44 45 46 47 48 ## 335.6474 346.4949 339.8718 362.5511 311.0534 368.3065 336.5277 353.0405 ## 49 50 51 52 53 54 55 56 ## 353.7935 379.4758 337.3657 357.8105 355.1709 284.7431 321.9377 333.4760 ## 57 58 59 60 61 62 63 64 ## 325.6697 341.1174 294.9667 327.4033 301.5436 295.4381 312.6736 291.1114 ## 65 66 67 68 69 70 71 72 ## 312.8857 316.6882 320.9706 335.1825 364.9982 328.3778 343.1170 308.3177 ## 73 74 75 76 77 78 79 80 ## 315.2180 317.2317 338.2011 329.6439 332.5617 340.5284 314.5883 343.5023 ## 81 82 83 84 85 86 87 88 ## 353.9970 341.8204 307.1169 304.4111 318.2342 306.8280 313.1554 321.1991 ## 89 90 91 92 93 94 95 96 ## 378.3196 303.1225 313.8584 310.7136 370.0963 336.0072 301.1038 326.3222 ## 97 98 99 100 101 102 103 104 ## 337.4526 323.7834 337.8136 336.4936 347.8247 319.2405 348.7881 334.2653 ## 105 106 107 108 109 110 111 112 ## 327.9116 350.6782 302.8260 302.9910 319.6534 305.1239 312.7568 311.7774 ## 113 114 115 116 117 118 119 120 ## 319.6254 339.6334 326.2188 350.1037 333.0276 290.6202 335.0489 289.4734 ## 121 122 123 124 125 126 127 128 ## 297.1720 283.6317 338.6270 318.2531 305.9885 292.2125 288.6465 308.3904 ## 129 130 131 132 133 134 135 136 ## 292.5297 343.8699 324.7747 365.3651 338.4311 337.7461 323.9590 349.5096 ## 137 138 139 140 141 142 143 144 ## 349.3842 330.8915 325.0119 309.9250 332.0775 306.6633 315.9870 312.8322 ## 145 146 147 148 149 150 151 152 ## 345.4770 333.8901 341.1679 331.0696 366.5088 316.0918 356.8232 321.0207 ## 153 154 155 156 157 158 159 160 ## 322.4230 312.2102 339.4518 347.9867 319.5072 355.2197 350.4148 349.8169 ## 161 162 163 164 165 166 167 168 ## 340.0357 313.5127 354.1050 335.8122 329.8201 332.7666 343.9299 304.5673 ## 169 170 171 172 173 174 175 176 ## 337.3812 296.4044 313.7757 319.9019 325.2791 329.4783 316.6482 305.6480 ## 177 178 179 180 181 182 183 184 ## 303.5750 295.3119 344.1060 352.6602 317.4578 309.1447 354.8794 309.9067 ## 185 186 187 188 189 190 191 192 ## 296.3923 312.1381 329.9883 319.0844 352.2284 338.6063 340.3081 305.6572 ## 193 194 195 196 197 198 199 200 ## 333.6166 366.0772 358.8392 348.2057 325.5546 350.9833 323.8657 367.0949 ## 201 202 203 204 205 206 207 208 ## 344.7913 355.1501 341.0303 337.4902 336.1979 312.0827 351.2152 367.3406 ## 209 210 211 212 213 214 215 216 ## 325.7017 339.6685 309.8606 320.1656 317.7872 314.2773 294.2215 311.1605 ## 217 218 219 220 221 222 223 224 ## 290.3642 304.5134 310.8580 307.8081 319.5010 315.3803 312.9439 302.8388 ## 225 226 227 228 229 230 231 232 ## 322.3017 323.0269 309.8454 312.3270 331.4725 321.7619 296.5034 355.4947 ## 233 234 235 236 237 238 239 240 ## 323.6830 332.2660 328.1538 303.0076 314.2407 306.7251 323.9359 319.6245 ## 241 242 243 244 245 246 247 248 ## 318.0574 318.5223 317.2875 312.1200 308.8345 310.2327 320.7410 310.7688 ## 249 250 251 252 253 254 255 256 ## 317.3577 317.4682 292.0379 311.1436 288.8378 300.5945 294.2010 306.5659 ## 257 258 259 260 261 262 263 264 ## 331.6138 312.1484 299.0818 310.3535 312.7355 318.1550 300.9643 310.6530 ## 265 266 267 268 269 270 271 272 ## 297.3611 305.9983 332.8590 303.5714 327.0825 318.0445 350.4817 318.4266 ## 273 274 275 276 277 278 279 280 ## 300.9059 307.6448 308.4913 309.4521 325.5011 311.4209 337.2882 314.8358 ## 281 282 283 284 285 286 287 288 ## 311.6265 303.9360 315.8748 309.6287 299.7475 346.6747 331.2969 323.4576 ## 289 290 291 292 293 294 295 296 ## 346.2139 356.9715 300.5540 284.3557 310.6106 304.4882 303.0060 333.8279 ## 297 298 299 300 301 302 303 304 ## 330.1879 338.3093 335.2542 341.4293 325.5406 323.4308 323.4535 324.6333 ## 305 306 307 308 309 310 311 312 ## 296.9279 301.3535 315.5634 349.4630 337.9093 345.5099 288.6206 334.7735 ## 313 314 315 316 317 318 319 320 ## 292.5360 302.6301 362.6984 308.4132 312.3835 310.2101 327.8532 346.0791 ## 321 322 323 324 325 326 327 328 ## 358.7785 305.5665 351.6595 326.7185 324.9301 305.4028 302.8616 292.9724 ## 329 330 331 332 333 334 335 336 ## 326.0153 305.2082 316.6081 330.7522 310.3599 311.1835 300.0606 304.7279 ## 337 338 339 340 341 342 343 344 ## 305.2363 316.3858 319.2654 328.9687 319.6575 320.1540 310.2953 310.4798 ## 345 346 347 348 349 350 351 352 ## 340.1417 324.2379 314.8995 340.9614 353.5644 345.5304 327.9593 323.1667 ## 353 354 355 356 357 358 359 360 ## 316.4455 337.7158 321.5171 303.2390 337.9741 329.0309 337.1862 339.2295 ## 361 362 363 364 365 366 367 368 ## 331.0366 369.1812 370.7016 342.1980 355.6766 331.2164 327.2098 368.0776 ## 369 370 371 372 373 374 375 376 ## 357.1488 362.7540 318.6938 309.5779 304.4076 368.2683 355.8812 334.7719 ## 377 378 379 380 381 382 383 384 ## 336.1705 350.1869 311.9953 358.8254 343.0533 348.7211 330.2701 376.2063 ## 385 386 387 388 389 390 391 392 ## 347.3906 338.4508 340.7164 376.6277 372.5439 322.6853 364.8417 334.5907 ## 393 394 395 396 397 398 399 400 ## 357.4510 361.0119 394.4244 339.0827 309.2294 372.1827 331.8195 339.4782 ## 401 402 403 404 405 406 407 408 ## 373.4214 366.8629 359.8062 325.7523 362.6312 293.4552 386.9572 338.4091 ## 409 410 411 412 413 414 415 416 ## 333.1795 360.9230 339.0581 389.4240 327.8093 310.8952 378.9339 330.3431 ## 417 418 419 420 421 422 423 424 ## 313.9461 311.6270 331.1856 317.8916 370.7273 340.8745 299.9850 333.4159 ## 425 426 427 428 429 430 431 432 ## 295.0911 342.9091 339.0638 307.4353 327.1670 314.3942 327.9376 320.0644 ## 433 434 435 436 437 438 439 440 ## 336.6783 324.5347 316.3179 338.2369 345.3041 346.7858 337.2191 339.6366 ## 441 442 443 444 445 446 447 448 ## 317.7763 311.5805 311.8330 322.4199 307.3197 278.7839 319.6090 319.3327 ## 449 450 451 452 453 454 455 456 ## 292.3132 338.3570 323.3705 341.0252 310.7892 307.3949 329.6223 315.1757 ## 457 458 459 460 461 462 463 464 ## 332.8500 341.2002 298.8324 329.3097 310.2475 363.6773 320.9668 311.8470 ## 465 466 467 468 469 470 471 472 ## 340.8503 342.4266 364.1901 354.0801 355.1875 384.1896 328.7194 309.3255 ## 473 474 475 476 477 478 479 480 ## 329.6614 357.4737 342.2389 375.3284 336.5737 288.9233 350.1447 347.5210 ## 481 482 483 484 485 486 487 488 ## 337.0917 333.4491 342.0186 324.6475 361.2488 331.2951 356.4533 293.9976 ## 489 490 491 492 493 494 495 496 ## 327.7553 388.7350 314.0344 342.6011 308.6910 366.3007 336.6257 301.8955 ## 497 498 499 500 501 502 503 504 ## 321.3526 317.2718 303.1037 314.2293 312.2921 341.1154 336.9167 311.8993 ## 505 506 507 508 509 510 511 512 ## 335.5368 315.3361 320.3198 325.0362 355.4506 321.9791 382.5322 302.9632 ## 513 514 515 516 517 518 519 520 ## 326.3038 325.8527 296.0723 318.0543 311.6493 303.4423 318.6037 322.4099 ## 521 522 523 524 525 526 527 528 ## 307.2192 307.1863 333.1062 320.9844 323.1294 317.5938 288.6880 308.4244 ## 529 530 531 532 533 534 535 536 ## 321.4418 293.1502 322.4732 336.6927 320.0971 298.5723 310.0679 329.1626 ## 537 538 539 540 541 542 543 544 ## 310.2598 341.0214 321.2133 324.1850 322.2389 300.7236 308.9872 319.0314 ## 545 546 547 548 549 550 551 552 ## 326.8403 332.8381 307.8637 314.3383 328.1653 292.7311 293.3139 312.9940 ## 553 554 555 556 557 558 559 560 ## 292.4475 309.2307 330.3319 326.2600 316.2803 336.5313 318.8393 318.6810 ## 561 562 563 564 565 566 567 568 ## 318.8508 321.4221 318.9684 326.8923 324.3559 344.1458 334.1986 330.1084 ## 569 570 571 572 573 574 575 576 ## 313.6640 300.3375 373.3398 333.2513 364.8441 333.3008 372.9585 327.6023 ## 577 578 579 580 581 582 583 584 ## 379.9012 300.3925 299.2133 303.6331 317.6987 291.0637 307.5557 299.2972 ## 585 586 587 588 589 590 591 592 ## 313.2120 297.3837 291.4820 303.6307 303.9612 303.9268 309.3517 305.9243 ## 593 594 595 596 597 598 599 600 ## 297.1496 297.8616 312.0125 306.1310 317.5285 314.2327 323.2692 309.2241 ## 601 602 603 604 605 606 607 608 ## 319.6197 314.6226 321.5457 300.8629 329.1975 327.1052 312.6983 299.0788 ## 609 610 611 612 613 614 615 616 ## 304.8628 298.3406 300.2578 316.0344 336.1331 314.0695 300.8616 303.7695 ## 617 618 619 620 621 622 623 624 ## 293.8304 305.5482 301.6626 295.6906 309.1891 304.2649 291.7402 310.8852 ## 625 626 ## 351.1099 351.1099 ## ## $y ## 1 2 3 4 5 6 7 8 9 10 11 12 13 ## 321.3 337.5 342.7 353.3 372.3 339.8 307.1 361.6 347.0 336.4 324.8 367.5 308.4 ## 14 15 16 17 18 19 20 21 22 23 24 25 26 ## 367.0 355.0 378.9 335.0 339.7 352.3 304.6 330.1 345.9 346.8 309.5 317.3 309.5 ## 27 28 29 30 31 32 33 34 35 36 37 38 39 ## 317.7 311.7 326.8 289.8 341.2 276.0 319.2 316.7 320.1 299.3 297.8 318.4 318.9 ## 40 41 42 43 44 45 46 47 48 49 50 51 52 ## 318.3 337.4 348.8 341.7 363.7 311.6 369.8 338.2 355.1 355.3 381.0 339.7 359.3 ## 53 54 55 56 57 58 59 60 61 62 63 64 65 ## 357.2 286.7 323.3 335.5 327.1 343.4 296.1 328.6 303.0 296.9 313.5 292.8 314.6 ## 66 67 68 69 70 71 72 73 74 75 76 77 78 ## 318.5 323.2 337.2 367.0 330.8 345.5 309.4 316.6 318.9 340.2 331.1 333.7 342.9 ## 79 80 81 82 83 84 85 86 87 88 89 90 91 ## 315.8 345.0 355.5 343.6 309.1 305.8 319.9 308.5 315.4 323.2 379.5 305.9 315.5 ## 92 93 94 95 96 97 98 99 100 101 102 103 104 ## 313.4 371.3 337.1 302.8 328.0 338.9 324.9 339.8 338.9 349.3 320.7 350.5 335.7 ## 105 106 107 108 109 110 111 112 113 114 115 116 117 ## 330.2 352.1 304.2 304.6 321.9 307.3 314.2 313.1 321.5 340.8 328.0 351.8 334.7 ## 118 119 120 121 122 123 124 125 126 127 128 129 130 ## 292.3 336.5 290.8 298.5 284.4 340.6 319.9 306.9 293.3 289.7 309.2 294.2 345.0 ## 131 132 133 134 135 136 137 138 139 140 141 142 143 ## 326.5 366.8 340.5 338.6 327.5 350.7 350.9 332.4 326.1 312.1 334.0 308.6 317.1 ## 144 145 146 147 148 149 150 151 152 153 154 155 156 ## 314.5 347.0 335.3 343.2 332.3 368.6 318.2 359.5 322.8 323.9 313.1 340.9 349.8 ## 157 158 159 160 161 162 163 164 165 166 167 168 169 ## 321.0 357.0 351.3 351.0 342.1 314.7 356.1 337.0 331.6 334.2 345.7 305.7 339.1 ## 170 171 172 173 174 175 176 177 178 179 180 181 182 ## 298.6 315.7 321.6 327.0 331.2 318.6 307.6 304.9 296.7 345.8 354.6 319.2 310.8 ## 183 184 185 186 187 188 189 190 191 192 193 194 195 ## 357.2 311.5 298.1 314.1 332.0 320.3 353.4 340.3 342.1 307.7 335.7 368.5 360.7 ## 196 197 198 199 200 201 202 203 204 205 206 207 208 ## 350.1 326.7 352.8 325.6 368.9 346.9 356.7 343.5 339.3 337.4 313.5 352.7 368.9 ## 209 210 211 212 213 214 215 216 217 218 219 220 221 ## 327.7 341.1 311.0 322.1 319.2 316.5 296.2 312.5 292.0 305.6 313.0 308.9 321.5 ## 222 223 224 225 226 227 228 229 230 231 232 233 234 ## 317.3 314.3 304.8 324.5 324.8 311.5 313.7 333.5 324.0 298.5 356.9 325.4 333.7 ## 235 236 237 238 239 240 241 242 243 244 245 246 247 ## 330.4 304.4 315.9 308.7 325.3 321.0 320.0 319.9 319.5 314.3 310.2 312.8 322.1 ## 248 249 250 251 252 253 254 255 256 257 258 259 260 ## 312.4 319.0 318.3 294.5 312.8 290.5 302.2 295.6 308.2 333.0 313.5 300.7 311.4 ## 261 262 263 264 265 266 267 268 269 270 271 272 273 ## 314.4 319.5 303.4 312.0 299.0 308.2 334.2 305.2 329.3 319.5 352.5 320.1 302.8 ## 274 275 276 277 278 279 280 281 282 283 284 285 286 ## 309.0 310.9 310.9 327.4 313.1 339.0 316.2 313.0 305.6 317.5 311.5 301.1 348.7 ## 287 288 289 290 291 292 293 294 295 296 297 298 299 ## 332.8 324.9 347.7 358.7 301.4 285.7 312.2 306.1 304.6 335.6 331.9 340.1 337.0 ## 300 301 302 303 304 305 306 307 308 309 310 311 312 ## 342.9 327.2 325.4 324.8 326.3 298.3 303.0 317.0 351.0 339.7 347.0 290.8 336.5 ## 313 314 315 316 317 318 319 320 321 322 323 324 325 ## 293.6 304.0 364.5 310.4 313.5 311.3 329.8 348.5 360.6 307.5 353.4 327.9 327.2 ## 326 327 328 329 330 331 332 333 334 335 336 337 338 ## 306.5 303.4 294.6 328.5 307.1 318.5 332.2 311.7 313.4 300.9 305.8 307.2 317.5 ## 339 340 341 342 343 344 345 346 347 348 349 350 351 ## 321.2 330.7 321.6 321.9 311.7 311.9 341.8 325.7 316.6 343.9 355.1 347.6 330.1 ## 352 353 354 355 356 357 358 359 360 361 362 363 364 ## 324.3 318.7 340.0 322.7 304.6 339.7 330.5 338.6 341.0 332.2 370.9 372.2 343.7 ## 365 366 367 368 369 370 371 372 373 374 375 376 377 ## 357.2 333.0 328.6 369.8 359.6 364.0 320.2 311.3 306.1 369.5 357.1 336.3 337.7 ## 378 379 380 381 382 383 384 385 386 387 388 389 390 ## 352.0 313.5 360.3 344.5 351.1 332.0 377.4 349.2 340.7 342.8 378.2 374.4 324.4 ## 391 392 393 394 395 396 397 398 399 400 401 402 403 ## 366.1 337.5 359.6 362.8 396.2 341.8 310.4 373.7 333.9 341.0 375.6 369.3 361.4 ## 404 405 406 407 408 409 410 411 412 413 414 415 416 ## 327.8 364.2 296.0 388.7 340.5 334.7 363.4 341.0 391.6 329.6 312.6 380.7 332.4 ## 417 418 419 420 421 422 423 424 425 426 427 428 429 ## 315.6 313.0 332.9 319.3 372.3 342.7 301.1 335.4 297.2 344.9 340.5 308.9 328.3 ## 430 431 432 433 434 435 436 437 438 439 440 441 442 ## 316.1 329.4 322.4 338.1 326.0 317.8 339.7 347.6 348.2 339.8 341.9 319.2 313.3 ## 443 444 445 446 447 448 449 450 451 452 453 454 455 ## 314.7 323.8 309.3 279.9 321.3 321.3 294.3 339.5 325.4 343.1 312.8 308.5 331.9 ## 456 457 458 459 460 461 462 463 464 465 466 467 468 ## 317.4 333.9 343.1 300.0 330.5 311.7 365.4 323.0 314.4 342.3 344.5 366.2 355.6 ## 469 470 471 472 473 474 475 476 477 478 479 480 481 ## 357.0 385.6 330.4 311.1 330.5 359.2 344.1 376.8 337.8 291.1 352.8 349.0 340.7 ## 482 483 484 485 486 487 488 489 490 491 492 493 494 ## 335.5 343.5 326.4 363.1 333.0 358.5 296.6 329.1 390.2 314.9 344.1 310.2 368.0 ## 495 496 497 498 499 500 501 502 503 504 505 506 507 ## 338.6 303.9 323.3 318.4 305.1 316.0 314.0 342.9 339.0 313.6 337.7 317.0 322.0 ## 508 509 510 511 512 513 514 515 516 517 518 519 520 ## 326.2 357.2 323.4 384.3 305.2 328.3 327.6 297.2 319.8 313.0 305.3 320.0 324.4 ## 521 522 523 524 525 526 527 528 529 530 531 532 533 ## 309.4 308.9 334.5 322.9 324.8 319.5 290.3 310.3 323.1 294.8 324.5 338.4 321.2 ## 534 535 536 537 538 539 540 541 542 543 544 545 546 ## 300.6 312.0 331.1 312.2 343.0 322.6 325.6 324.2 302.4 310.4 320.4 328.5 334.5 ## 547 548 549 550 551 552 553 554 555 556 557 558 559 ## 309.8 315.8 329.6 295.3 295.0 314.9 294.4 310.6 332.3 327.7 318.0 338.5 320.5 ## 560 561 562 563 564 565 566 567 568 569 570 571 572 ## 320.4 320.5 322.5 320.6 328.0 326.3 345.6 335.9 331.8 315.8 302.8 375.2 335.0 ## 573 574 575 576 577 578 579 580 581 582 583 584 585 ## 366.3 335.0 374.5 329.4 382.0 302.1 300.6 304.7 319.6 292.4 309.4 300.9 314.8 ## 586 587 588 589 590 591 592 593 594 595 596 597 598 ## 298.7 292.8 305.5 306.1 305.8 311.5 308.9 299.0 299.2 313.9 307.5 318.9 315.9 ## 599 600 601 602 603 604 605 606 607 608 609 610 611 ## 325.2 310.6 321.0 316.3 323.2 302.5 330.6 328.8 314.7 300.7 307.0 300.2 301.6 ## 612 613 614 615 616 617 618 619 620 621 622 623 624 ## 317.7 337.8 315.7 302.2 305.4 295.5 307.4 303.0 297.3 310.8 305.9 293.4 312.2 ## 625 626 ## 354.5 354.5 ## ## $X ## (Intercept) unauthorised_absence_in_all_schools_percent_2013 ## 1 1 0.8 ## 2 1 0.7 ## 3 1 0.5 ## 4 1 0.4 ## 5 1 0.7 ## 6 1 0.9 ## 7 1 0.8 ## 8 1 0.6 ## 9 1 0.7 ## 10 1 0.5 ## 11 1 0.6 ## 12 1 0.6 ## 13 1 1.4 ## 14 1 0.6 ## 15 1 0.5 ## 16 1 0.5 ## 17 1 0.9 ## 18 1 0.7 ## 19 1 0.7 ## 20 1 1.5 ## 21 1 1.1 ## 22 1 0.9 ## 23 1 0.8 ## 24 1 1.3 ## 25 1 1.5 ## 26 1 1.6 ## 27 1 1.4 ## 28 1 1.3 ## 29 1 1.1 ## 30 1 2.1 ## 31 1 1.2 ## 32 1 1.9 ## 33 1 1.0 ## 34 1 1.6 ## 35 1 1.1 ## 36 1 1.3 ## 37 1 1.4 ## 38 1 1.3 ## 39 1 1.3 ## 40 1 1.4 ## 41 1 1.2 ## 42 1 0.7 ## 43 1 0.8 ## 44 1 0.8 ## 45 1 1.0 ## 46 1 0.3 ## 47 1 0.7 ## 48 1 0.4 ## 49 1 0.7 ## 50 1 0.3 ## 51 1 0.6 ## 52 1 0.6 ## 53 1 0.7 ## 54 1 1.4 ## 55 1 1.1 ## 56 1 0.9 ## 57 1 1.0 ## 58 1 0.7 ## 59 1 1.7 ## 60 1 1.0 ## 61 1 1.3 ## 62 1 1.7 ## 63 1 1.4 ## 64 1 1.5 ## 65 1 1.3 ## 66 1 1.1 ## 67 1 1.2 ## 68 1 1.0 ## 69 1 0.9 ## 70 1 1.0 ## 71 1 0.6 ## 72 1 1.3 ## 73 1 1.1 ## 74 1 1.3 ## 75 1 1.3 ## 76 1 1.2 ## 77 1 1.3 ## 78 1 1.1 ## 79 1 1.2 ## 80 1 1.1 ## 81 1 0.6 ## 82 1 1.0 ## 83 1 1.1 ## 84 1 1.1 ## 85 1 1.1 ## 86 1 0.7 ## 87 1 1.0 ## 88 1 0.9 ## 89 1 0.3 ## 90 1 1.3 ## 91 1 1.1 ## 92 1 1.0 ## 93 1 0.5 ## 94 1 0.8 ## 95 1 1.0 ## 96 1 0.9 ## 97 1 0.8 ## 98 1 0.7 ## 99 1 0.8 ## 100 1 1.1 ## 101 1 0.8 ## 102 1 1.0 ## 103 1 1.0 ## 104 1 1.0 ## 105 1 1.0 ## 106 1 0.4 ## 107 1 0.8 ## 108 1 1.0 ## 109 1 1.1 ## 110 1 1.0 ## 111 1 0.8 ## 112 1 1.1 ## 113 1 0.7 ## 114 1 0.5 ## 115 1 0.7 ## 116 1 0.5 ## 117 1 0.6 ## 118 1 0.9 ## 119 1 0.6 ## 120 1 1.4 ## 121 1 1.4 ## 122 1 1.6 ## 123 1 0.6 ## 124 1 1.3 ## 125 1 1.0 ## 126 1 1.6 ## 127 1 1.5 ## 128 1 1.1 ## 129 1 1.3 ## 130 1 0.7 ## 131 1 0.7 ## 132 1 0.3 ## 133 1 0.6 ## 134 1 0.7 ## 135 1 0.7 ## 136 1 0.5 ## 137 1 0.4 ## 138 1 0.6 ## 139 1 1.3 ## 140 1 1.2 ## 141 1 0.9 ## 142 1 1.2 ## 143 1 1.1 ## 144 1 1.2 ## 145 1 0.4 ## 146 1 0.8 ## 147 1 0.8 ## 148 1 0.8 ## 149 1 0.3 ## 150 1 1.0 ## 151 1 0.5 ## 152 1 0.9 ## 153 1 1.2 ## 154 1 1.0 ## 155 1 0.7 ## 156 1 0.8 ## 157 1 0.9 ## 158 1 0.7 ## 159 1 0.8 ## 160 1 0.6 ## 161 1 0.7 ## 162 1 1.2 ## 163 1 0.6 ## 164 1 0.7 ## 165 1 0.6 ## 166 1 0.7 ## 167 1 0.7 ## 168 1 1.0 ## 169 1 1.1 ## 170 1 1.5 ## 171 1 1.2 ## 172 1 1.0 ## 173 1 0.8 ## 174 1 1.0 ## 175 1 1.2 ## 176 1 1.1 ## 177 1 1.4 ## 178 1 1.2 ## 179 1 0.9 ## 180 1 1.1 ## 181 1 1.0 ## 182 1 1.1 ## 183 1 0.8 ## 184 1 1.0 ## 185 1 1.2 ## 186 1 1.2 ## 187 1 0.8 ## 188 1 1.1 ## 189 1 0.6 ## 190 1 0.9 ## 191 1 1.0 ## 192 1 1.3 ## 193 1 1.1 ## 194 1 0.7 ## 195 1 0.8 ## 196 1 0.8 ## 197 1 1.0 ## 198 1 1.2 ## 199 1 0.9 ## 200 1 0.7 ## 201 1 0.8 ## 202 1 0.8 ## 203 1 0.9 ## 204 1 0.8 ## 205 1 0.6 ## 206 1 1.2 ## 207 1 1.0 ## 208 1 0.7 ## 209 1 1.1 ## 210 1 1.3 ## 211 1 1.3 ## 212 1 1.2 ## 213 1 1.1 ## 214 1 1.2 ## 215 1 1.0 ## 216 1 1.1 ## 217 1 1.2 ## 218 1 1.3 ## 219 1 0.9 ## 220 1 1.1 ## 221 1 0.9 ## 222 1 1.2 ## 223 1 1.2 ## 224 1 1.3 ## 225 1 1.1 ## 226 1 1.1 ## 227 1 1.0 ## 228 1 1.0 ## 229 1 0.9 ## 230 1 1.0 ## 231 1 1.6 ## 232 1 0.4 ## 233 1 0.9 ## 234 1 1.1 ## 235 1 0.8 ## 236 1 1.1 ## 237 1 1.3 ## 238 1 1.1 ## 239 1 1.0 ## 240 1 1.0 ## 241 1 1.3 ## 242 1 1.2 ## 243 1 1.4 ## 244 1 1.3 ## 245 1 1.4 ## 246 1 1.5 ## 247 1 1.4 ## 248 1 1.0 ## 249 1 1.4 ## 250 1 1.1 ## 251 1 1.5 ## 252 1 0.8 ## 253 1 1.5 ## 254 1 1.4 ## 255 1 1.4 ## 256 1 1.4 ## 257 1 1.1 ## 258 1 1.1 ## 259 1 1.1 ## 260 1 1.0 ## 261 1 1.0 ## 262 1 1.2 ## 263 1 1.3 ## 264 1 1.4 ## 265 1 1.2 ## 266 1 1.5 ## 267 1 1.0 ## 268 1 1.4 ## 269 1 1.8 ## 270 1 0.8 ## 271 1 1.2 ## 272 1 1.0 ## 273 1 1.4 ## 274 1 1.7 ## 275 1 1.4 ## 276 1 1.6 ## 277 1 1.2 ## 278 1 1.6 ## 279 1 0.7 ## 280 1 1.4 ## 281 1 1.3 ## 282 1 1.5 ## 283 1 1.8 ## 284 1 1.2 ## 285 1 1.2 ## 286 1 0.7 ## 287 1 0.8 ## 288 1 1.0 ## 289 1 0.7 ## 290 1 0.5 ## 291 1 1.2 ## 292 1 1.4 ## 293 1 1.2 ## 294 1 1.0 ## 295 1 1.0 ## 296 1 0.8 ## 297 1 0.9 ## 298 1 0.7 ## 299 1 1.0 ## 300 1 0.8 ## 301 1 0.7 ## 302 1 0.5 ## 303 1 0.9 ## 304 1 0.8 ## 305 1 1.0 ## 306 1 0.8 ## 307 1 1.4 ## 308 1 0.7 ## 309 1 0.9 ## 310 1 0.9 ## 311 1 2.0 ## 312 1 1.0 ## 313 1 2.1 ## 314 1 2.2 ## 315 1 0.9 ## 316 1 1.5 ## 317 1 1.6 ## 318 1 1.7 ## 319 1 1.1 ## 320 1 0.9 ## 321 1 0.8 ## 322 1 2.1 ## 323 1 0.9 ## 324 1 0.7 ## 325 1 1.5 ## 326 1 2.0 ## 327 1 2.2 ## 328 1 1.5 ## 329 1 1.2 ## 330 1 1.1 ## 331 1 1.4 ## 332 1 1.0 ## 333 1 1.5 ## 334 1 1.5 ## 335 1 1.3 ## 336 1 1.3 ## 337 1 1.1 ## 338 1 1.0 ## 339 1 1.1 ## 340 1 1.0 ## 341 1 0.9 ## 342 1 1.0 ## 343 1 1.5 ## 344 1 1.3 ## 345 1 1.1 ## 346 1 1.2 ## 347 1 1.0 ## 348 1 1.0 ## 349 1 1.4 ## 350 1 0.8 ## 351 1 1.1 ## 352 1 1.0 ## 353 1 1.2 ## 354 1 0.8 ## 355 1 0.9 ## 356 1 1.5 ## 357 1 1.6 ## 358 1 1.5 ## 359 1 1.3 ## 360 1 1.2 ## 361 1 1.1 ## 362 1 0.7 ## 363 1 0.8 ## 364 1 0.7 ## 365 1 0.9 ## 366 1 0.9 ## 367 1 0.9 ## 368 1 0.5 ## 369 1 1.0 ## 370 1 0.6 ## 371 1 1.4 ## 372 1 1.3 ## 373 1 1.4 ## 374 1 0.9 ## 375 1 0.5 ## 376 1 0.9 ## 377 1 1.1 ## 378 1 0.8 ## 379 1 1.3 ## 380 1 0.8 ## 381 1 0.8 ## 382 1 0.5 ## 383 1 1.0 ## 384 1 0.9 ## 385 1 1.1 ## 386 1 0.9 ## 387 1 0.5 ## 388 1 0.5 ## 389 1 0.6 ## 390 1 1.0 ## 391 1 0.8 ## 392 1 1.0 ## 393 1 0.9 ## 394 1 1.0 ## 395 1 0.9 ## 396 1 0.9 ## 397 1 0.8 ## 398 1 0.5 ## 399 1 0.6 ## 400 1 0.9 ## 401 1 0.4 ## 402 1 0.6 ## 403 1 1.0 ## 404 1 1.1 ## 405 1 0.6 ## 406 1 1.2 ## 407 1 0.6 ## 408 1 0.5 ## 409 1 1.1 ## 410 1 0.7 ## 411 1 0.4 ## 412 1 0.4 ## 413 1 1.2 ## 414 1 1.4 ## 415 1 0.4 ## 416 1 0.7 ## 417 1 1.4 ## 418 1 1.2 ## 419 1 1.0 ## 420 1 1.1 ## 421 1 0.4 ## 422 1 0.8 ## 423 1 1.6 ## 424 1 1.1 ## 425 1 1.4 ## 426 1 0.8 ## 427 1 0.8 ## 428 1 0.9 ## 429 1 1.3 ## 430 1 1.0 ## 431 1 1.0 ## 432 1 0.9 ## 433 1 0.7 ## 434 1 1.0 ## 435 1 0.7 ## 436 1 0.9 ## 437 1 0.7 ## 438 1 0.7 ## 439 1 1.1 ## 440 1 0.8 ## 441 1 1.3 ## 442 1 1.3 ## 443 1 1.2 ## 444 1 1.0 ## 445 1 0.9 ## 446 1 0.9 ## 447 1 1.2 ## 448 1 1.2 ## 449 1 1.2 ## 450 1 1.1 ## 451 1 1.3 ## 452 1 1.1 ## 453 1 1.6 ## 454 1 1.3 ## 455 1 1.0 ## 456 1 1.3 ## 457 1 1.3 ## 458 1 1.1 ## 459 1 1.3 ## 460 1 1.1 ## 461 1 1.5 ## 462 1 1.4 ## 463 1 1.0 ## 464 1 1.3 ## 465 1 1.0 ## 466 1 1.1 ## 467 1 1.5 ## 468 1 0.9 ## 469 1 1.3 ## 470 1 0.5 ## 471 1 1.1 ## 472 1 1.3 ## 473 1 1.6 ## 474 1 0.9 ## 475 1 0.6 ## 476 1 0.6 ## 477 1 0.8 ## 478 1 0.5 ## 479 1 0.8 ## 480 1 1.5 ## 481 1 0.5 ## 482 1 2.1 ## 483 1 1.4 ## 484 1 0.8 ## 485 1 0.8 ## 486 1 1.1 ## 487 1 1.2 ## 488 1 1.3 ## 489 1 0.8 ## 490 1 1.0 ## 491 1 1.2 ## 492 1 1.3 ## 493 1 1.2 ## 494 1 0.9 ## 495 1 1.2 ## 496 1 1.5 ## 497 1 1.0 ## 498 1 1.3 ## 499 1 0.9 ## 500 1 1.0 ## 501 1 0.8 ## 502 1 1.0 ## 503 1 1.1 ## 504 1 0.9 ## 505 1 0.8 ## 506 1 0.9 ## 507 1 1.0 ## 508 1 1.1 ## 509 1 0.8 ## 510 1 1.0 ## 511 1 1.1 ## 512 1 0.8 ## 513 1 1.0 ## 514 1 0.9 ## 515 1 1.1 ## 516 1 0.9 ## 517 1 1.3 ## 518 1 1.3 ## 519 1 0.9 ## 520 1 0.9 ## 521 1 1.1 ## 522 1 1.0 ## 523 1 1.0 ## 524 1 1.0 ## 525 1 1.0 ## 526 1 1.3 ## 527 1 1.1 ## 528 1 1.0 ## 529 1 1.1 ## 530 1 1.4 ## 531 1 1.1 ## 532 1 0.9 ## 533 1 0.8 ## 534 1 1.6 ## 535 1 1.6 ## 536 1 1.4 ## 537 1 1.6 ## 538 1 1.0 ## 539 1 0.9 ## 540 1 1.1 ## 541 1 1.3 ## 542 1 1.6 ## 543 1 1.8 ## 544 1 1.4 ## 545 1 1.2 ## 546 1 1.3 ## 547 1 1.3 ## 548 1 1.3 ## 549 1 1.1 ## 550 1 1.2 ## 551 1 1.1 ## 552 1 1.4 ## 553 1 1.2 ## 554 1 1.3 ## 555 1 1.3 ## 556 1 1.1 ## 557 1 1.1 ## 558 1 1.3 ## 559 1 1.3 ## 560 1 0.8 ## 561 1 1.0 ## 562 1 1.2 ## 563 1 1.2 ## 564 1 1.2 ## 565 1 1.0 ## 566 1 0.7 ## 567 1 0.9 ## 568 1 1.3 ## 569 1 1.3 ## 570 1 1.5 ## 571 1 0.8 ## 572 1 1.4 ## 573 1 0.7 ## 574 1 1.2 ## 575 1 0.8 ## 576 1 1.1 ## 577 1 0.6 ## 578 1 1.9 ## 579 1 1.7 ## 580 1 1.9 ## 581 1 1.4 ## 582 1 1.6 ## 583 1 1.4 ## 584 1 1.5 ## 585 1 1.7 ## 586 1 1.9 ## 587 1 1.5 ## 588 1 1.5 ## 589 1 1.9 ## 590 1 2.0 ## 591 1 1.6 ## 592 1 1.5 ## 593 1 1.8 ## 594 1 1.7 ## 595 1 1.3 ## 596 1 1.4 ## 597 1 1.1 ## 598 1 1.2 ## 599 1 1.5 ## 600 1 1.5 ## 601 1 1.2 ## 602 1 1.4 ## 603 1 1.5 ## 604 1 1.8 ## 605 1 1.2 ## 606 1 1.2 ## 607 1 1.0 ## 608 1 1.3 ## 609 1 1.2 ## 610 1 1.3 ## 611 1 1.5 ## 612 1 1.4 ## 613 1 0.8 ## 614 1 1.4 ## 615 1 1.2 ## 616 1 1.3 ## 617 1 1.5 ## 618 1 1.5 ## 619 1 1.6 ## 620 1 1.1 ## 621 1 1.1 ## 622 1 1.2 ## 623 1 1.6 ## 624 1 1.2 ## 625 1 0.7 ## 626 1 0.7 ## log(median_house_price_2014) ## 1 12.66033 ## 2 12.72842 ## 3 12.79698 ## 4 12.91158 ## 5 12.98310 ## 6 13.08154 ## 7 12.64433 ## 8 12.89111 ## 9 12.88847 ## 10 12.88753 ## 11 12.89922 ## 12 13.01589 ## 13 12.74183 ## 14 13.08154 ## 15 13.00261 ## 16 13.21767 ## 17 12.83468 ## 18 12.74840 ## 19 12.79663 ## 20 12.40185 ## 21 12.73670 ## 22 12.67608 ## 23 12.88029 ## 24 12.46844 ## 25 12.37159 ## 26 12.35017 ## 27 12.36734 ## 28 12.41410 ## 29 12.76569 ## 30 12.40901 ## 31 12.42922 ## 32 12.30138 ## 33 12.67608 ## 34 12.26904 ## 35 12.75708 ## 36 12.42922 ## 37 12.42922 ## 38 12.57677 ## 39 12.38839 ## 40 12.42922 ## 41 13.00583 ## 42 12.99737 ## 43 12.76569 ## 44 12.89922 ## 45 12.50599 ## 46 13.07107 ## 47 12.64029 ## 48 12.95181 ## 49 12.88664 ## 50 13.05622 ## 51 12.69772 ## 52 13.08154 ## 53 13.09190 ## 54 12.42922 ## 55 12.67608 ## 56 12.66033 ## 57 12.59623 ## 58 12.88664 ## 59 12.42922 ## 60 12.73670 ## 61 12.42922 ## 62 12.39669 ## 63 12.34148 ## 64 12.42922 ## 65 12.33050 ## 66 12.80765 ## 67 12.54254 ## 68 12.42118 ## 69 12.75275 ## 70 12.82126 ## 71 13.55739 ## 72 12.32386 ## 73 12.42922 ## 74 12.50618 ## 75 12.42902 ## 76 12.50618 ## 77 12.75996 ## 78 12.83468 ## 79 12.61487 ## 80 12.42902 ## 81 13.38473 ## 82 13.35980 ## 83 12.45877 ## 84 12.40082 ## 85 12.32878 ## 86 12.48749 ## 87 12.42521 ## 88 12.75130 ## 89 13.32938 ## 90 12.87518 ## 91 12.42922 ## 92 12.92086 ## 93 13.32530 ## 94 12.56024 ## 95 12.61154 ## 96 12.86424 ## 97 13.12236 ## 98 12.63460 ## 99 12.81448 ## 100 13.19189 ## 101 13.03892 ## 102 12.99453 ## 103 13.56705 ## 104 13.25339 ## 105 13.15966 ## 106 12.94801 ## 107 12.38839 ## 108 12.39669 ## 109 12.42922 ## 110 12.24289 ## 111 12.32386 ## 112 12.42922 ## 113 12.59473 ## 114 12.59980 ## 115 12.51539 ## 116 12.80765 ## 117 12.54344 ## 118 12.42922 ## 119 12.67608 ## 120 12.42922 ## 121 12.28765 ## 122 12.34148 ## 123 12.52453 ## 124 12.25009 ## 125 12.64433 ## 126 12.42920 ## 127 12.32386 ## 128 12.46458 ## 129 12.51997 ## 130 12.76555 ## 131 12.64755 ## 132 13.16351 ## 133 12.72189 ## 134 13.06049 ## 135 12.62807 ## 136 12.82799 ## 137 13.12236 ## 138 12.93241 ## 139 12.54254 ## 140 12.42922 ## 141 12.52453 ## 142 12.54254 ## 143 12.42922 ## 144 12.42922 ## 145 12.89922 ## 146 12.77987 ## 147 12.74549 ## 148 12.89922 ## 149 13.16158 ## 150 12.51356 ## 151 12.96571 ## 152 12.50228 ## 153 12.85840 ## 154 13.22672 ## 155 12.90545 ## 156 12.84793 ## 157 12.57764 ## 158 12.80353 ## 159 13.12236 ## 160 12.68386 ## 161 12.98189 ## 162 12.64433 ## 163 12.98310 ## 164 12.84793 ## 165 12.87390 ## 166 12.78689 ## 167 13.06049 ## 168 12.42922 ## 169 12.76569 ## 170 12.42902 ## 171 12.58613 ## 172 12.71590 ## 173 12.48276 ## 174 12.42902 ## 175 12.42902 ## 176 13.12236 ## 177 12.62971 ## 178 12.92269 ## 179 13.42616 ## 180 13.04979 ## 181 13.00500 ## 182 12.68386 ## 183 12.99453 ## 184 13.11231 ## 185 12.63134 ## 186 13.01700 ## 187 12.81039 ## 188 12.87377 ## 189 12.94663 ## 190 12.75492 ## 191 13.22717 ## 192 12.61984 ## 193 13.13725 ## 194 13.62314 ## 195 13.17685 ## 196 12.98883 ## 197 13.02805 ## 198 13.16158 ## 199 12.89232 ## 200 13.34990 ## 201 12.81039 ## 202 12.82126 ## 203 12.72189 ## 204 12.98310 ## 205 12.81584 ## 206 12.42922 ## 207 12.76569 ## 208 12.86100 ## 209 12.83468 ## 210 12.73670 ## 211 12.75383 ## 212 12.77987 ## 213 13.14461 ## 214 12.79108 ## 215 13.33747 ## 216 12.94801 ## 217 12.94084 ## 218 12.98310 ## 219 13.11730 ## 220 12.97154 ## 221 13.45883 ## 222 12.88664 ## 223 12.76569 ## 224 12.93059 ## 225 12.97734 ## 226 13.28788 ## 227 13.32121 ## 228 12.87742 ## 229 13.11231 ## 230 12.76569 ## 231 13.27937 ## 232 13.65299 ## 233 12.88939 ## 234 13.25777 ## 235 12.95039 ## 236 12.64433 ## 237 12.75564 ## 238 12.91780 ## 239 12.78339 ## 240 12.56024 ## 241 12.84793 ## 242 12.66033 ## 243 12.66033 ## 244 12.57762 ## 245 12.57080 ## 246 13.27078 ## 247 13.12236 ## 248 12.95229 ## 249 12.93603 ## 250 12.99907 ## 251 12.48749 ## 252 12.79386 ## 253 12.39876 ## 254 12.42118 ## 255 12.86100 ## 256 12.76569 ## 257 12.73670 ## 258 12.77987 ## 259 12.50618 ## 260 12.71440 ## 261 13.02805 ## 262 12.82126 ## 263 12.57764 ## 264 12.70685 ## 265 12.39669 ## 266 12.42922 ## 267 12.90545 ## 268 12.66033 ## 269 12.58709 ## 270 12.69158 ## 271 12.57332 ## 272 12.50618 ## 273 12.84529 ## 274 12.49219 ## 275 13.01700 ## 276 12.66191 ## 277 12.96571 ## 278 12.46863 ## 279 12.75130 ## 280 12.80216 ## 281 12.49687 ## 282 12.42521 ## 283 12.32383 ## 284 12.15478 ## 285 12.42922 ## 286 12.42922 ## 287 12.54254 ## 288 12.56024 ## 289 12.54254 ## 290 12.66033 ## 291 12.35234 ## 292 12.22831 ## 293 12.10625 ## 294 12.09793 ## 295 12.15478 ## 296 12.54254 ## 297 12.46650 ## 298 12.52453 ## 299 12.49031 ## 300 12.52453 ## 301 12.54254 ## 302 12.66033 ## 303 12.42922 ## 304 12.42922 ## 305 12.41714 ## 306 12.45877 ## 307 12.68850 ## 308 12.98310 ## 309 13.06473 ## 310 12.83468 ## 311 12.42922 ## 312 12.77564 ## 313 12.25486 ## 314 12.42118 ## 315 12.79386 ## 316 12.42922 ## 317 12.42118 ## 318 12.42922 ## 319 12.67606 ## 320 13.12236 ## 321 12.75852 ## 322 12.46844 ## 323 12.79441 ## 324 12.76569 ## 325 12.48749 ## 326 12.42922 ## 327 12.28880 ## 328 12.44902 ## 329 12.71590 ## 330 12.69158 ## 331 12.56024 ## 332 12.70685 ## 333 12.71440 ## 334 12.55409 ## 335 12.68850 ## 336 12.63786 ## 337 12.90172 ## 338 12.77032 ## 339 12.79386 ## 340 12.86747 ## 341 12.73670 ## 342 12.57331 ## 343 12.69465 ## 344 12.72189 ## 345 12.64433 ## 346 12.56549 ## 347 12.75130 ## 348 13.03898 ## 349 12.81448 ## 350 12.66033 ## 351 12.61984 ## 352 12.64433 ## 353 12.63460 ## 354 12.66033 ## 355 12.73670 ## 356 12.42921 ## 357 12.17045 ## 358 12.36734 ## 359 12.62807 ## 360 12.32386 ## 361 12.59134 ## 362 12.79772 ## 363 12.87390 ## 364 12.73670 ## 365 12.81787 ## 366 12.73522 ## 367 12.42922 ## 368 13.12186 ## 369 12.94800 ## 370 12.83734 ## 371 12.86359 ## 372 12.42118 ## 373 12.40287 ## 374 12.57764 ## 375 12.87005 ## 376 12.73080 ## 377 12.42922 ## 378 12.50618 ## 379 12.38839 ## 380 12.66981 ## 381 12.61320 ## 382 12.75852 ## 383 12.45877 ## 384 12.41309 ## 385 12.51356 ## 386 12.57418 ## 387 13.30460 ## 388 13.12226 ## 389 13.02805 ## 390 12.84924 ## 391 13.03621 ## 392 13.12236 ## 393 13.34651 ## 394 13.35348 ## 395 13.80040 ## 396 13.52315 ## 397 12.72189 ## 398 13.08154 ## 399 13.01700 ## 400 12.94801 ## 401 13.22762 ## 402 13.30468 ## 403 13.39239 ## 404 14.12483 ## 405 13.02805 ## 406 12.40901 ## 407 14.24078 ## 408 13.50422 ## 409 12.67608 ## 410 13.07107 ## 411 13.12136 ## 412 13.24458 ## 413 12.54254 ## 414 12.56024 ## 415 13.16638 ## 416 13.08674 ## 417 12.42922 ## 418 12.57072 ## 419 12.86876 ## 420 12.59473 ## 421 13.24237 ## 422 13.11635 ## 423 12.54254 ## 424 12.76569 ## 425 12.83455 ## 426 13.45884 ## 427 13.24988 ## 428 12.88664 ## 429 13.11795 ## 430 13.18815 ## 431 12.99453 ## 432 12.99567 ## 433 13.15241 ## 434 13.20117 ## 435 13.29632 ## 436 12.92391 ## 437 13.11534 ## 438 13.29632 ## 439 13.12236 ## 440 13.58610 ## 441 12.89546 ## 442 13.18063 ## 443 13.35348 ## 444 13.45884 ## 445 13.76422 ## 446 13.52114 ## 447 13.62647 ## 448 14.10069 ## 449 13.59860 ## 450 13.46453 ## 451 13.51609 ## 452 13.33465 ## 453 13.12236 ## 454 12.96571 ## 455 12.99453 ## 456 13.03462 ## 457 13.44445 ## 458 13.57503 ## 459 13.23211 ## 460 13.25777 ## 461 13.86430 ## 462 14.13396 ## 463 14.11042 ## 464 13.18778 ## 465 13.81050 ## 466 13.91082 ## 467 14.50615 ## 468 14.48334 ## 469 14.07402 ## 470 13.93551 ## 471 13.56191 ## 472 13.74830 ## 473 13.37312 ## 474 13.57121 ## 475 14.09692 ## 476 14.37227 ## 477 14.27767 ## 478 14.15198 ## 479 14.04860 ## 480 13.70458 ## 481 15.06827 ## 482 13.65299 ## 483 13.91082 ## 484 13.64116 ## 485 14.21261 ## 486 13.12226 ## 487 13.79019 ## 488 13.75629 ## 489 13.52783 ## 490 13.90169 ## 491 13.20854 ## 492 13.65299 ## 493 13.66148 ## 494 13.48095 ## 495 13.12231 ## 496 13.67625 ## 497 13.55803 ## 498 12.99453 ## 499 13.51508 ## 500 13.38473 ## 501 13.05622 ## 502 13.23569 ## 503 13.43717 ## 504 13.04979 ## 505 13.60910 ## 506 13.23569 ## 507 13.34551 ## 508 13.26213 ## 509 13.76947 ## 510 13.30468 ## 511 13.98946 ## 512 13.35363 ## 513 13.34150 ## 514 13.65299 ## 515 13.21276 ## 516 13.30468 ## 517 12.94801 ## 518 12.84793 ## 519 12.82126 ## 520 13.02365 ## 521 12.83468 ## 522 12.78689 ## 523 12.86100 ## 524 12.85579 ## 525 12.80285 ## 526 12.69158 ## 527 12.58793 ## 528 12.61984 ## 529 12.93603 ## 530 12.69158 ## 531 13.10012 ## 532 13.12235 ## 533 13.14217 ## 534 13.50422 ## 535 13.01143 ## 536 13.38473 ## 537 12.91164 ## 538 13.41129 ## 539 13.12236 ## 540 13.04979 ## 541 13.36922 ## 542 13.41129 ## 543 13.21767 ## 544 13.48004 ## 545 13.11362 ## 546 13.02144 ## 547 12.92391 ## 548 13.01143 ## 549 13.17115 ## 550 13.02254 ## 551 12.99453 ## 552 13.08154 ## 553 13.04979 ## 554 12.73670 ## 555 13.09190 ## 556 13.08803 ## 557 12.97849 ## 558 12.83468 ## 559 12.73670 ## 560 12.83468 ## 561 12.85579 ## 562 13.07107 ## 563 13.06314 ## 564 13.01700 ## 565 12.93603 ## 566 13.12226 ## 567 12.94801 ## 568 12.56024 ## 569 13.50422 ## 570 12.97154 ## 571 13.04979 ## 572 12.71394 ## 573 13.24237 ## 574 13.07632 ## 575 13.61706 ## 576 12.94563 ## 577 13.34551 ## 578 12.76569 ## 579 12.75130 ## 580 12.82126 ## 581 12.82799 ## 582 12.69619 ## 583 12.76569 ## 584 12.43520 ## 585 12.49500 ## 586 12.69158 ## 587 12.43917 ## 588 12.62314 ## 589 12.42521 ## 590 12.36094 ## 591 12.38839 ## 592 12.54254 ## 593 12.54254 ## 594 12.42922 ## 595 12.42922 ## 596 12.51906 ## 597 12.42922 ## 598 12.48333 ## 599 12.42922 ## 600 12.42922 ## 601 12.42922 ## 602 12.46844 ## 603 12.42920 ## 604 12.42922 ## 605 12.65396 ## 606 12.42911 ## 607 12.34583 ## 608 12.20607 ## 609 12.29683 ## 610 12.23320 ## 611 12.21850 ## 612 12.06105 ## 613 12.65316 ## 614 12.30138 ## 615 12.23077 ## 616 12.26434 ## 617 12.25486 ## 618 12.27839 ## 619 12.27839 ## 620 12.27839 ## 621 12.36734 ## 622 12.38839 ## 623 12.39048 ## 624 12.26905 ## 625 13.54763 ## 626 13.54763 ## attr(,&quot;assign&quot;) ## [1] 0 1 2 ## ## $fitted.values ## 1 2 3 4 5 6 7 8 ## 333.0360 338.1337 347.1743 352.2455 343.1466 337.5510 333.1411 344.1024 ## 9 10 11 12 13 14 15 16 ## 340.7961 347.6766 345.1410 346.2779 313.6328 346.1950 349.4797 351.8737 ## 17 18 19 20 21 22 23 24 ## 331.9402 338.6404 339.2962 305.9128 324.0797 331.4013 336.7198 314.5142 ## 25 26 27 28 29 30 31 32 ## 306.0416 301.3155 309.3048 312.6783 325.4449 283.9564 316.8307 289.2831 ## 33 34 35 36 37 38 39 40 ## 326.9119 301.0729 324.8058 313.4859 309.5417 315.2556 312.8760 309.2461 ## 41 42 43 44 45 46 47 48 ## 324.3998 342.9336 335.9228 336.9243 324.1371 357.5199 337.8059 352.9672 ## 49 50 51 52 53 54 55 56 ## 340.7412 357.3638 342.8084 346.7951 343.8476 310.1106 323.4762 331.1747 ## 57 58 59 60 61 62 63 64 ## 326.1567 341.5173 298.4344 327.6913 313.2277 298.3536 307.8757 306.2248 ## 65 66 67 68 69 70 71 72 ## 312.2430 325.5820 319.0448 324.5404 332.3160 329.9811 353.6785 311.5273 ## 73 74 75 76 77 78 79 80 ## 320.3884 314.4084 313.7677 317.8137 317.0730 326.4820 318.9375 320.5016 ## 81 82 83 84 85 86 87 88 ## 350.6250 336.1177 321.3616 320.0378 319.4080 335.8822 324.8182 332.2968 ## 89 90 91 92 93 94 95 96 ## 360.4584 320.1626 320.6481 331.4991 353.1953 332.6013 326.6152 333.3954 ## 97 98 99 100 101 102 103 104 ## 340.0317 337.1787 336.6951 331.0132 339.0092 331.1995 338.6587 334.4333 ## 105 106 107 108 109 110 111 112 ## 334.1071 352.2817 330.7192 323.8236 321.2531 322.4546 329.9760 320.3291 ## 113 114 115 116 117 118 119 120 ## 337.4347 344.0257 336.3426 347.1718 340.2044 327.9214 341.6528 309.4803 ## 121 122 123 124 125 126 127 128 ## 307.6997 300.5825 340.2670 311.1634 326.2433 302.0060 304.2635 320.2612 ## 129 130 131 132 133 134 135 136 ## 314.5840 338.8405 337.9503 358.6249 342.8472 342.2770 339.5207 346.9220 ## 137 138 139 140 141 142 143 144 ## 354.5704 344.9369 314.2860 317.5639 329.3638 318.7522 320.1194 317.0567 ## 145 146 147 148 149 150 151 152 ## 351.7687 335.6830 335.8723 337.0059 359.2570 325.7939 350.1419 328.9406 ## 153 154 155 156 157 158 159 160 ## 322.2683 333.5526 340.9197 336.9431 329.6026 339.9688 339.4696 341.4827 ## 161 162 163 164 165 166 167 168 ## 342.4980 319.2840 346.0615 339.9352 344.4718 339.4124 343.1931 323.7567 ## 169 170 171 172 173 174 175 176 ## 324.9607 306.7293 319.2884 327.9308 332.2539 324.3432 317.3382 329.6836 ## 177 178 179 180 181 182 183 184 ## 312.0025 322.9888 340.4850 328.7579 331.6141 323.8671 339.2958 332.8160 ## 185 186 187 188 189 190 191 192 ## 319.6409 324.7498 336.6689 325.8181 344.7790 332.0351 334.4604 316.2136 ## 193 194 195 196 197 198 199 200 ## 330.0025 350.9284 341.1310 338.7978 331.3074 326.4245 333.8053 346.8712 ## 201 202 203 204 205 206 207 208 ## 336.7659 336.3439 332.3953 338.6412 343.1631 316.8062 328.3442 340.4712 ## 209 210 211 212 213 214 215 216 ## 326.1087 317.0734 316.9970 321.7373 329.4245 322.1666 336.0355 326.8764 ## 217 218 219 220 221 222 223 224 ## 323.4649 319.8302 337.0450 326.9251 341.2011 323.0666 320.9804 320.0438 ## 225 226 227 228 229 230 231 232 ## 328.1044 331.5883 335.5069 329.6389 336.8677 329.0976 313.6168 361.1393 ## 233 234 235 236 237 238 239 240 ## 333.7512 330.8701 338.6658 323.1066 317.5396 327.1315 328.4464 325.6489 ## 241 242 243 244 245 246 247 248 ## 318.9845 319.6758 313.2754 315.8194 311.3015 317.6970 318.2380 330.8395 ## 249 250 251 252 253 254 255 256 ## 316.1758 327.0114 307.7318 336.1056 305.8150 309.6582 314.9880 314.0233 ## 257 258 259 260 261 262 263 264 ## 324.2632 324.7720 321.5934 327.2603 331.8266 321.6689 316.0753 312.9956 ## 265 266 267 268 269 270 271 272 ## 316.6184 306.7379 329.9598 312.6915 297.8884 334.6172 319.2211 325.2662 ## 273 274 275 276 277 278 279 280 ## 315.2854 299.4490 317.9614 305.2957 324.0411 303.0939 339.2428 314.2125 ## 281 282 283 284 285 286 287 288 ## 313.9964 306.1498 293.9821 313.8056 316.7414 335.5020 332.7887 325.7158 ## 289 290 291 292 293 294 295 296 ## 336.3894 345.3495 315.2671 306.9691 312.9129 320.0657 320.7634 333.0578 ## 297 298 299 300 301 302 303 304 ## 328.4230 336.4672 325.1388 332.5296 336.5626 345.5902 327.5881 331.5258 ## 305 306 307 308 309 310 311 312 ## 323.8442 331.8777 312.8541 341.9858 336.0321 332.8356 288.6278 328.7112 ## 313 314 315 316 317 318 319 320 ## 281.7001 280.4821 332.6332 306.5230 301.9341 298.3910 324.0604 337.3876 ## 321 322 323 324 325 326 327 328 ## 335.8259 285.2580 332.5792 338.8937 307.5396 287.5456 277.9842 306.4131 ## 329 330 331 332 333 334 335 336 ## 321.4822 324.2008 311.6951 327.5666 309.4661 308.3245 315.8745 315.4697 ## 337 338 339 340 341 342 343 344 ## 326.9179 328.0319 325.5311 329.8720 332.0546 326.1838 309.2821 316.8756 ## 345 346 347 348 349 350 351 352 ## 323.3725 318.5664 328.3789 333.2382 314.5389 334.8380 323.5466 326.4650 ## 353 354 355 356 357 358 359 360 ## 320.2287 335.0525 331.2950 305.8971 299.3872 305.2264 315.6882 315.8331 ## 361 362 363 364 365 366 367 368 ## 322.2106 339.8342 336.9552 338.8493 332.6573 331.8771 327.6317 351.1531 ## 369 370 371 372 373 374 375 376 ## 331.6055 343.4777 315.1278 313.3923 309.5145 329.3416 347.4797 331.5659 ## 377 378 379 380 381 382 383 384 ## 320.5359 332.6409 312.7622 334.3623 333.6218 347.2359 324.7260 327.2323 ## 385 386 387 388 389 390 391 392 ## 321.8775 330.3155 353.8146 351.0080 346.4884 329.6259 338.7581 334.2585 ## 393 394 395 396 397 398 399 400 ## 339.9373 336.0465 345.2773 342.7291 334.7138 350.4404 346.5737 334.2938 ## 401 402 403 404 405 406 407 408 ## 356.5582 350.5516 336.3421 342.3982 346.2011 317.6794 361.6407 356.3347 ## 409 410 411 412 413 414 415 416 ## 323.6344 344.0332 354.9839 356.7690 318.6061 311.5079 355.3747 343.8103 ## 417 418 419 420 421 422 423 424 ## 309.8077 318.5431 329.8713 322.4983 356.1378 340.3341 303.4602 325.2259 ## 425 426 427 428 429 430 431 432 ## 315.3650 344.8107 341.6257 333.4643 321.5740 333.8831 331.2025 335.7076 ## 433 434 435 436 437 438 439 440 ## 344.0018 333.8066 345.8737 333.9318 344.4094 345.8058 330.3125 346.6851 ## 441 442 443 444 445 446 447 448 ## 319.0640 322.9495 329.8903 336.9648 345.0266 341.1026 332.1507 338.3964 ## 449 450 451 452 453 454 455 456 ## 332.0957 333.1819 327.4823 332.4786 311.6547 319.6297 332.0177 321.6164 ## 457 458 459 460 461 462 463 464 ## 325.6009 335.3295 323.0457 330.6265 324.0533 331.3355 345.8199 323.8729 ## 465 466 467 468 469 470 471 472 ## 341.4611 339.7300 332.6903 353.6184 334.2884 361.0832 334.9452 330.1503 ## 473 474 475 476 477 478 479 480 ## 313.6390 342.3431 359.9481 363.0246 354.3534 364.5744 352.8990 322.0692 ## 481 482 483 484 485 486 487 488 ## 377.5401 300.2864 328.2854 346.8673 354.1594 329.4353 334.5673 331.0787 ## 489 490 491 492 493 494 495 496 ## 345.0330 342.6242 326.0645 328.6749 332.4094 341.1799 326.0878 322.2382 ## 497 498 499 500 501 502 503 504 ## 338.7807 320.0156 341.9065 336.4225 339.4596 334.5604 333.7778 335.7540 ## 505 506 507 508 509 510 511 512 ## 346.8746 338.0573 335.8383 330.6547 348.4793 335.0651 340.4144 343.7323 ## 513 514 515 516 517 518 519 520 ## 336.1038 343.3936 329.9973 339.0075 319.6525 318.8997 332.5728 335.7142 ## 521 522 523 524 525 526 527 528 ## 326.2911 328.8400 329.4530 329.9093 328.9978 316.9801 322.6163 326.8991 ## 529 530 531 532 533 534 535 536 ## 327.0444 313.1062 329.4784 336.6739 339.9365 316.4783 310.1796 322.1190 ## 537 538 539 540 541 542 543 544 ## 308.9316 336.9648 336.3535 328.2332 325.5651 314.9573 305.0212 322.7499 ## 545 546 547 548 549 550 551 552 ## 325.6636 320.8880 319.9348 320.5619 329.7805 325.4264 327.8086 318.2711 ## 553 554 555 556 557 558 559 560 ## 325.1531 317.0112 322.0812 328.7394 327.6404 318.8440 317.3026 336.6821 ## 561 562 563 564 565 566 567 568 ## 329.6429 324.5463 325.0003 323.8956 330.9478 343.6548 334.4735 315.1122 ## 569 570 571 572 573 574 575 576 ## 327.4392 313.8254 339.5310 313.4866 345.1684 325.2337 346.3530 327.3046 ## 577 578 579 580 581 582 583 584 ## 350.7272 296.0089 302.7421 296.0679 315.0748 305.6155 314.2335 306.2143 ## 585 586 587 588 589 590 591 592 ## 299.7172 294.6848 305.9795 308.8465 292.1543 287.4621 302.5530 308.9385 ## 593 594 595 596 597 598 599 600 ## 296.9604 298.6395 313.6588 310.6537 320.3780 317.7373 306.4670 305.9121 ## 601 602 603 604 605 606 607 608 ## 316.7692 310.3249 306.1902 295.3206 319.6204 317.0824 323.5762 310.5837 ## 609 610 611 612 613 614 615 616 ## 315.8596 311.1633 303.2258 305.1849 334.3450 308.1751 314.2292 311.3264 ## 617 618 619 620 621 622 623 624 ## 304.0111 304.4895 300.3575 318.7173 319.8384 316.5101 302.0907 314.6875 ## 625 626 ## 350.9452 350.9452 ## ## $se.fit ## NULL ## ## $similar ## [1] FALSE ## ## $ase ## [1] TRUE ## ## $rho.se ## [1] 0.007592944 ## ## $LMtest ## [,1] ## [1,] 131.8225 ## ## $resvar ## sigma rho ## sigma 1.838046e+02 -2.414780e-05 ## rho -2.414780e-05 5.765279e-05 ## (Intercept) -5.007196e-03 1.195467e-02 ## unauthorised_absence_in_all_schools_percent_2013 -6.810427e-05 1.625987e-04 ## log(median_house_price_2014) 1.009315e-03 -2.409736e-03 ## (Intercept) ## sigma -0.005007196 ## rho 0.011954667 ## (Intercept) 403.956769762 ## unauthorised_absence_in_all_schools_percent_2013 -15.273779984 ## log(median_house_price_2014) -30.388363907 ## unauthorised_absence_in_all_schools_percent_2013 ## sigma -6.810427e-05 ## rho 1.625987e-04 ## (Intercept) -1.527378e+01 ## unauthorised_absence_in_all_schools_percent_2013 3.661850e+00 ## log(median_house_price_2014) 8.778507e-01 ## log(median_house_price_2014) ## sigma 0.001009315 ## rho -0.002409736 ## (Intercept) -30.388363907 ## unauthorised_absence_in_all_schools_percent_2013 0.877850651 ## log(median_house_price_2014) 2.349262523 ## ## $zero.policy ## [1] FALSE ## ## $aliased ## (Intercept) ## FALSE ## unauthorised_absence_in_all_schools_percent_2013 ## FALSE ## log(median_house_price_2014) ## FALSE ## ## $listw_style ## [1] &quot;C&quot; ## ## $interval ## [1] -1.5332828 0.8341298 ## ## $fdHess ## [1] FALSE ## ## $optimHess ## [1] FALSE ## ## $insert ## [1] FALSE ## ## $trs ## NULL ## ## $LLNullLlm ## &#39;log Lik.&#39; -2810.398 (df=2) ## ## $timings ## user.self elapsed ## set_up 0.02 0.01 ## eigen_set_up 0.14 0.14 ## eigen_opt 0.00 0.00 ## coefs 0.00 0.00 ## eigen_se 1.33 1.36 ## ## $f_calls ## [1] 14 ## ## $hf_calls ## [1] 0 ## ## $intern_classic ## NULL ## ## $Wald1 ## ## Wald diagnostics for spatial dependence ## ## data: ## Wald statistic = 0.46126, df = 1, p-value = 0.497 ## sample estimates: ## rho ## 0.00515683 ## ## ## $LR1 ## ## Likelihood Ratio diagnostics for spatial dependence ## ## data: ## Likelihood ratio = 0.46178, df = 1, p-value = 0.4968 ## sample estimates: ## Log likelihood of spatial lag model Log likelihood of OLS fit y ## -2603.509 -2603.740 ## ## ## $coeftitle ## [1] &quot;(asymptotic standard errors)&quot; ## ## $Coef ## Estimate Std. Error ## (Intercept) 202.34273 20.098676 ## unauthorised_absence_in_all_schools_percent_2013 -36.17560 1.913596 ## log(median_house_price_2014) 12.58783 1.532730 ## z value Pr(&gt;|z|) ## (Intercept) 10.067466 0.000000e+00 ## unauthorised_absence_in_all_schools_percent_2013 -18.904511 0.000000e+00 ## log(median_house_price_2014) 8.212684 2.220446e-16 ## ## attr(,&quot;class&quot;) ## [1] &quot;summary.Sarlm&quot; &quot;Sarlm&quot; #for some reason this will show in RStudio #but not the bookdown (this practical) output. We can use the R2, Root Mean Square Error and Mean Absolute Error. \\(R^2\\) is the variation of y explained by x Mean Absolute Error measures the average magnitude of the errors (distance of points from the regression line) using: \\[MAE = {\\frac{1}{n}\\Sigma_{i=1}^{n}{\\Big({d_i -f_i\\Big)}}}\\] Root Mean Square Error (RMSE) is the standard deviation of the resuiduals, this means how far away the points are from the regression line… \\[RMSE= \\sqrt{\\frac{1}{n}\\Sigma_{i=1}^{n}{\\Big({d_i -f_i}\\Big)^2}}\\] Where \\(d_i\\) is the actual value, \\(d_f\\) is the predicted value, and \\(n\\) is the number of data points We could also just run a correlation between the data we left out and the predicted data to assess the accuracy… actuals_preds &lt;- data.frame(cbind(actuals=test$Wardcount, predicteds=predictions)) actuals_preds_correlation &lt;- actuals_preds %&gt;% correlate() %&gt;% print() ## # A tibble: 2 × 3 ## term actuals predicteds ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 actuals NA 0.783 ## 2 predicteds 0.783 NA This shows us that we have a strong and significant relationship between our model output and the test data. We can also use min-max accuracy to see how close the actual and predicted values are…using the equation… \\[MinMaxAccuracy= mean\\left( \\frac{min(actuals, predicteds}{max(actuals, predicteds)} \\right)\\] min_max_accuracy &lt;- mean(apply(actuals_preds, 1, min, na.rm=TRUE) / apply(actuals_preds, 1, max, na.rm=TRUE)) min_max_accuracy ## [1] 0.6199742 This gives around a 60% accuracy…another alternative is mean absolute percentage deviation which is a statistical measure showing how accurate the prediciton was…through the equation… \\[MAPE= mean\\left( \\frac{abs(predicteds - actuals}{actuals} \\right)\\] mape &lt;- mean(abs((actuals_preds$predicteds - actuals_preds$actuals))/ actuals_preds$actuals, na.rm=TRUE) mape ## [1] Inf Here we’ve got a very high MAPE — this is most likely because of the range of values of the wards for individual boroughs… 10.6.8 Cross validation Our validation approach so far was OK, but what if the test data was a different 20% — would it still hold up? We can test this by dividing all our data into blocks and then running the analysis several times, each time selecting a different block to be the test data…this is called cross validation … To start with we’ll remove the geomtery, set up a data frame and replace any NAs with 0 — this is appropraite here as if there are no Airbnbs within the ward they would be 0. joined_CV &lt;- joined %&gt;% st_drop_geometry()%&gt;% mutate(Wardcount = replace_na(Wardcount, 0)) Now let’s change our training data… here i’ve got 5 iterations then the whole lot is repeated 3 times. Search literautre for the right number to use, i think 10 iterations with no repeats is a good place to start. library(caret) model&lt;- train(Wardcount ~ Boroughcount, joined_CV, method=&quot;lm&quot;, trControl=trainControl(method=&quot;repeatedcv&quot;, number=5, repeats=3, # change to true to # see it iterate verboseIter=FALSE)) summary(model) ## ## Call: ## lm(formula = .outcome ~ ., data = dat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -252.56 -31.20 -2.19 17.14 648.44 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -7.90792 4.85007 -1.63 0.104 ## Boroughcount 0.05430 0.00185 29.35 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 75.44 on 554 degrees of freedom ## Multiple R-squared: 0.6086, Adjusted R-squared: 0.6079 ## F-statistic: 861.3 on 1 and 554 DF, p-value: &lt; 2.2e-16 #print R2, MAE and RMSE print(model) ## Linear Regression ## ## 556 samples ## 1 predictor ## ## No pre-processing ## Resampling: Cross-Validated (5 fold, repeated 3 times) ## Summary of sample sizes: 445, 445, 445, 444, 445, 445, ... ## Resampling results: ## ## RMSE Rsquared MAE ## 74.8757 0.6252889 44.23358 ## ## Tuning parameter &#39;intercept&#39; was held constant at a value of TRUE Results show that our cross validated model accounts for around 60% of varaince of the number of Airbnbs per ward…compare this to the results from the standard linear regression… 10.7 Advanced regression 10.7.1 More data We’re going to have a look at Ridge and LASSO regression next…however, they require us to have more than 1 predictor variable, so we’ll load a few in and demonstrate how to use them in normal regression first… We’ll get our OSM data, project it, extract only hotels, join it with the boroughs, set any NAs to 0, join it with the wards, rename the new ‘freq’ coloumn to Hotel count, remove the geometry and then set any more NAs to 0… # read in OSM data OSM &lt;- st_read(here::here(&quot;prac10_data&quot;, &quot;geofabrik&quot;, &quot;gis_osm_pois_a_free_1.shp&quot;)) ## Reading layer `gis_osm_pois_a_free_1&#39; from data source ## `C:\\Users\\Andy\\OneDrive - University College London\\Teaching\\CASA0005\\2020_2021\\CASA0005repo\\prac10_data\\geofabrik\\gis_osm_pois_a_free_1.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 35273 features and 4 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -0.5108706 ymin: 51.28117 xmax: 0.322123 ymax: 51.68948 ## Geodetic CRS: WGS 84 # project and filter OSM &lt;- OSM %&gt;% st_transform(., 27700) %&gt;% filter(fclass == &quot;hotel&quot;) # join hotels with the boroughs Hotels_borough &lt;- OSM %&gt;% Joinfun(., boroughsandwardssf[[1]]) %&gt;% # rename hotels dplyr::rename(hotels = airbnbs) %&gt;% # replae NA with 0 mutate(hotels = replace_na(hotels, 0)) joined2&lt;-joined %&gt;% st_drop_geometry()%&gt;% left_join(., Hotels_borough, by= c(&quot;GSS_CODE.x&quot; = &quot;GSS_CODE&quot;))%&gt;% dplyr::select(NAME.y,GSS_CODE.x, Boroughcount, Wardcount, hotels)%&gt;% distinct()%&gt;% #replace NA in wards with 0 mutate(Wardcount = replace_na(Wardcount, 0)) 10.7.2 Multiple linear regression Re run the model including Hotel count…you simply use a + model2&lt;- train(Wardcount ~ Boroughcount+hotels, joined2, method=&quot;lm&quot;, trControl=trainControl(method=&quot;repeatedcv&quot;, number=5, repeats=3, # change to true to see it # iterate verboseIter=FALSE)) summary(model2) ## ## Call: ## lm(formula = .outcome ~ ., data = dat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -243.74 -31.14 -2.01 17.43 657.26 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -8.521466 4.969743 -1.715 0.087 . ## Boroughcount 0.055125 0.002348 23.476 &lt;2e-16 *** ## hotels -0.048900 0.085343 -0.573 0.567 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 75.49 on 553 degrees of freedom ## Multiple R-squared: 0.6088, Adjusted R-squared: 0.6074 ## F-statistic: 430.3 on 2 and 553 DF, p-value: &lt; 2.2e-16 The summary here shows that the hotel count predictor is not statistically significant so we should remove it…how about we add some population and house price data….download the excel data from here library(readxl) library(janitor) # read the excel sheet my_data &lt;- read_excel(here::here(&quot;prac10_data&quot;,&quot;ward-profiles-excel-version.xls&quot;), sheet=2, col_names=TRUE) %&gt;% # set it as a data frame as.data.frame()%&gt;% clean_names()%&gt;% # extract everything that begins with E filter(str_detect(new_code, &quot;^E&quot;)) # is our data num Datatypelist &lt;- my_data %&gt;% summarise_all(class) %&gt;% pivot_longer(everything(), names_to=&quot;All_variables&quot;, values_to=&quot;Variable_class&quot;) # make sure the variables are numeric my_data &lt;- my_data %&gt;% mutate(across(.cols = 4:67, as.numeric)) # merge the new data to the existing data joined3 &lt;-joined2 %&gt;% left_join(., my_data, by= c(&quot;GSS_CODE.x&quot; = &quot;new_code&quot;)) Now run the model again model3&lt;- train(Wardcount ~ Boroughcount+population_2015 +median_house_price_2014, joined3, method=&quot;lm&quot;, trControl=trainControl(method=&quot;repeatedcv&quot;, number=5, repeats=3, verboseIter=FALSE)) summary(model3) ## ## Call: ## lm(formula = .outcome ~ ., data = dat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -256.68 -28.28 -4.98 17.65 644.32 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.537e+01 2.168e+01 1.170 0.2423 ## Boroughcount 5.312e-02 2.680e-03 19.819 &lt;2e-16 *** ## population_2015 -1.268e-04 5.966e-05 -2.126 0.0339 * ## median_house_price_2014 9.546e-06 2.674e-05 0.357 0.7212 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 75.03 on 553 degrees of freedom ## Multiple R-squared: 0.614, Adjusted R-squared: 0.6119 ## F-statistic: 293.2 on 3 and 553 DF, p-value: &lt; 2.2e-16 Our R squared and adjusted R squared have increased (albeit slightly) and all predictors are statistically significant. Note that whilst i have selected variables pretty randomly here for demonstration, if you use something like this in practice it’s important to have supported (referenced) reasoning behind your selections. 10.7.3 Ridge regression Least squares regression tries to minimise how far each point is away from the line…but if you look in this figure…the red dots are the training data and the green dots are the test data. Here normal OLS has been fitted to the training data perfectly…the sum of the squared residuals (squared error distance from the line) is very small, probably 0. But when applied to the test data the sum of the squared residuals is large — it therefore has high variance and would be termed to be overfitting the training data. Figure 10.1: This is a screenshot from the YouTube video Regularization Part 1: Ridge Regression by StatQuest Ridge regression probably won’t fit our training data as well, because we introduce a small amount of bias (adding value to the intercept — which is the Y value when X=0, normally making the line of best fit more horizontal) to give us less overall variance (the difference between the point and line value)…So essentially when the values are calculated the formula is trying to get the line of best fit through all the points with each point having minimum distance to the line. This is usually useful in trying to get predicitions from the model. Ridge regression also tries to minimise the sum of the squared residuals (distance to the line) but then adds \\(\\lambda\\) x \\(slope^2\\) — this is the bias changing the line of best fit Ok so let’s try and look at this with numbers… The goal here is to minimise the sum of the squared residuals…plus the ridge regression penalty \\(\\lambda * slope^2\\)… Firstly let’s assume you have a perfectly fit line — the sum of the least sqaure residuals would be 0 (the line overlaps the points). Assume \\(\\lambda\\) is 0.5 and the slope is 1.2, we have 0 (residuals) + 0.5 (\\(\\lambda\\)) * 1.44 (slope squared) = 0.72 Now we use ridge regression that shifts the line away from the perfect fit (with a bias penalty) that we had in least square regression…this would create residual values as the points no longer perfectly fit the line, assume these add to 0.2, \\(\\lambda\\) is 0.5, and the slope is 0.7…so this would give….0.2 (residuals) + 0.5 (\\(\\lambda\\)) * 0.49 (slope squared) = 0.445. So if we were trying to minimise the sum of the squared residuals plus the ridge regression penalty the ridge regression wins with a lower value. The penalty \\(\\lambda * slope^2\\) adds a bias (value to the intercept) to reduce the slope of the line as it tries to the minimise the sum of the distance of the points from the line and hopefully the variance between the line and the points…like this — Ridge is the blue line that has become slightly more horizontal… Figure 10.2: This is a screenshot from the YouTube video Regularization Part 1: Ridge Regression by StatQuest But wait…. how do we calculate \\(\\lambda\\), well we try a load of values and use cross validation (10 fold) to get the overall lowest variance from the line to the data points! COOL!!!! Let’s see an example to show that if \\(\\lambda\\) is 0, then we have our box standard linear regression…as the penalty \\(\\lambda * the slope^2\\) will be 0, so we will just be minimising the sum of the squared residuals. library(tidyverse) library(broom) library(glmnet) # sort the data our for ridge regression y &lt;- joined3$Wardcount %&gt;% # set NAs to 0 replace_na(., 0) x &lt;- joined3 %&gt;% dplyr::select(Boroughcount, hotels, population_2015, median_house_price_2014) %&gt;% data.matrix()%&gt;% # set NAs to 0 replace_na(., 0) # set seed means that if we re run this # we will get the same results set.seed(489) # this gives us a 50/50 split between # training and test data train = sample(1:nrow(x), nrow(x)/2) test = (-train) ytest = y[test] xtest =x[test] # run normmal regression normallm &lt;- lm(Wardcount ~ hotels+Boroughcount+population_2015 +median_house_price_2014, data = joined3) summary(normallm) ## ## Call: ## lm(formula = Wardcount ~ hotels + Boroughcount + population_2015 + ## median_house_price_2014, data = joined3) ## ## Residuals: ## Min 1Q Median 3Q Max ## -242.33 -30.22 -4.59 18.04 658.67 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.298e+01 2.183e+01 1.052 0.2931 ## hotels -8.156e-02 8.688e-02 -0.939 0.3483 ## Boroughcount 5.412e-02 2.885e-03 18.758 &lt;2e-16 *** ## population_2015 -1.265e-04 5.967e-05 -2.120 0.0344 * ## median_house_price_2014 1.448e-05 2.725e-05 0.531 0.5953 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 75.04 on 552 degrees of freedom ## Multiple R-squared: 0.6146, Adjusted R-squared: 0.6118 ## F-statistic: 220.1 on 4 and 552 DF, p-value: &lt; 2.2e-16 # make a variable for loads of lambda values # just for the example here lambda &lt;- 10^seq(10, -2, length = 100) #run ridge regression, here we use x to predict y ridge_mod &lt;- glmnet(x, y, alpha = 0, lambda = lambda) # x and y are our original data, #s is the size of the penalty which is 0 # and we want the coefficients out predict(ridge_mod, x=x,y=y, s = 0, exact = T, type = &#39;coefficients&#39;) ## 5 x 1 sparse Matrix of class &quot;dgCMatrix&quot; ## s1 ## (Intercept) 22.9512724488 ## Boroughcount 0.0541196642 ## hotels -0.0815697994 ## population_2015 -0.0001264325 ## median_house_price_2014 0.0000145227 The coefficient estaimtes should be the same or very very similar…now let’s try and use ridge regression to improve upon our least squares regression…first let’s show linear regression for comparison using the train data.. normallm2 &lt;- lm(Wardcount ~ hotels+Boroughcount+population_2015 +median_house_price_2014, data = joined3, subset = train) s_pred &lt;- predict(normallm2, newdata = joined3[test,]) mean((s_pred-ytest)^2) ## [1] 4572.147 Now we will find the best value for \\(\\lambda\\) using cross validation #find the best lambda from our list via cross-validation # family = gaussian means linear regression # type.measure = how cross evaluation will be evaluated # mse is mean square error cv_out &lt;- cv.glmnet(x[train,], y[train], alpha = 0, family=&quot;gaussian&quot;, type.measure = &quot;mse&quot;) Combined, this will fit a linear regression with a ridge regression penatly using 10-fold cross validation to find the best \\(\\lambda\\) value that minimises mean square error (average squared distance of the data points to the line). Let’s apply it to the model… plot(cv_out) # best value opt_lambda &lt;- cv_out$lambda.min # prediction to the testing data # s is set to optimal lambda # you could also use lambda.1se as # technically they are indistinguishable ridge_pred &lt;- predict(ridge_mod, s = opt_lambda, newx = x[test,]) # rsquared ridge_r &lt;- cor(y[test], ridge_pred)^2 ridge_r ## s1 ## [1,] 0.6470829 # mean square error mean((ridge_pred-ytest)^2) ## [1] 4097.263 You can also doing this in a few less steps with the ridge package 10.7.4 LASSO Least absolute shrinkage and selection operator (LASSO) performs variable selection and regularisation to increase prediction accuracy of the model…the only difference to ridge is that the regularisation term is an absolute value. So instead of squaring the slope (like i mentioned in Ridge regression), we take the absolute value (of the slope, as opposed the the squared value in Ridge) and as the slope can be 0 it can be removed from the model. As a result LASSO regression can increase \\(\\lambda\\) then set irrelevant parameters to 0 (Ridge will just shrink them but not set to 0) — relevant parameters might shrink a little bit in both too. The advantage here is that LASSO can exclude useless variables — so if you have a lot of variables it might be preferable. However, if most variables are useful then Ridge regression would probably work better. LASSO has an absolute penalty (also known as L1 penalty) Ridge has a square penalty (also known as L2 penalty) #find the best lambda from our list via cross-validation cv_out &lt;- cv.glmnet(x[train,], y[train], alpha = 1, family=&quot;gaussian&quot;, type.measure = &quot;mse&quot;) plot(cv_out) # best value opt_lambda &lt;- cv_out$lambda.min # make the model lasso_mod &lt;- glmnet(x[train,], y[train], alpha = 1, lambda = opt_lambda) # make the prediction lasso_pred &lt;- predict(lasso_mod, s = opt_lambda, newx = x[test,]) # r sqaured LASSO_r &lt;- cor(y[test], lasso_pred)^2 LASSO_r ## s1 ## [1,] 0.6326079 # mean square error mean((lasso_pred-ytest)^2) ## [1] 4337.546 10.7.5 Elastic net regression When you don’t know much about our variables in a model you can use Elastic-Net Regression. It starts with least squares then adds the LASSO and ridge regression penalty, allowing you to use the strengths of both. Both the LASSO penalty and ridge penalty get their own \\(\\lambda\\) values, \\(\\lambda_1\\) for LASSO, \\(\\lambda_2\\) for ridge. Cross validation runs for both \\(\\lambda_1\\) and \\(\\lambda_2\\). If both \\(\\lambda_1\\) and \\(\\lambda_2\\) &gt; 0 then we get a hybrid approach, this is good when we have correlated variables. LASSO will pick just one correlated variable and eliminate the other, whereas ridge will just shrink all of them. Using both LASSO and ridge we can group and shrink correlated variables or remove them all at the same time. In R, Elastic-Net Regression is where you change the alpha value between 0 and 1. You would use elastic net regression to see if it is possible to reduce the mean square error any further. Have a look at this video to see how to use a for loop to test different values for alpha. 10.7.6 What’s the best here Let’s compare the results of the MSE and r sqaured for the normallm2, LASSO and Ridge as we used the same predictors…this is the code to get the values we don’t already have… summary(normallm2)$r.squared ## [1] 0.6076268 Our lowest MSE and highest R sqaured value here is provided by Ridge regression…so from this analysis i’d select Ridge regression to predict any missing or future values of Airbnbs within the London wards…i’d probably also consider exploring using machine learning methods that are linked to below… Warning The data used within this practical is purely for demonstration purposes! 10.7.7 What should i use It depends, just because Ridge regression seems to be the best for this application, it might not be for yours. It’s important to check the suitability of each method for both your data and analysis. 10.7.8 So how do i predict Easy…just go back through the code and use the the predict() function — this will also work for linear models… # replace with your data - this is just an example # setting intervals specifies confidence intervals # at the required level predict(linearmodel, newdata, interval=&quot;confidence&quot;, level=0.95) WARNING Never try and predict data outside the range of your values, for example in the first regression model we ran when the count within Boroughs was 0 we had -3.8188 for Airbnbs within wards and it’s impossible to have negative Airbnbs. 10.7.9 Should i write advanced code It would be great if you could write your analysis in as least possible lines of code as possible…BUT you are not marked on how concise or efficient your code is in this course. My advice would be to get something that works and addresses all of the marking criteria and listen to Hadley Wickham…. The only way to write good code is to write tons of shitty code first. Feeling shame about bad code stops you from getting to good code — Hadley Wickham ((hadleywickham?)) April 17, 2015 10.8 More resources Ridge regression LASSO regression Elastic net regression All of them in R Evaluation methods An Introduction to Statistical Learning with Applications in R 10.9 Extension If you are already familiar with these regression methods try the following: Apply them to a dataset of your choice to see if you can predict a specific variable This free course by Julia Silge on supversied machine learning is pretty great Explore and apply machine learning techniques for predicting data such as Random Forest, Classification and Regression Trees, Support Vector Machine and others Try out maximum likelihood for estimating model parameters Have a look at the new tidymodels package Check out Machine learning fundamentals too. 10.10 Acknowledgement I’m certainly not an expert statistician but StatQuest with Josh Starmer really helped me explain all this. 10.11 Feedback Was anything that we explained unclear this week or was something really clear…let us know using the feedback form. It’s anonymous and we’ll use the responses to clear any issues up in the future / adapt the material. "],["assignment-resources-1.html", "Chapter 11 Assignment resources 11.1 Timeline 11.2 Markscheme 11.3 Examples of previous work 11.4 Events / meet other spatial data professionals 11.5 Cool stuff to explore 11.6 Assignment ideas 11.7 Books/reading resources 11.8 New developments 11.9 Data 11.10 Data lists 11.11 Reading and writing critically 11.12 Free flow diagram tools 11.13 Basics", " Chapter 11 Assignment resources Listed below are some helpful website, books, datasets and tools you might find useful when completing your assignments. 11.1 Timeline There is a suggested timeline of work for your assignment provided in the GIS coursework requirements PDF on Moodle. 11.2 Markscheme The markscheme can be found on Moodle with a break down of how much percent is given to each criteron. Read it closely and often when writing your assignment. 11.3 Examples of previous work Closer to the assignment deadline we will release examples of good student projects from previous years as a tab on Moodle. Note that the requirements / markscheme have been altered this year. 11.4 Events / meet other spatial data professionals The UK ESRI conference is normally free to go to and whilst (in my opinion) it’s mostly just ESRI marketing their latest products it is good to go along and see how industry are using spatial software. It might also be useful for dissertation ideas / networking. Next year it’s scheduled for the 19/5/2020. Missing maps LondonR group 11.5 Cool stuff to explore New packages and functions that i’ve recently come across that are worth exploring.. RStudio cloud — like RStudio but online, great for collaborating, although it now (2020) has caps on how much you can use it. Animating plots Bivariate maps Rayshader R Cartography package Data is beautiful reddit Network visualisation 11.6 Assignment ideas The Value of GIS &amp; Spatial Data Science in Achieving the Sustainable Development Goals by Cobus van Rooyen 11.7 Books/reading resources There are a lot of free online books for geospatial analysis, especially using R, check out: Data Visualization A practical introduction R Programming for Data Science Everything you need for Exploratory Data Analysis &amp; Visualization What They Forgot to Teach You About R RMarkdown for Scientists RStudio recommended books R Graphics Cookbook Hadley Wickham’s website Geocomputation with R Happy Git and GitHub for the useR Bookdown information pages Interactive web-based data visualization with R, plotly, and shiny YaRrr! The Pirate’s Guide to R Engineering Production-Grade Shiny Apps Geospatial Health Data: Modeling and Visualization with R-INLA and Shiny Statistical Inference via Data Science Fundamentals of Data Visualization 21 Recipes for Mining Tiwtter Data with rtweet Learning statistics with R: A tutorial for psychology students and other beginners Crime mapping in R If you want to produce more efficent R code then have a look at the Efficient R programming book. …that’s a lot of books, should we read all of them? No, be selective, a lot of the same material will be covered in each book. Follow your interests, read widely and think about how you could apply these ideas / concepts to different topics or disciplines! 11.8 New developments Every year there is a useR conference that provides a load to tutorials on the latest developments and research…check them out here: R Weekly, podcast with weekly highlights and new developments in R Data to viz, really great website with code Modern data plots Make graphics like the BBC UseR2019 tutorials UseR2019 materials Other useful tutorials can be found at: rweekly Chrisbrusdon’s RPubs Alexsingleton’s RPubs Tutorial for cropping a raster interactively simplystatistics 11.8.1 Twitter R package authors regularly tweet with updates and new developments. If twitter is your thing go and follow these people to start with…and anyone else you come across… Hadley Wickham Mara Averick Carl Howe Alison Hill Robin Lovelace Yihui Xie Hannah Frick Jakub Nowosad Nick Tierney #rstats R packages you might have missed R for data science We are R-Ladies R-Ladies Global I often learn about a lot of new R pacakges / code / isuues from Twitter! 11.9 Data This is by no means an extensive data list, but summarises data used within some of the practicals alongside a few additions that you might want to explore when sourcing data for your assignments. You are not limited to these data sets for you assessment. Google dataset search Tesco store data (London) NHS data (ready for R) US City Open Data Census nomis ONS geoportal UK data service ONS Edina (e.g. OS mastermap) Open Topography USGS Earth Explorer Geofabrik (OSM data) Global weather data (points) London data store Air b n b data NASA SocioEconomic Data and Applications Center (SEDAC) UN environmental data explorer World pop World pop github DIVA-GIS DEFRA US Cesus data TFL open data TFL cycling data EU tourism data NASA EARTHDATA Camden air action Kings data on air pollution Uber travel time data Eurostat London Tube PM2.5 levels Bike docking data in an R package UK COVID data R package for COVID data Tidy Tuesday data (although look for spatial data) Correct statistical tests 11.10 Data lists Awesome public datasets have a wide range all data (some geographic, some not): Robin Wilson has authored one of the most extensive data lists that i’ve come across 11.11 Reading and writing critically Hugh Kerans from Flinders Unversity, Adelaide has developed a range of materials to assist graduate students in producing effective reports and publications…check out his website and resouces here: https://www.ithinkwell.com.au/ The most useful templates for the assignments are the critical reading one: and questions to ask as you write a paper (or assignment): You can download these from this website directly, my GitHub or Hugh’s website. The UCL Institute for Education (IOE) Writing Centre Online have produced this very short (&lt; 2 minutes read) critical writing guide giving an example of how to change writing from largely descriptive to critical. …And of coruse the paper ‘How to write a paper for publicaiton’ by Rosenfeldt et al. (2000) 11.12 Free flow diagram tools PowerPoint (from UCL software site) Draw.io Lucidchart R Package DiagrammeR UML (Unified Modeling Language) diagrams Free at the time of writing 11.13 Basics Here are some tips based on common marker comments of how to write a decent assingment… Don’t cut and paste maps / figures / formulas / tables, export them properly or remake them nicely and credit a source somewhere such as the figure caption (e.g. source Smith et al. 2009 or adapted from Smith et al. 2009). Make maps and figures the right way — don’t just leave layer names (e.g. osm_points_road) in a legend, rename them to something with meaning! If you use a formula write it properly — don’t cut and paste, fully explain all the symbols / variables too. Make sure you write a sufficient caption for figures / maps / flow diagrams / tables. The reader should be able to understand them without any other information. In other words, if you gave someone a figure with just the caption they should be able to tell you what it shows. Don’t bullet point methods, summarise with sentances and use a flow diagram if appropraite. Here is a quick guide to writing a report… 11.13.1 Introduction Make sure you say why your mini investiation is important near the start— why should we care! Try to answer the so what question. The introduction should set the scene and introduce the reader to issue (what is the background to it), its importance (so what?) and lead onto outlining the research question of the study. 11.13.2 Literature review The literature review should evaluate exisiting research, demonstrate contrasting and/or similar views whilst highlight research gaps (that hopefully your research will contribute to / address). This could also include policy documents or documents from reputable soruces (e.g. UN / EU / authoritative bodies). Wikepedia is not a valid academic source and please don’t just list what authors have done in the past (e.g. Smith 2009 did x but Jones 2008 did y then Frank 2010 did x). Synthesise previous work / policy documents and provide a narrative through it whilst trying to show where the research gap is / where you question fits in. Try to end the literature review with a concluding paragraph that concisely summarises everything within it and states what your work is going to contribute or address. Think of this section as providing a story to what everyone else has done (whilst also showing issues / reseach gaps) then at then end BAMMM… this is what you are going to do. 11.13.3 Methodology Methodology is what you did (analysis, data processing, data cleaning, etc), a reader should be able to replicate your analysis but you don’t need excessive detail — you do not need to list every tool you used. For example, data was loaded uisng read_csv() and then reprojected using st_transform() is too much information for the assignment (you could include this type of information in the comments of your code / RMarkdown document). 11.13.4 Results Results is what you found — be selective about figures you include and provide. To do so ask yourself what does this contribute to my research / aim / objective to see if you need it. Please provide a narrative that guides the reader through your findings, don’t just present result after result after result after result. 11.13.5 Discussion Discussion should have lots of critical reflection…by that i mean… how do your results fit in with and then advance the ideas presented by others either in academic or policy literature. Really say why this is important with appropriate referencing. 11.13.6 Conclusion Your conclusion should restate what you set out to investigate, summarise how you acheived it, what your results showed, why it is important and in this case specify recommendations (e.g. what should be changed or altered to fix the issue / question you explored). Do not add any new material in this section (e.g. talk about new ideas or add new references). Whilst it seems like i’ve listed a lot of things to inlcude it short be relatively short — a concise summary. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
